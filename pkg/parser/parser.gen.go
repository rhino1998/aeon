// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

func anyToSlice[T any](s any) []T {
	var ret []T
	for _, e := range s.([]any) {
		if e == nil {
			continue
		}
		ret = append(ret, e.(T))
	}

	return ret
}

func toPtr[T any](v T) *T {
	return &v
}

func maybe[T any](v any) T {
	if v == nil {
		var t T
		return t
	}

	return v.(T)
}

func maybePtr[T any](v any) *T {
	if v == nil {
		return nil
	}

	return toPtr(v.(T))
}

func maybeSlice[T any](v any) []T {
	if v == nil {
		return nil
	}

	return v.([]T)
}

var g = &grammar{
	rules: []*rule{
		{
			name: "File",
			pos:  position{line: 48, col: 1, offset: 595},
			expr: &actionExpr{
				pos: position{line: 48, col: 9, offset: 603},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 48, col: 9, offset: 603},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 48, col: 9, offset: 603},
							label: "pkg",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 13, offset: 607},
								name: "Package",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 21, offset: 615},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 48, col: 24, offset: 618},
							label: "decls",
							expr: &zeroOrMoreExpr{
								pos: position{line: 48, col: 30, offset: 624},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 31, offset: 625},
									name: "Declaration",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 45, offset: 639},
							name: "EOF",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Keyword",
			pos:  position{line: 56, col: 1, offset: 752},
			expr: &choiceExpr{
				pos: position{line: 56, col: 12, offset: 763},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 56, col: 12, offset: 763},
						val:        "map",
						ignoreCase: false,
						want:       "\"map\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 20, offset: 771},
						val:        "func",
						ignoreCase: false,
						want:       "\"func\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 29, offset: 780},
						val:        "if",
						ignoreCase: false,
						want:       "\"if\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 36, offset: 787},
						val:        "else",
						ignoreCase: false,
						want:       "\"else\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 45, offset: 796},
						val:        "for",
						ignoreCase: false,
						want:       "\"for\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 53, offset: 804},
						val:        "package",
						ignoreCase: false,
						want:       "\"package\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 65, offset: 816},
						val:        "var",
						ignoreCase: false,
						want:       "\"var\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 73, offset: 824},
						val:        "extern",
						ignoreCase: false,
						want:       "\"extern\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 84, offset: 835},
						val:        "const",
						ignoreCase: false,
						want:       "\"const\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 94, offset: 845},
						val:        "struct",
						ignoreCase: false,
						want:       "\"struct\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 105, offset: 856},
						val:        "break",
						ignoreCase: false,
						want:       "\"break\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 115, offset: 866},
						val:        "continue",
						ignoreCase: false,
						want:       "\"continue\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Package",
			pos:  position{line: 58, col: 1, offset: 878},
			expr: &actionExpr{
				pos: position{line: 58, col: 12, offset: 889},
				run: (*parser).callonPackage1,
				expr: &seqExpr{
					pos: position{line: 58, col: 12, offset: 889},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 58, col: 12, offset: 889},
							val:        "package",
							ignoreCase: false,
							want:       "\"package\"",
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 22, offset: 899},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 58, col: 24, offset: 901},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 29, offset: 906},
								name: "Identifier",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Declaration",
			pos:  position{line: 64, col: 1, offset: 978},
			expr: &actionExpr{
				pos: position{line: 64, col: 16, offset: 993},
				run: (*parser).callonDeclaration1,
				expr: &seqExpr{
					pos: position{line: 64, col: 16, offset: 993},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 64, col: 16, offset: 993},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 64, col: 18, offset: 995},
							label: "decl",
							expr: &choiceExpr{
								pos: position{line: 64, col: 24, offset: 1001},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 64, col: 24, offset: 1001},
										name: "Directive",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 36, offset: 1013},
										name: "MethodDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 56, offset: 1033},
										name: "FunctionDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 78, offset: 1055},
										name: "ExternFuncDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 102, offset: 1079},
										name: "TypeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 120, offset: 1097},
										name: "VarDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 137, offset: 1114},
										name: "ConstDeclaration",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 64, col: 155, offset: 1132},
							name: "__",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Directive",
			pos:  position{line: 68, col: 1, offset: 1159},
			expr: &actionExpr{
				pos: position{line: 68, col: 14, offset: 1172},
				run: (*parser).callonDirective1,
				expr: &seqExpr{
					pos: position{line: 68, col: 14, offset: 1172},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 68, col: 14, offset: 1172},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 68, col: 18, offset: 1176},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 68, col: 23, offset: 1181},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 68, col: 34, offset: 1192},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 68, col: 36, offset: 1194},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 68, col: 41, offset: 1199},
								expr: &ruleRefExpr{
									pos:  position{line: 68, col: 41, offset: 1199},
									name: "DirectiveArguments",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 68, col: 61, offset: 1219},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 68, col: 64, offset: 1222},
							label: "decl",
							expr: &ruleRefExpr{
								pos:  position{line: 68, col: 69, offset: 1227},
								name: "Declaration",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveArguments",
			pos:  position{line: 78, col: 1, offset: 1387},
			expr: &actionExpr{
				pos: position{line: 78, col: 23, offset: 1409},
				run: (*parser).callonDirectiveArguments1,
				expr: &seqExpr{
					pos: position{line: 78, col: 23, offset: 1409},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 78, col: 23, offset: 1409},
							label: "arg",
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 27, offset: 1413},
								name: "DirectiveArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 78, col: 45, offset: 1431},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 78, col: 50, offset: 1436},
								expr: &ruleRefExpr{
									pos:  position{line: 78, col: 50, offset: 1436},
									name: "DirectiveArgumentsRest",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveArgumentsRest",
			pos:  position{line: 82, col: 1, offset: 1533},
			expr: &actionExpr{
				pos: position{line: 82, col: 27, offset: 1559},
				run: (*parser).callonDirectiveArgumentsRest1,
				expr: &seqExpr{
					pos: position{line: 82, col: 27, offset: 1559},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 82, col: 27, offset: 1559},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 82, col: 29, offset: 1561},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 82, col: 34, offset: 1566},
								name: "DirectiveArguments",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveArgument",
			pos:  position{line: 86, col: 1, offset: 1608},
			expr: &choiceExpr{
				pos: position{line: 86, col: 22, offset: 1629},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 86, col: 22, offset: 1629},
						name: "Identifier",
					},
					&ruleRefExpr{
						pos:  position{line: 86, col: 35, offset: 1642},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 86, col: 51, offset: 1658},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 86, col: 66, offset: 1673},
						name: "IntLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 86, col: 79, offset: 1686},
						name: "BoolLiteral",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeDeclaration",
			pos:  position{line: 88, col: 1, offset: 1699},
			expr: &actionExpr{
				pos: position{line: 88, col: 20, offset: 1718},
				run: (*parser).callonTypeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 88, col: 20, offset: 1718},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 88, col: 20, offset: 1718},
							val:        "type",
							ignoreCase: false,
							want:       "\"type\"",
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 27, offset: 1725},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 29, offset: 1727},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 34, offset: 1732},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 45, offset: 1743},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 47, offset: 1745},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 51, offset: 1749},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ConstDeclaration",
			pos:  position{line: 95, col: 1, offset: 1845},
			expr: &actionExpr{
				pos: position{line: 95, col: 21, offset: 1865},
				run: (*parser).callonConstDeclaration1,
				expr: &seqExpr{
					pos: position{line: 95, col: 21, offset: 1865},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 95, col: 21, offset: 1865},
							val:        "const",
							ignoreCase: false,
							want:       "\"const\"",
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 29, offset: 1873},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 95, col: 31, offset: 1875},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 95, col: 36, offset: 1880},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 47, offset: 1891},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 95, col: 49, offset: 1893},
							label: "typ",
							expr: &zeroOrOneExpr{
								pos: position{line: 95, col: 53, offset: 1897},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 53, offset: 1897},
									name: "Type",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 59, offset: 1903},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 95, col: 61, offset: 1905},
							label: "exp",
							expr: &zeroOrOneExpr{
								pos: position{line: 95, col: 65, offset: 1909},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 65, offset: 1909},
									name: "VarStatementExpr",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Type",
			pos:  position{line: 109, col: 1, offset: 2197},
			expr: &choiceExpr{
				pos: position{line: 109, col: 9, offset: 2205},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 109, col: 9, offset: 2205},
						name: "Identifier",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 22, offset: 2218},
						name: "PointerType",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 36, offset: 2232},
						name: "MapType",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 46, offset: 2242},
						name: "ArrayType",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 58, offset: 2254},
						name: "SliceType",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 70, offset: 2266},
						name: "TupleType",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 82, offset: 2278},
						name: "StructType",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PointerType",
			pos:  position{line: 111, col: 1, offset: 2290},
			expr: &actionExpr{
				pos: position{line: 111, col: 16, offset: 2305},
				run: (*parser).callonPointerType1,
				expr: &seqExpr{
					pos: position{line: 111, col: 16, offset: 2305},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 111, col: 16, offset: 2305},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&labeledExpr{
							pos:   position{line: 111, col: 20, offset: 2309},
							label: "pointee",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 28, offset: 2317},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SliceType",
			pos:  position{line: 119, col: 1, offset: 2407},
			expr: &actionExpr{
				pos: position{line: 119, col: 14, offset: 2420},
				run: (*parser).callonSliceType1,
				expr: &seqExpr{
					pos: position{line: 119, col: 14, offset: 2420},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 119, col: 14, offset: 2420},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 119, col: 18, offset: 2424},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 119, col: 20, offset: 2426},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&labeledExpr{
							pos:   position{line: 119, col: 24, offset: 2430},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 32, offset: 2438},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArrayType",
			pos:  position{line: 127, col: 1, offset: 2526},
			expr: &actionExpr{
				pos: position{line: 127, col: 14, offset: 2539},
				run: (*parser).callonArrayType1,
				expr: &seqExpr{
					pos: position{line: 127, col: 14, offset: 2539},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 127, col: 14, offset: 2539},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 18, offset: 2543},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 127, col: 20, offset: 2545},
							label: "length",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 28, offset: 2553},
								name: "IntLiteral",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 40, offset: 2565},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 127, col: 42, offset: 2567},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&labeledExpr{
							pos:   position{line: 127, col: 46, offset: 2571},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 54, offset: 2579},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleType",
			pos:  position{line: 136, col: 1, offset: 2698},
			expr: &actionExpr{
				pos: position{line: 136, col: 14, offset: 2711},
				run: (*parser).callonTupleType1,
				expr: &seqExpr{
					pos: position{line: 136, col: 14, offset: 2711},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 136, col: 14, offset: 2711},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 136, col: 18, offset: 2715},
							label: "elems",
							expr: &zeroOrOneExpr{
								pos: position{line: 136, col: 24, offset: 2721},
								expr: &ruleRefExpr{
									pos:  position{line: 136, col: 24, offset: 2721},
									name: "TupleTypeList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 136, col: 39, offset: 2736},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleTypeList",
			pos:  position{line: 144, col: 1, offset: 2833},
			expr: &actionExpr{
				pos: position{line: 144, col: 18, offset: 2850},
				run: (*parser).callonTupleTypeList1,
				expr: &seqExpr{
					pos: position{line: 144, col: 18, offset: 2850},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 144, col: 18, offset: 2850},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 144, col: 20, offset: 2852},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 144, col: 25, offset: 2857},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 30, offset: 2862},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 144, col: 32, offset: 2864},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 144, col: 37, offset: 2869},
								expr: &ruleRefExpr{
									pos:  position{line: 144, col: 37, offset: 2869},
									name: "TupleTypeListComma",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleTypeListComma",
			pos:  position{line: 148, col: 1, offset: 2963},
			expr: &actionExpr{
				pos: position{line: 148, col: 23, offset: 2985},
				run: (*parser).callonTupleTypeListComma1,
				expr: &seqExpr{
					pos: position{line: 148, col: 23, offset: 2985},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 148, col: 23, offset: 2985},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&labeledExpr{
							pos:   position{line: 148, col: 27, offset: 2989},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 148, col: 32, offset: 2994},
								name: "TupleTypeList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StructType",
			pos:  position{line: 152, col: 1, offset: 3032},
			expr: &actionExpr{
				pos: position{line: 152, col: 15, offset: 3046},
				run: (*parser).callonStructType1,
				expr: &seqExpr{
					pos: position{line: 152, col: 15, offset: 3046},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 152, col: 15, offset: 3046},
							val:        "struct",
							ignoreCase: false,
							want:       "\"struct\"",
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 24, offset: 3055},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 152, col: 26, offset: 3057},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 152, col: 30, offset: 3061},
							label: "elems",
							expr: &zeroOrOneExpr{
								pos: position{line: 152, col: 36, offset: 3067},
								expr: &ruleRefExpr{
									pos:  position{line: 152, col: 36, offset: 3067},
									name: "StructFieldList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 53, offset: 3084},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 152, col: 56, offset: 3087},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StructField",
			pos:  position{line: 160, col: 1, offset: 3187},
			expr: &actionExpr{
				pos: position{line: 160, col: 16, offset: 3202},
				run: (*parser).callonStructField1,
				expr: &seqExpr{
					pos: position{line: 160, col: 16, offset: 3202},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 160, col: 16, offset: 3202},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 160, col: 21, offset: 3207},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 160, col: 32, offset: 3218},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 160, col: 34, offset: 3220},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 160, col: 38, offset: 3224},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StructFieldList",
			pos:  position{line: 167, col: 1, offset: 3310},
			expr: &actionExpr{
				pos: position{line: 167, col: 20, offset: 3329},
				run: (*parser).callonStructFieldList1,
				expr: &seqExpr{
					pos: position{line: 167, col: 20, offset: 3329},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 167, col: 20, offset: 3329},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 23, offset: 3332},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 167, col: 29, offset: 3338},
								name: "StructField",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 41, offset: 3350},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 43, offset: 3352},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 167, col: 48, offset: 3357},
								expr: &ruleRefExpr{
									pos:  position{line: 167, col: 48, offset: 3357},
									name: "StructFieldListComma",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StructFieldListComma",
			pos:  position{line: 171, col: 1, offset: 3474},
			expr: &actionExpr{
				pos: position{line: 171, col: 25, offset: 3498},
				run: (*parser).callonStructFieldListComma1,
				expr: &seqExpr{
					pos: position{line: 171, col: 25, offset: 3498},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 171, col: 25, offset: 3498},
							name: "nl",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 28, offset: 3501},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 33, offset: 3506},
								name: "StructFieldList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleKey",
			pos:  position{line: 176, col: 1, offset: 3546},
			expr: &actionExpr{
				pos: position{line: 176, col: 13, offset: 3558},
				run: (*parser).callonTupleKey1,
				expr: &oneOrMoreExpr{
					pos: position{line: 176, col: 13, offset: 3558},
					expr: &charClassMatcher{
						pos:        position{line: 176, col: 13, offset: 3558},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MapType",
			pos:  position{line: 180, col: 1, offset: 3603},
			expr: &actionExpr{
				pos: position{line: 180, col: 12, offset: 3614},
				run: (*parser).callonMapType1,
				expr: &seqExpr{
					pos: position{line: 180, col: 12, offset: 3614},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 180, col: 12, offset: 3614},
							val:        "map",
							ignoreCase: false,
							want:       "\"map\"",
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 18, offset: 3620},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 180, col: 20, offset: 3622},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 24, offset: 3626},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 180, col: 26, offset: 3628},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 180, col: 30, offset: 3632},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 35, offset: 3637},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 180, col: 37, offset: 3639},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 41, offset: 3643},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 180, col: 43, offset: 3645},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 180, col: 49, offset: 3651},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Statement",
			pos:  position{line: 184, col: 1, offset: 3720},
			expr: &actionExpr{
				pos: position{line: 184, col: 14, offset: 3733},
				run: (*parser).callonStatement1,
				expr: &labeledExpr{
					pos:   position{line: 184, col: 14, offset: 3733},
					label: "stmt",
					expr: &choiceExpr{
						pos: position{line: 184, col: 20, offset: 3739},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 184, col: 20, offset: 3739},
								name: "comment",
							},
							&ruleRefExpr{
								pos:  position{line: 184, col: 30, offset: 3749},
								name: "VarStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 184, col: 45, offset: 3764},
								name: "ReturnStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 184, col: 63, offset: 3782},
								name: "DeclarationStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 184, col: 86, offset: 3805},
								name: "AssignmentOperatorStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 184, col: 116, offset: 3835},
								name: "AssignmentStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 184, col: 138, offset: 3857},
								name: "IfStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 184, col: 152, offset: 3871},
								name: "ForStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 184, col: 167, offset: 3886},
								name: "PostfixStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 184, col: 186, offset: 3905},
								name: "ExprStatement",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SimpleStatement",
			pos:  position{line: 188, col: 1, offset: 3944},
			expr: &actionExpr{
				pos: position{line: 188, col: 20, offset: 3963},
				run: (*parser).callonSimpleStatement1,
				expr: &labeledExpr{
					pos:   position{line: 188, col: 20, offset: 3963},
					label: "stmt",
					expr: &choiceExpr{
						pos: position{line: 188, col: 26, offset: 3969},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 188, col: 26, offset: 3969},
								name: "VarStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 188, col: 41, offset: 3984},
								name: "DeclarationStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 188, col: 64, offset: 4007},
								name: "AssignmentOperatorStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 188, col: 94, offset: 4037},
								name: "AssignmentStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 188, col: 116, offset: 4059},
								name: "PostfixStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 188, col: 135, offset: 4078},
								name: "ExprStatement",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VarStatement",
			pos:  position{line: 192, col: 1, offset: 4117},
			expr: &actionExpr{
				pos: position{line: 192, col: 17, offset: 4133},
				run: (*parser).callonVarStatement1,
				expr: &seqExpr{
					pos: position{line: 192, col: 17, offset: 4133},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 192, col: 17, offset: 4133},
							val:        "var",
							ignoreCase: false,
							want:       "\"var\"",
						},
						&ruleRefExpr{
							pos:  position{line: 192, col: 23, offset: 4139},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 25, offset: 4141},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 30, offset: 4146},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 192, col: 41, offset: 4157},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 43, offset: 4159},
							label: "typ",
							expr: &zeroOrOneExpr{
								pos: position{line: 192, col: 47, offset: 4163},
								expr: &ruleRefExpr{
									pos:  position{line: 192, col: 47, offset: 4163},
									name: "Type",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 192, col: 53, offset: 4169},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 55, offset: 4171},
							label: "exp",
							expr: &zeroOrOneExpr{
								pos: position{line: 192, col: 59, offset: 4175},
								expr: &ruleRefExpr{
									pos:  position{line: 192, col: 59, offset: 4175},
									name: "VarStatementExpr",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VarStatementExpr",
			pos:  position{line: 206, col: 1, offset: 4460},
			expr: &actionExpr{
				pos: position{line: 206, col: 21, offset: 4480},
				run: (*parser).callonVarStatementExpr1,
				expr: &seqExpr{
					pos: position{line: 206, col: 21, offset: 4480},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 206, col: 21, offset: 4480},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 206, col: 25, offset: 4484},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 27, offset: 4486},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 206, col: 31, offset: 4490},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 206, col: 36, offset: 4495},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VarDeclaration",
			pos:  position{line: 210, col: 1, offset: 4527},
			expr: &actionExpr{
				pos: position{line: 210, col: 19, offset: 4545},
				run: (*parser).callonVarDeclaration1,
				expr: &seqExpr{
					pos: position{line: 210, col: 19, offset: 4545},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 210, col: 19, offset: 4545},
							val:        "var",
							ignoreCase: false,
							want:       "\"var\"",
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 25, offset: 4551},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 27, offset: 4553},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 32, offset: 4558},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 43, offset: 4569},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 45, offset: 4571},
							label: "typ",
							expr: &zeroOrOneExpr{
								pos: position{line: 210, col: 49, offset: 4575},
								expr: &ruleRefExpr{
									pos:  position{line: 210, col: 49, offset: 4575},
									name: "Type",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 55, offset: 4581},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 57, offset: 4583},
							label: "exp",
							expr: &zeroOrOneExpr{
								pos: position{line: 210, col: 61, offset: 4587},
								expr: &ruleRefExpr{
									pos:  position{line: 210, col: 61, offset: 4587},
									name: "VarDeclarationExpr",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VarDeclarationExpr",
			pos:  position{line: 224, col: 1, offset: 4875},
			expr: &actionExpr{
				pos: position{line: 224, col: 23, offset: 4897},
				run: (*parser).callonVarDeclarationExpr1,
				expr: &seqExpr{
					pos: position{line: 224, col: 23, offset: 4897},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 224, col: 23, offset: 4897},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 224, col: 27, offset: 4901},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 224, col: 29, offset: 4903},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 33, offset: 4907},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 224, col: 38, offset: 4912},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DeclarationStatement",
			pos:  position{line: 228, col: 1, offset: 4944},
			expr: &actionExpr{
				pos: position{line: 228, col: 25, offset: 4968},
				run: (*parser).callonDeclarationStatement1,
				expr: &seqExpr{
					pos: position{line: 228, col: 25, offset: 4968},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 228, col: 25, offset: 4968},
							label: "ident",
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 31, offset: 4974},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 228, col: 42, offset: 4985},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 228, col: 44, offset: 4987},
							val:        ":=",
							ignoreCase: false,
							want:       "\":=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 228, col: 49, offset: 4992},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 228, col: 51, offset: 4994},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 55, offset: 4998},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AssignmentStatement",
			pos:  position{line: 237, col: 1, offset: 5121},
			expr: &actionExpr{
				pos: position{line: 237, col: 24, offset: 5144},
				run: (*parser).callonAssignmentStatement1,
				expr: &seqExpr{
					pos: position{line: 237, col: 24, offset: 5144},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 237, col: 24, offset: 5144},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 29, offset: 5149},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 34, offset: 5154},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 237, col: 36, offset: 5156},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 40, offset: 5160},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 237, col: 42, offset: 5162},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 48, offset: 5168},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AssignmentOperatorStatement",
			pos:  position{line: 246, col: 1, offset: 5286},
			expr: &actionExpr{
				pos: position{line: 246, col: 32, offset: 5317},
				run: (*parser).callonAssignmentOperatorStatement1,
				expr: &seqExpr{
					pos: position{line: 246, col: 32, offset: 5317},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 246, col: 32, offset: 5317},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 37, offset: 5322},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 246, col: 42, offset: 5327},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 246, col: 44, offset: 5329},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 246, col: 48, offset: 5333},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 246, col: 48, offset: 5333},
										val:        "+=",
										ignoreCase: false,
										want:       "\"+=\"",
									},
									&litMatcher{
										pos:        position{line: 246, col: 55, offset: 5340},
										val:        "-=",
										ignoreCase: false,
										want:       "\"-=\"",
									},
									&litMatcher{
										pos:        position{line: 246, col: 62, offset: 5347},
										val:        "*=",
										ignoreCase: false,
										want:       "\"*=\"",
									},
									&litMatcher{
										pos:        position{line: 246, col: 69, offset: 5354},
										val:        "/=",
										ignoreCase: false,
										want:       "\"/=\"",
									},
									&litMatcher{
										pos:        position{line: 246, col: 76, offset: 5361},
										val:        "%=",
										ignoreCase: false,
										want:       "\"%=\"",
									},
									&litMatcher{
										pos:        position{line: 246, col: 83, offset: 5368},
										val:        "**=",
										ignoreCase: false,
										want:       "\"**=\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 246, col: 90, offset: 5375},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 246, col: 92, offset: 5377},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 98, offset: 5383},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ExprStatement",
			pos:  position{line: 256, col: 1, offset: 5545},
			expr: &actionExpr{
				pos: position{line: 256, col: 18, offset: 5562},
				run: (*parser).callonExprStatement1,
				expr: &labeledExpr{
					pos:   position{line: 256, col: 18, offset: 5562},
					label: "exp",
					expr: &ruleRefExpr{
						pos:  position{line: 256, col: 22, offset: 5566},
						name: "Expr",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PostfixStatement",
			pos:  position{line: 264, col: 1, offset: 5654},
			expr: &actionExpr{
				pos: position{line: 264, col: 21, offset: 5674},
				run: (*parser).callonPostfixStatement1,
				expr: &seqExpr{
					pos: position{line: 264, col: 21, offset: 5674},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 264, col: 21, offset: 5674},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 25, offset: 5678},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 264, col: 30, offset: 5683},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 264, col: 32, offset: 5685},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 264, col: 36, offset: 5689},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 264, col: 36, offset: 5689},
										val:        "++",
										ignoreCase: false,
										want:       "\"++\"",
									},
									&litMatcher{
										pos:        position{line: 264, col: 43, offset: 5696},
										val:        "--",
										ignoreCase: false,
										want:       "\"--\"",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IfStatement",
			pos:  position{line: 273, col: 1, offset: 5825},
			expr: &actionExpr{
				pos: position{line: 273, col: 16, offset: 5840},
				run: (*parser).callonIfStatement1,
				expr: &seqExpr{
					pos: position{line: 273, col: 16, offset: 5840},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 273, col: 16, offset: 5840},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 21, offset: 5845},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 273, col: 23, offset: 5847},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 27, offset: 5851},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 32, offset: 5856},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 273, col: 34, offset: 5858},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 273, col: 38, offset: 5862},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 273, col: 43, offset: 5867},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 43, offset: 5867},
									name: "StatementList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 58, offset: 5882},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 62, offset: 5886},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 273, col: 64, offset: 5888},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 273, col: 69, offset: 5893},
								expr: &choiceExpr{
									pos: position{line: 273, col: 70, offset: 5894},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 273, col: 70, offset: 5894},
											name: "ElseIfStatement",
										},
										&ruleRefExpr{
											pos:  position{line: 273, col: 88, offset: 5912},
											name: "ElseStatement",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseIfStatement",
			pos:  position{line: 283, col: 1, offset: 6097},
			expr: &actionExpr{
				pos: position{line: 283, col: 20, offset: 6116},
				run: (*parser).callonElseIfStatement1,
				expr: &seqExpr{
					pos: position{line: 283, col: 20, offset: 6116},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 283, col: 20, offset: 6116},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 27, offset: 6123},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 283, col: 29, offset: 6125},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 34, offset: 6130},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 283, col: 36, offset: 6132},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 40, offset: 6136},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 45, offset: 6141},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 283, col: 47, offset: 6143},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 283, col: 51, offset: 6147},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 56, offset: 6152},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 56, offset: 6152},
									name: "StatementList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 71, offset: 6167},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 75, offset: 6171},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 283, col: 77, offset: 6173},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 82, offset: 6178},
								expr: &choiceExpr{
									pos: position{line: 283, col: 83, offset: 6179},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 283, col: 83, offset: 6179},
											name: "ElseIfStatement",
										},
										&ruleRefExpr{
											pos:  position{line: 283, col: 101, offset: 6197},
											name: "ElseStatement",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseStatement",
			pos:  position{line: 293, col: 1, offset: 6386},
			expr: &actionExpr{
				pos: position{line: 293, col: 18, offset: 6403},
				run: (*parser).callonElseStatement1,
				expr: &seqExpr{
					pos: position{line: 293, col: 18, offset: 6403},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 293, col: 18, offset: 6403},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&ruleRefExpr{
							pos:  position{line: 293, col: 25, offset: 6410},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 293, col: 27, offset: 6412},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 293, col: 31, offset: 6416},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 293, col: 36, offset: 6421},
								expr: &ruleRefExpr{
									pos:  position{line: 293, col: 36, offset: 6421},
									name: "StatementList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 293, col: 51, offset: 6436},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 293, col: 53, offset: 6438},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForStatement",
			pos:  position{line: 302, col: 1, offset: 6543},
			expr: &actionExpr{
				pos: position{line: 302, col: 17, offset: 6559},
				run: (*parser).callonForStatement1,
				expr: &seqExpr{
					pos: position{line: 302, col: 17, offset: 6559},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 302, col: 17, offset: 6559},
							val:        "for",
							ignoreCase: false,
							want:       "\"for\"",
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 23, offset: 6565},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 25, offset: 6567},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 302, col: 32, offset: 6574},
								expr: &ruleRefExpr{
									pos:  position{line: 302, col: 32, offset: 6574},
									name: "ForStatementStatements",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 56, offset: 6598},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 302, col: 58, offset: 6600},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 62, offset: 6604},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 65, offset: 6607},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 302, col: 70, offset: 6612},
								expr: &ruleRefExpr{
									pos:  position{line: 302, col: 70, offset: 6612},
									name: "StatementList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 302, col: 85, offset: 6627},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForStatementStatements",
			pos:  position{line: 317, col: 1, offset: 6870},
			expr: &actionExpr{
				pos: position{line: 317, col: 27, offset: 6896},
				run: (*parser).callonForStatementStatements1,
				expr: &seqExpr{
					pos: position{line: 317, col: 27, offset: 6896},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 317, col: 27, offset: 6896},
							label: "init",
							expr: &zeroOrOneExpr{
								pos: position{line: 317, col: 32, offset: 6901},
								expr: &ruleRefExpr{
									pos:  position{line: 317, col: 32, offset: 6901},
									name: "SimpleStatement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 317, col: 49, offset: 6918},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 317, col: 51, offset: 6920},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
						&ruleRefExpr{
							pos:  position{line: 317, col: 55, offset: 6924},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 317, col: 57, offset: 6926},
							label: "cond",
							expr: &zeroOrOneExpr{
								pos: position{line: 317, col: 62, offset: 6931},
								expr: &ruleRefExpr{
									pos:  position{line: 317, col: 62, offset: 6931},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 317, col: 68, offset: 6937},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 317, col: 70, offset: 6939},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
						&ruleRefExpr{
							pos:  position{line: 317, col: 74, offset: 6943},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 317, col: 76, offset: 6945},
							label: "step",
							expr: &zeroOrOneExpr{
								pos: position{line: 317, col: 81, offset: 6950},
								expr: &ruleRefExpr{
									pos:  position{line: 317, col: 81, offset: 6950},
									name: "SimpleStatement",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ReturnStatement",
			pos:  position{line: 325, col: 1, offset: 7106},
			expr: &actionExpr{
				pos: position{line: 325, col: 20, offset: 7125},
				run: (*parser).callonReturnStatement1,
				expr: &seqExpr{
					pos: position{line: 325, col: 20, offset: 7125},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 325, col: 20, offset: 7125},
							val:        "return",
							ignoreCase: false,
							want:       "\"return\"",
						},
						&ruleRefExpr{
							pos:  position{line: 325, col: 29, offset: 7134},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 31, offset: 7136},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 325, col: 36, offset: 7141},
								expr: &ruleRefExpr{
									pos:  position{line: 325, col: 36, offset: 7141},
									name: "Expr",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ExternFuncDeclaration",
			pos:  position{line: 333, col: 1, offset: 7239},
			expr: &actionExpr{
				pos: position{line: 333, col: 26, offset: 7264},
				run: (*parser).callonExternFuncDeclaration1,
				expr: &seqExpr{
					pos: position{line: 333, col: 26, offset: 7264},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 333, col: 26, offset: 7264},
							val:        "extern",
							ignoreCase: false,
							want:       "\"extern\"",
						},
						&ruleRefExpr{
							pos:  position{line: 333, col: 35, offset: 7273},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 333, col: 37, offset: 7275},
							val:        "func",
							ignoreCase: false,
							want:       "\"func\"",
						},
						&ruleRefExpr{
							pos:  position{line: 333, col: 44, offset: 7282},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 333, col: 46, offset: 7284},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 51, offset: 7289},
								name: "Identifier",
							},
						},
						&litMatcher{
							pos:        position{line: 333, col: 62, offset: 7300},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 333, col: 66, offset: 7304},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 333, col: 73, offset: 7311},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 73, offset: 7311},
									name: "ParameterList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 333, col: 88, offset: 7326},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 333, col: 92, offset: 7330},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 333, col: 94, offset: 7332},
							label: "ret",
							expr: &zeroOrOneExpr{
								pos: position{line: 333, col: 98, offset: 7336},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 98, offset: 7336},
									name: "Type",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 333, col: 104, offset: 7342},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FunctionDeclaration",
			pos:  position{line: 341, col: 1, offset: 7500},
			expr: &actionExpr{
				pos: position{line: 341, col: 24, offset: 7523},
				run: (*parser).callonFunctionDeclaration1,
				expr: &seqExpr{
					pos: position{line: 341, col: 24, offset: 7523},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 341, col: 24, offset: 7523},
							val:        "func",
							ignoreCase: false,
							want:       "\"func\"",
						},
						&ruleRefExpr{
							pos:  position{line: 341, col: 31, offset: 7530},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 341, col: 33, offset: 7532},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 341, col: 38, offset: 7537},
								name: "Identifier",
							},
						},
						&litMatcher{
							pos:        position{line: 341, col: 49, offset: 7548},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 341, col: 53, offset: 7552},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 341, col: 60, offset: 7559},
								expr: &ruleRefExpr{
									pos:  position{line: 341, col: 60, offset: 7559},
									name: "ParameterList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 341, col: 75, offset: 7574},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 341, col: 79, offset: 7578},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 341, col: 81, offset: 7580},
							label: "ret",
							expr: &zeroOrOneExpr{
								pos: position{line: 341, col: 85, offset: 7584},
								expr: &ruleRefExpr{
									pos:  position{line: 341, col: 85, offset: 7584},
									name: "Type",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 341, col: 91, offset: 7590},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 341, col: 93, offset: 7592},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 341, col: 97, offset: 7596},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 341, col: 102, offset: 7601},
								expr: &ruleRefExpr{
									pos:  position{line: 341, col: 102, offset: 7601},
									name: "StatementList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 341, col: 117, offset: 7616},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MethodDeclaration",
			pos:  position{line: 352, col: 1, offset: 7832},
			expr: &actionExpr{
				pos: position{line: 352, col: 22, offset: 7853},
				run: (*parser).callonMethodDeclaration1,
				expr: &seqExpr{
					pos: position{line: 352, col: 22, offset: 7853},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 352, col: 22, offset: 7853},
							val:        "func",
							ignoreCase: false,
							want:       "\"func\"",
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 29, offset: 7860},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 352, col: 31, offset: 7862},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 35, offset: 7866},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 37, offset: 7868},
							label: "receiver",
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 46, offset: 7877},
								name: "Parameter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 56, offset: 7887},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 352, col: 58, offset: 7889},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 62, offset: 7893},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 64, offset: 7895},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 69, offset: 7900},
								name: "Identifier",
							},
						},
						&litMatcher{
							pos:        position{line: 352, col: 80, offset: 7911},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 84, offset: 7915},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 352, col: 91, offset: 7922},
								expr: &ruleRefExpr{
									pos:  position{line: 352, col: 91, offset: 7922},
									name: "ParameterList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 352, col: 106, offset: 7937},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 110, offset: 7941},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 112, offset: 7943},
							label: "ret",
							expr: &zeroOrOneExpr{
								pos: position{line: 352, col: 116, offset: 7947},
								expr: &ruleRefExpr{
									pos:  position{line: 352, col: 116, offset: 7947},
									name: "Type",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 122, offset: 7953},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 352, col: 124, offset: 7955},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 128, offset: 7959},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 352, col: 133, offset: 7964},
								expr: &ruleRefExpr{
									pos:  position{line: 352, col: 133, offset: 7964},
									name: "StatementList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 352, col: 148, offset: 7979},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StatementList",
			pos:  position{line: 364, col: 1, offset: 8227},
			expr: &actionExpr{
				pos: position{line: 364, col: 18, offset: 8244},
				run: (*parser).callonStatementList1,
				expr: &seqExpr{
					pos: position{line: 364, col: 18, offset: 8244},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 364, col: 18, offset: 8244},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 364, col: 21, offset: 8247},
							label: "stmt",
							expr: &ruleRefExpr{
								pos:  position{line: 364, col: 26, offset: 8252},
								name: "Statement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 364, col: 36, offset: 8262},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 364, col: 39, offset: 8265},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 364, col: 44, offset: 8270},
								expr: &ruleRefExpr{
									pos:  position{line: 364, col: 44, offset: 8270},
									name: "StatementList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 364, col: 59, offset: 8285},
							name: "__",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Parameter",
			pos:  position{line: 374, col: 1, offset: 8434},
			expr: &choiceExpr{
				pos: position{line: 374, col: 14, offset: 8447},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 374, col: 14, offset: 8447},
						name: "ParameterNamed",
					},
					&ruleRefExpr{
						pos:  position{line: 374, col: 31, offset: 8464},
						name: "ParameterUnnamed",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParameterUnnamed",
			pos:  position{line: 376, col: 1, offset: 8482},
			expr: &actionExpr{
				pos: position{line: 376, col: 21, offset: 8502},
				run: (*parser).callonParameterUnnamed1,
				expr: &labeledExpr{
					pos:   position{line: 376, col: 21, offset: 8502},
					label: "typ",
					expr: &ruleRefExpr{
						pos:  position{line: 376, col: 25, offset: 8506},
						name: "Type",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParameterNamed",
			pos:  position{line: 382, col: 1, offset: 8567},
			expr: &actionExpr{
				pos: position{line: 382, col: 19, offset: 8585},
				run: (*parser).callonParameterNamed1,
				expr: &seqExpr{
					pos: position{line: 382, col: 19, offset: 8585},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 382, col: 19, offset: 8585},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 24, offset: 8590},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 35, offset: 8601},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 382, col: 37, offset: 8603},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 41, offset: 8607},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParameterList",
			pos:  position{line: 389, col: 1, offset: 8706},
			expr: &actionExpr{
				pos: position{line: 389, col: 18, offset: 8723},
				run: (*parser).callonParameterList1,
				expr: &seqExpr{
					pos: position{line: 389, col: 18, offset: 8723},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 389, col: 18, offset: 8723},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 389, col: 20, offset: 8725},
							label: "param",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 26, offset: 8731},
								name: "Parameter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 389, col: 36, offset: 8741},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 389, col: 38, offset: 8743},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 389, col: 43, offset: 8748},
								expr: &ruleRefExpr{
									pos:  position{line: 389, col: 43, offset: 8748},
									name: "ParameterListComma",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParameterListComma",
			pos:  position{line: 393, col: 1, offset: 8858},
			expr: &actionExpr{
				pos: position{line: 393, col: 23, offset: 8880},
				run: (*parser).callonParameterListComma1,
				expr: &seqExpr{
					pos: position{line: 393, col: 23, offset: 8880},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 393, col: 23, offset: 8880},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&labeledExpr{
							pos:   position{line: 393, col: 27, offset: 8884},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 393, col: 32, offset: 8889},
								name: "ParameterList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Identifier",
			pos:  position{line: 397, col: 1, offset: 8927},
			expr: &actionExpr{
				pos: position{line: 397, col: 15, offset: 8941},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 397, col: 15, offset: 8941},
					exprs: []any{
						&notExpr{
							pos: position{line: 397, col: 15, offset: 8941},
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 16, offset: 8942},
								name: "Keyword",
							},
						},
						&charClassMatcher{
							pos:        position{line: 397, col: 24, offset: 8950},
							val:        "[_a-zA-Z]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 397, col: 33, offset: 8959},
							expr: &charClassMatcher{
								pos:        position{line: 397, col: 33, offset: 8959},
								val:        "[_a-zA-Z0-9]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParenthesizedExpr",
			pos:  position{line: 401, col: 1, offset: 9011},
			expr: &actionExpr{
				pos: position{line: 401, col: 22, offset: 9032},
				run: (*parser).callonParenthesizedExpr1,
				expr: &seqExpr{
					pos: position{line: 401, col: 22, offset: 9032},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 401, col: 22, offset: 9032},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 401, col: 26, offset: 9036},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 401, col: 28, offset: 9038},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 33, offset: 9043},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 401, col: 38, offset: 9048},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 401, col: 40, offset: 9050},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IntLiteral",
			pos:  position{line: 409, col: 1, offset: 9142},
			expr: &actionExpr{
				pos: position{line: 409, col: 15, offset: 9156},
				run: (*parser).callonIntLiteral1,
				expr: &seqExpr{
					pos: position{line: 409, col: 15, offset: 9156},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 409, col: 15, offset: 9156},
							expr: &litMatcher{
								pos:        position{line: 409, col: 15, offset: 9156},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&choiceExpr{
							pos: position{line: 409, col: 22, offset: 9163},
							alternatives: []any{
								&oneOrMoreExpr{
									pos: position{line: 409, col: 22, offset: 9163},
									expr: &charClassMatcher{
										pos:        position{line: 409, col: 22, offset: 9163},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&seqExpr{
									pos: position{line: 409, col: 32, offset: 9173},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 409, col: 32, offset: 9173},
											val:        "0x",
											ignoreCase: false,
											want:       "\"0x\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 409, col: 37, offset: 9178},
											expr: &charClassMatcher{
												pos:        position{line: 409, col: 37, offset: 9178},
												val:        "[0-9a-f]",
												ranges:     []rune{'0', '9', 'a', 'f'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 409, col: 51, offset: 9192},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 409, col: 51, offset: 9192},
											val:        "0o",
											ignoreCase: false,
											want:       "\"0o\"",
										},
										&charClassMatcher{
											pos:        position{line: 409, col: 56, offset: 9197},
											val:        "[0-7]",
											ranges:     []rune{'0', '7'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&seqExpr{
									pos: position{line: 409, col: 66, offset: 9207},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 409, col: 66, offset: 9207},
											val:        "0b",
											ignoreCase: false,
											want:       "\"0b\"",
										},
										&charClassMatcher{
											pos:        position{line: 409, col: 71, offset: 9212},
											val:        "[0-1]",
											ranges:     []rune{'0', '1'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 422, col: 1, offset: 9385},
			expr: &actionExpr{
				pos: position{line: 422, col: 17, offset: 9401},
				run: (*parser).callonFloatLiteral1,
				expr: &seqExpr{
					pos: position{line: 422, col: 17, offset: 9401},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 422, col: 17, offset: 9401},
							expr: &litMatcher{
								pos:        position{line: 422, col: 17, offset: 9401},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&seqExpr{
							pos: position{line: 422, col: 25, offset: 9409},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 422, col: 25, offset: 9409},
									expr: &charClassMatcher{
										pos:        position{line: 422, col: 25, offset: 9409},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 422, col: 31, offset: 9415},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 422, col: 34, offset: 9418},
									expr: &charClassMatcher{
										pos:        position{line: 422, col: 34, offset: 9418},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StringLiteral",
			pos:  position{line: 436, col: 1, offset: 9593},
			expr: &actionExpr{
				pos: position{line: 436, col: 18, offset: 9610},
				run: (*parser).callonStringLiteral1,
				expr: &seqExpr{
					pos: position{line: 436, col: 18, offset: 9610},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 436, col: 18, offset: 9610},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 436, col: 22, offset: 9614},
							expr: &choiceExpr{
								pos: position{line: 436, col: 24, offset: 9616},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 436, col: 24, offset: 9616},
										exprs: []any{
											&notExpr{
												pos: position{line: 436, col: 24, offset: 9616},
												expr: &ruleRefExpr{
													pos:  position{line: 436, col: 25, offset: 9617},
													name: "EscapedChar",
												},
											},
											&anyMatcher{
												line: 436, col: 37, offset: 9629,
											},
										},
									},
									&seqExpr{
										pos: position{line: 436, col: 41, offset: 9633},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 436, col: 41, offset: 9633},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&ruleRefExpr{
												pos:  position{line: 436, col: 46, offset: 9638},
												name: "EscapeSequence",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 436, col: 64, offset: 9656},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BoolLiteral",
			pos:  position{line: 450, col: 1, offset: 9908},
			expr: &actionExpr{
				pos: position{line: 450, col: 16, offset: 9923},
				run: (*parser).callonBoolLiteral1,
				expr: &choiceExpr{
					pos: position{line: 450, col: 17, offset: 9924},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 450, col: 17, offset: 9924},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&litMatcher{
							pos:        position{line: 450, col: 26, offset: 9933},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IdentifierExpr",
			pos:  position{line: 458, col: 1, offset: 10036},
			expr: &actionExpr{
				pos: position{line: 458, col: 19, offset: 10054},
				run: (*parser).callonIdentifierExpr1,
				expr: &labeledExpr{
					pos:   position{line: 458, col: 19, offset: 10054},
					label: "ident",
					expr: &ruleRefExpr{
						pos:  position{line: 458, col: 25, offset: 10060},
						name: "Identifier",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MaybeCallExpr",
			pos:  position{line: 465, col: 1, offset: 10168},
			expr: &choiceExpr{
				pos: position{line: 465, col: 18, offset: 10185},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 465, col: 18, offset: 10185},
						name: "CallExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 465, col: 29, offset: 10196},
						name: "IdentifierExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "CallExpr",
			pos:  position{line: 467, col: 1, offset: 10212},
			expr: &actionExpr{
				pos: position{line: 467, col: 13, offset: 10224},
				run: (*parser).callonCallExpr1,
				expr: &seqExpr{
					pos: position{line: 467, col: 13, offset: 10224},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 467, col: 13, offset: 10224},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 467, col: 17, offset: 10228},
								name: "TermExpr",
							},
						},
						&litMatcher{
							pos:        position{line: 467, col: 26, offset: 10237},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 467, col: 30, offset: 10241},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 467, col: 33, offset: 10244},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 467, col: 38, offset: 10249},
								expr: &ruleRefExpr{
									pos:  position{line: 467, col: 38, offset: 10249},
									name: "CallArgumentList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 467, col: 56, offset: 10267},
							name: "__",
						},
						&zeroOrOneExpr{
							pos: position{line: 467, col: 59, offset: 10270},
							expr: &litMatcher{
								pos:        position{line: 467, col: 59, offset: 10270},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 467, col: 64, offset: 10275},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 467, col: 67, offset: 10278},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "CallArgumentList",
			pos:  position{line: 481, col: 1, offset: 10430},
			expr: &actionExpr{
				pos: position{line: 481, col: 21, offset: 10450},
				run: (*parser).callonCallArgumentList1,
				expr: &seqExpr{
					pos: position{line: 481, col: 21, offset: 10450},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 481, col: 21, offset: 10450},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 481, col: 23, offset: 10452},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 27, offset: 10456},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 481, col: 32, offset: 10461},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 481, col: 34, offset: 10463},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 481, col: 39, offset: 10468},
								expr: &ruleRefExpr{
									pos:  position{line: 481, col: 39, offset: 10468},
									name: "CallArgumentListComma",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CallArgumentListComma",
			pos:  position{line: 485, col: 1, offset: 10564},
			expr: &actionExpr{
				pos: position{line: 485, col: 26, offset: 10589},
				run: (*parser).callonCallArgumentListComma1,
				expr: &seqExpr{
					pos: position{line: 485, col: 26, offset: 10589},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 485, col: 26, offset: 10589},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 485, col: 30, offset: 10593},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 485, col: 33, offset: 10596},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 38, offset: 10601},
								name: "CallArgumentList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DotExpr",
			pos:  position{line: 489, col: 1, offset: 10642},
			expr: &actionExpr{
				pos: position{line: 489, col: 12, offset: 10653},
				run: (*parser).callonDotExpr1,
				expr: &seqExpr{
					pos: position{line: 489, col: 12, offset: 10653},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 489, col: 12, offset: 10653},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 16, offset: 10657},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 489, col: 21, offset: 10662},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 489, col: 25, offset: 10666},
							label: "ident",
							expr: &choiceExpr{
								pos: position{line: 489, col: 32, offset: 10673},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 489, col: 32, offset: 10673},
										name: "Identifier",
									},
									&ruleRefExpr{
										pos:  position{line: 489, col: 45, offset: 10686},
										name: "TupleKey",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "IndexExpr",
			pos:  position{line: 498, col: 1, offset: 10800},
			expr: &actionExpr{
				pos: position{line: 498, col: 14, offset: 10813},
				run: (*parser).callonIndexExpr1,
				expr: &seqExpr{
					pos: position{line: 498, col: 14, offset: 10813},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 498, col: 14, offset: 10813},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 19, offset: 10818},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 498, col: 24, offset: 10823},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 498, col: 26, offset: 10825},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 498, col: 30, offset: 10829},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 498, col: 32, offset: 10831},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 38, offset: 10837},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 498, col: 43, offset: 10842},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 498, col: 45, offset: 10844},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "Expr",
			pos:  position{line: 507, col: 1, offset: 10947},
			expr: &ruleRefExpr{
				pos:  position{line: 507, col: 9, offset: 10955},
				name: "MaybeOrExpr",
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "TermExpr",
			pos:  position{line: 509, col: 1, offset: 10968},
			expr: &choiceExpr{
				pos: position{line: 509, col: 13, offset: 10980},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 509, col: 13, offset: 10980},
						name: "UnaryExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 509, col: 25, offset: 10992},
						name: "IndexExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 509, col: 37, offset: 11004},
						name: "DotExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 509, col: 47, offset: 11014},
						name: "ParenthesizedExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 509, col: 67, offset: 11034},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 509, col: 82, offset: 11049},
						name: "IntLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 509, col: 95, offset: 11062},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 509, col: 111, offset: 11078},
						name: "BoolLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 509, col: 125, offset: 11092},
						name: "MaybeCallExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 509, col: 141, offset: 11108},
						name: "TupleExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 509, col: 153, offset: 11120},
						name: "ArrayExpr",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "MaybeExpExpr",
			pos:  position{line: 511, col: 1, offset: 11131},
			expr: &choiceExpr{
				pos: position{line: 511, col: 17, offset: 11147},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 511, col: 17, offset: 11147},
						name: "ExpExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 511, col: 27, offset: 11157},
						name: "TermExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "ExpExpr",
			pos:  position{line: 513, col: 1, offset: 11167},
			expr: &actionExpr{
				pos: position{line: 513, col: 12, offset: 11178},
				run: (*parser).callonExpExpr1,
				expr: &seqExpr{
					pos: position{line: 513, col: 12, offset: 11178},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 513, col: 12, offset: 11178},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 17, offset: 11183},
								name: "TermExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 513, col: 26, offset: 11192},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 513, col: 28, offset: 11194},
							label: "op",
							expr: &litMatcher{
								pos:        position{line: 513, col: 32, offset: 11198},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 513, col: 38, offset: 11204},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 513, col: 41, offset: 11207},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 47, offset: 11213},
								name: "MaybeExpExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "MaybeMulExpr",
			pos:  position{line: 523, col: 1, offset: 11369},
			expr: &choiceExpr{
				pos: position{line: 523, col: 17, offset: 11385},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 523, col: 17, offset: 11385},
						name: "MulExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 523, col: 27, offset: 11395},
						name: "MaybeExpExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "MulExpr",
			pos:  position{line: 525, col: 1, offset: 11409},
			expr: &actionExpr{
				pos: position{line: 525, col: 12, offset: 11420},
				run: (*parser).callonMulExpr1,
				expr: &seqExpr{
					pos: position{line: 525, col: 12, offset: 11420},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 525, col: 12, offset: 11420},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 17, offset: 11425},
								name: "MaybeExpExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 30, offset: 11438},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 525, col: 32, offset: 11440},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 525, col: 36, offset: 11444},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 525, col: 36, offset: 11444},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
									&litMatcher{
										pos:        position{line: 525, col: 42, offset: 11450},
										val:        "/",
										ignoreCase: false,
										want:       "\"/\"",
									},
									&litMatcher{
										pos:        position{line: 525, col: 48, offset: 11456},
										val:        "%",
										ignoreCase: false,
										want:       "\"%\"",
									},
									&litMatcher{
										pos:        position{line: 525, col: 54, offset: 11462},
										val:        "<<",
										ignoreCase: false,
										want:       "\"<<\"",
									},
									&litMatcher{
										pos:        position{line: 525, col: 61, offset: 11469},
										val:        ">>",
										ignoreCase: false,
										want:       "\">>\"",
									},
									&litMatcher{
										pos:        position{line: 525, col: 68, offset: 11476},
										val:        "&",
										ignoreCase: false,
										want:       "\"&\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 73, offset: 11481},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 525, col: 76, offset: 11484},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 82, offset: 11490},
								name: "MaybeMulExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "MaybeAddExpr",
			pos:  position{line: 535, col: 1, offset: 11646},
			expr: &choiceExpr{
				pos: position{line: 535, col: 17, offset: 11662},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 535, col: 17, offset: 11662},
						name: "AddExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 535, col: 27, offset: 11672},
						name: "MaybeMulExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "AddExpr",
			pos:  position{line: 537, col: 1, offset: 11686},
			expr: &actionExpr{
				pos: position{line: 537, col: 12, offset: 11697},
				run: (*parser).callonAddExpr1,
				expr: &seqExpr{
					pos: position{line: 537, col: 12, offset: 11697},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 537, col: 12, offset: 11697},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 17, offset: 11702},
								name: "MaybeMulExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 537, col: 30, offset: 11715},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 537, col: 32, offset: 11717},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 537, col: 36, offset: 11721},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 537, col: 36, offset: 11721},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 537, col: 42, offset: 11727},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 537, col: 48, offset: 11733},
										val:        "|",
										ignoreCase: false,
										want:       "\"|\"",
									},
									&litMatcher{
										pos:        position{line: 537, col: 54, offset: 11739},
										val:        "^",
										ignoreCase: false,
										want:       "\"^\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 537, col: 59, offset: 11744},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 537, col: 62, offset: 11747},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 68, offset: 11753},
								name: "MaybeAddExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "MaybeCmpExpr",
			pos:  position{line: 547, col: 1, offset: 11909},
			expr: &choiceExpr{
				pos: position{line: 547, col: 17, offset: 11925},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 547, col: 17, offset: 11925},
						name: "CmpExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 547, col: 27, offset: 11935},
						name: "MaybeAddExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "CmpExpr",
			pos:  position{line: 549, col: 1, offset: 11949},
			expr: &actionExpr{
				pos: position{line: 549, col: 12, offset: 11960},
				run: (*parser).callonCmpExpr1,
				expr: &seqExpr{
					pos: position{line: 549, col: 12, offset: 11960},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 549, col: 12, offset: 11960},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 17, offset: 11965},
								name: "MaybeAddExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 549, col: 30, offset: 11978},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 549, col: 32, offset: 11980},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 549, col: 36, offset: 11984},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 549, col: 36, offset: 11984},
										val:        "==",
										ignoreCase: false,
										want:       "\"==\"",
									},
									&litMatcher{
										pos:        position{line: 549, col: 43, offset: 11991},
										val:        "!=",
										ignoreCase: false,
										want:       "\"!=\"",
									},
									&litMatcher{
										pos:        position{line: 549, col: 50, offset: 11998},
										val:        ">=",
										ignoreCase: false,
										want:       "\">=\"",
									},
									&litMatcher{
										pos:        position{line: 549, col: 57, offset: 12005},
										val:        "<=",
										ignoreCase: false,
										want:       "\"<=\"",
									},
									&litMatcher{
										pos:        position{line: 549, col: 64, offset: 12012},
										val:        ">",
										ignoreCase: false,
										want:       "\">\"",
									},
									&litMatcher{
										pos:        position{line: 549, col: 70, offset: 12018},
										val:        "<",
										ignoreCase: false,
										want:       "\"<\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 549, col: 75, offset: 12023},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 549, col: 78, offset: 12026},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 84, offset: 12032},
								name: "MaybeCmpExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "MaybeAndExpr",
			pos:  position{line: 559, col: 1, offset: 12188},
			expr: &choiceExpr{
				pos: position{line: 559, col: 17, offset: 12204},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 559, col: 17, offset: 12204},
						name: "AndExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 559, col: 27, offset: 12214},
						name: "MaybeCmpExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "AndExpr",
			pos:  position{line: 561, col: 1, offset: 12228},
			expr: &actionExpr{
				pos: position{line: 561, col: 12, offset: 12239},
				run: (*parser).callonAndExpr1,
				expr: &seqExpr{
					pos: position{line: 561, col: 12, offset: 12239},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 561, col: 12, offset: 12239},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 17, offset: 12244},
								name: "MaybeCmpExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 561, col: 30, offset: 12257},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 561, col: 32, offset: 12259},
							label: "op",
							expr: &litMatcher{
								pos:        position{line: 561, col: 36, offset: 12263},
								val:        "&&",
								ignoreCase: false,
								want:       "\"&&\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 561, col: 42, offset: 12269},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 561, col: 45, offset: 12272},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 51, offset: 12278},
								name: "MaybeCmpExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "MaybeOrExpr",
			pos:  position{line: 571, col: 1, offset: 12434},
			expr: &choiceExpr{
				pos: position{line: 571, col: 16, offset: 12449},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 571, col: 16, offset: 12449},
						name: "OrExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 571, col: 25, offset: 12458},
						name: "MaybeAndExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "OrExpr",
			pos:  position{line: 573, col: 1, offset: 12472},
			expr: &actionExpr{
				pos: position{line: 573, col: 11, offset: 12482},
				run: (*parser).callonOrExpr1,
				expr: &seqExpr{
					pos: position{line: 573, col: 11, offset: 12482},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 573, col: 11, offset: 12482},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 16, offset: 12487},
								name: "MaybeAndExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 573, col: 29, offset: 12500},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 31, offset: 12502},
							label: "op",
							expr: &litMatcher{
								pos:        position{line: 573, col: 35, offset: 12506},
								val:        "||",
								ignoreCase: false,
								want:       "\"||\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 573, col: 41, offset: 12512},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 44, offset: 12515},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 50, offset: 12521},
								name: "MaybeAndExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "UnaryExpr",
			pos:  position{line: 583, col: 1, offset: 12677},
			expr: &actionExpr{
				pos: position{line: 583, col: 14, offset: 12690},
				run: (*parser).callonUnaryExpr1,
				expr: &seqExpr{
					pos: position{line: 583, col: 14, offset: 12690},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 583, col: 14, offset: 12690},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 583, col: 18, offset: 12694},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 583, col: 18, offset: 12694},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 583, col: 24, offset: 12700},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 583, col: 30, offset: 12706},
										val:        "!",
										ignoreCase: false,
										want:       "\"!\"",
									},
									&litMatcher{
										pos:        position{line: 583, col: 36, offset: 12712},
										val:        "^",
										ignoreCase: false,
										want:       "\"^\"",
									},
									&litMatcher{
										pos:        position{line: 583, col: 42, offset: 12718},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
									&litMatcher{
										pos:        position{line: 583, col: 48, offset: 12724},
										val:        "&",
										ignoreCase: false,
										want:       "\"&\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 583, col: 53, offset: 12729},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 57, offset: 12733},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleExpr",
			pos:  position{line: 592, col: 1, offset: 12854},
			expr: &actionExpr{
				pos: position{line: 592, col: 14, offset: 12867},
				run: (*parser).callonTupleExpr1,
				expr: &seqExpr{
					pos: position{line: 592, col: 14, offset: 12867},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 592, col: 14, offset: 12867},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 18, offset: 12871},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 592, col: 21, offset: 12874},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 592, col: 26, offset: 12879},
								expr: &ruleRefExpr{
									pos:  position{line: 592, col: 26, offset: 12879},
									name: "TupleArgumentList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 45, offset: 12898},
							name: "__",
						},
						&zeroOrOneExpr{
							pos: position{line: 592, col: 48, offset: 12901},
							expr: &litMatcher{
								pos:        position{line: 592, col: 48, offset: 12901},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 53, offset: 12906},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 592, col: 56, offset: 12909},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleArgumentList",
			pos:  position{line: 602, col: 1, offset: 13021},
			expr: &actionExpr{
				pos: position{line: 602, col: 22, offset: 13042},
				run: (*parser).callonTupleArgumentList1,
				expr: &seqExpr{
					pos: position{line: 602, col: 22, offset: 13042},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 602, col: 22, offset: 13042},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 602, col: 24, offset: 13044},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 602, col: 28, offset: 13048},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 602, col: 33, offset: 13053},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 602, col: 35, offset: 13055},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 602, col: 40, offset: 13060},
								expr: &ruleRefExpr{
									pos:  position{line: 602, col: 40, offset: 13060},
									name: "TupleArgumentListComma",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleArgumentListComma",
			pos:  position{line: 606, col: 1, offset: 13157},
			expr: &actionExpr{
				pos: position{line: 606, col: 27, offset: 13183},
				run: (*parser).callonTupleArgumentListComma1,
				expr: &seqExpr{
					pos: position{line: 606, col: 27, offset: 13183},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 606, col: 27, offset: 13183},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 606, col: 31, offset: 13187},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 606, col: 34, offset: 13190},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 39, offset: 13195},
								name: "TupleArgumentList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArrayExpr",
			pos:  position{line: 610, col: 1, offset: 13237},
			expr: &actionExpr{
				pos: position{line: 610, col: 14, offset: 13250},
				run: (*parser).callonArrayExpr1,
				expr: &seqExpr{
					pos: position{line: 610, col: 14, offset: 13250},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 610, col: 14, offset: 13250},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 610, col: 18, offset: 13254},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 610, col: 21, offset: 13257},
							label: "length",
							expr: &choiceExpr{
								pos: position{line: 610, col: 29, offset: 13265},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 610, col: 29, offset: 13265},
										name: "IntLiteral",
									},
									&litMatcher{
										pos:        position{line: 610, col: 42, offset: 13278},
										val:        "...",
										ignoreCase: false,
										want:       "\"...\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 610, col: 49, offset: 13285},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 610, col: 52, offset: 13288},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&labeledExpr{
							pos:   position{line: 610, col: 56, offset: 13292},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 610, col: 60, offset: 13296},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 610, col: 65, offset: 13301},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 610, col: 69, offset: 13305},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 610, col: 72, offset: 13308},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 610, col: 77, offset: 13313},
								expr: &ruleRefExpr{
									pos:  position{line: 610, col: 77, offset: 13313},
									name: "ArrayArgumentList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 610, col: 96, offset: 13332},
							name: "__",
						},
						&zeroOrOneExpr{
							pos: position{line: 610, col: 99, offset: 13335},
							expr: &litMatcher{
								pos:        position{line: 610, col: 99, offset: 13335},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 610, col: 104, offset: 13340},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 610, col: 107, offset: 13343},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArrayArgumentList",
			pos:  position{line: 630, col: 1, offset: 13643},
			expr: &actionExpr{
				pos: position{line: 630, col: 22, offset: 13664},
				run: (*parser).callonArrayArgumentList1,
				expr: &seqExpr{
					pos: position{line: 630, col: 22, offset: 13664},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 630, col: 22, offset: 13664},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 630, col: 24, offset: 13666},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 28, offset: 13670},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 33, offset: 13675},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 630, col: 35, offset: 13677},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 630, col: 40, offset: 13682},
								expr: &ruleRefExpr{
									pos:  position{line: 630, col: 40, offset: 13682},
									name: "ArrayArgumentListComma",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArrayArgumentListComma",
			pos:  position{line: 634, col: 1, offset: 13779},
			expr: &actionExpr{
				pos: position{line: 634, col: 27, offset: 13805},
				run: (*parser).callonArrayArgumentListComma1,
				expr: &seqExpr{
					pos: position{line: 634, col: 27, offset: 13805},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 634, col: 27, offset: 13805},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 634, col: 31, offset: 13809},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 634, col: 34, offset: 13812},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 39, offset: 13817},
								name: "ArrayArgumentList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapedChar",
			pos:  position{line: 638, col: 1, offset: 13859},
			expr: &charClassMatcher{
				pos:        position{line: 638, col: 16, offset: 13874},
				val:        "[\\x00-\\x1f\"\\\\]",
				chars:      []rune{'"', '\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 640, col: 1, offset: 13890},
			expr: &choiceExpr{
				pos: position{line: 640, col: 19, offset: 13908},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 640, col: 19, offset: 13908},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 640, col: 38, offset: 13927},
						name: "UnicodeEscape",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 642, col: 1, offset: 13942},
			expr: &charClassMatcher{
				pos:        position{line: 642, col: 21, offset: 13962},
				val:        "[\"\\\\/bfnrt]",
				chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name:        "__",
			displayName: "\"whitespace\"",
			pos:         position{line: 644, col: 1, offset: 13975},
			expr: &zeroOrMoreExpr{
				pos: position{line: 644, col: 20, offset: 13994},
				expr: &charClassMatcher{
					pos:        position{line: 644, col: 20, offset: 13994},
					val:        "[ \\n\\t\\r]",
					chars:      []rune{' ', '\n', '\t', '\r'},
					ignoreCase: false,
					inverted:   false,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name:        "_",
			displayName: "\"spaces\"",
			pos:         position{line: 645, col: 1, offset: 14005},
			expr: &zeroOrMoreExpr{
				pos: position{line: 645, col: 15, offset: 14019},
				expr: &charClassMatcher{
					pos:        position{line: 645, col: 15, offset: 14019},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "comment",
			pos:  position{line: 647, col: 1, offset: 14027},
			expr: &actionExpr{
				pos: position{line: 647, col: 12, offset: 14038},
				run: (*parser).calloncomment1,
				expr: &seqExpr{
					pos: position{line: 647, col: 12, offset: 14038},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 647, col: 12, offset: 14038},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 647, col: 17, offset: 14043},
							expr: &charClassMatcher{
								pos:        position{line: 647, col: 17, offset: 14043},
								val:        "[^\\n]",
								chars:      []rune{'\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 647, col: 24, offset: 14050},
							val:        "\n",
							ignoreCase: false,
							want:       "\"\\n\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "nl",
			pos:  position{line: 651, col: 1, offset: 14078},
			expr: &seqExpr{
				pos: position{line: 651, col: 7, offset: 14084},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 651, col: 7, offset: 14084},
						name: "_",
					},
					&choiceExpr{
						pos: position{line: 651, col: 10, offset: 14087},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 651, col: 10, offset: 14087},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
							&litMatcher{
								pos:        position{line: 651, col: 16, offset: 14093},
								val:        "\n",
								ignoreCase: false,
								want:       "\"\\n\"",
							},
							&litMatcher{
								pos:        position{line: 651, col: 23, offset: 14100},
								val:        "\r\n",
								ignoreCase: false,
								want:       "\"\\r\\n\"",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 651, col: 31, offset: 14108},
						name: "__",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EOF",
			pos:  position{line: 653, col: 1, offset: 14112},
			expr: &notExpr{
				pos: position{line: 653, col: 8, offset: 14119},
				expr: &anyMatcher{
					line: 653, col: 9, offset: 14120,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
	},
}

func (c *current) onFile1(pkg, decls any) (any, error) {
	return File{
		Package: pkg.(Package),

		Declarations: anyToSlice[Declaration](decls),
	}, nil
}

func (p *parser) callonFile1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["pkg"], stack["decls"])
}

func (c *current) onPackage1(name any) (any, error) {
	return Package{
		Name: name.(Identifier),
	}, nil
}

func (p *parser) callonPackage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPackage1(stack["name"])
}

func (c *current) onDeclaration1(decl any) (any, error) {
	return decl, nil
}

func (p *parser) callonDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeclaration1(stack["decl"])
}

func (c *current) onDirective1(name, args, decl any) (any, error) {
	return Directive{
		Name:        name.(Identifier),
		Args:        maybeSlice[any](args),
		Declaration: decl.(Declaration),

		Position: pos(c),
	}, nil
}

func (p *parser) callonDirective1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirective1(stack["name"], stack["args"], stack["decl"])
}

func (c *current) onDirectiveArguments1(arg, rest any) (any, error) {
	return append(append([]any{}, arg), maybeSlice[any](rest)...), nil
}

func (p *parser) callonDirectiveArguments1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveArguments1(stack["arg"], stack["rest"])
}

func (c *current) onDirectiveArgumentsRest1(args any) (any, error) {
	return args, nil
}

func (p *parser) callonDirectiveArgumentsRest1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveArgumentsRest1(stack["args"])
}

func (c *current) onTypeDeclaration1(name, typ any) (any, error) {
	return TypeDeclaration{
		Name: name.(Identifier),
		Type: typ.(Type),
	}, nil
}

func (p *parser) callonTypeDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeDeclaration1(stack["name"], stack["typ"])
}

func (c *current) onConstDeclaration1(name, typ, exp any) (any, error) {
	if typ == nil && exp == nil {
		return nil, fmt.Errorf("var statement must have a type or an expression")
	}

	return ConstDeclaration{
		Name: name.(Identifier),
		Expr: maybePtr[Expr](exp),
		Type: maybePtr[Type](typ),

		Position: pos(c),
	}, nil
}

func (p *parser) callonConstDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDeclaration1(stack["name"], stack["typ"], stack["exp"])
}

func (c *current) onPointerType1(pointee any) (any, error) {
	return PointerType{
		Pointee: pointee.(Type),

		Position: pos(c),
	}, nil
}

func (p *parser) callonPointerType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPointerType1(stack["pointee"])
}

func (c *current) onSliceType1(element any) (any, error) {
	return SliceType{
		Element: element.(Type),

		Position: pos(c),
	}, nil
}

func (p *parser) callonSliceType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSliceType1(stack["element"])
}

func (c *current) onArrayType1(length, element any) (any, error) {
	return ArrayType{
		Length:  length.(IntLiteral),
		Element: element.(Type),

		Position: pos(c),
	}, nil
}

func (p *parser) callonArrayType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayType1(stack["length"], stack["element"])
}

func (c *current) onTupleType1(elems any) (any, error) {
	return TupleType{
		Elements: maybeSlice[Type](elems),

		Position: pos(c),
	}, nil
}

func (p *parser) callonTupleType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleType1(stack["elems"])
}

func (c *current) onTupleTypeList1(elem, rest any) (any, error) {
	return append([]Type{elem.(Type)}, maybeSlice[Type](rest)...), nil
}

func (p *parser) callonTupleTypeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleTypeList1(stack["elem"], stack["rest"])
}

func (c *current) onTupleTypeListComma1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonTupleTypeListComma1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleTypeListComma1(stack["rest"])
}

func (c *current) onStructType1(elems any) (any, error) {
	return StructType{
		Fields: maybeSlice[StructField](elems),

		Position: pos(c),
	}, nil
}

func (p *parser) callonStructType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStructType1(stack["elems"])
}

func (c *current) onStructField1(name, typ any) (any, error) {
	return StructField{
		Name: name.(Identifier),
		Type: typ.(Type),
	}, nil
}

func (p *parser) callonStructField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStructField1(stack["name"], stack["typ"])
}

func (c *current) onStructFieldList1(field, rest any) (any, error) {
	return append([]StructField{field.(StructField)}, maybeSlice[StructField](rest)...), nil
}

func (p *parser) callonStructFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStructFieldList1(stack["field"], stack["rest"])
}

func (c *current) onStructFieldListComma1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonStructFieldListComma1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStructFieldListComma1(stack["rest"])
}

func (c *current) onTupleKey1() (any, error) {
	return Identifier(c.text), nil
}

func (p *parser) callonTupleKey1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleKey1()
}

func (c *current) onMapType1(key, value any) (any, error) {
	return MapType{Key: key.(Type), Value: value.(Type)}, nil
}

func (p *parser) callonMapType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMapType1(stack["key"], stack["value"])
}

func (c *current) onStatement1(stmt any) (any, error) {
	return stmt, nil
}

func (p *parser) callonStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatement1(stack["stmt"])
}

func (c *current) onSimpleStatement1(stmt any) (any, error) {
	return stmt, nil
}

func (p *parser) callonSimpleStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleStatement1(stack["stmt"])
}

func (c *current) onVarStatement1(name, typ, exp any) (any, error) {
	if typ == nil && exp == nil {
		return nil, fmt.Errorf("var statement must have a type or an expression")
	}

	return &VarStatement{
		Name: name.(Identifier),
		Expr: maybePtr[Expr](exp),
		Type: maybePtr[Type](typ),

		Position: pos(c),
	}, nil
}

func (p *parser) callonVarStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVarStatement1(stack["name"], stack["typ"], stack["exp"])
}

func (c *current) onVarStatementExpr1(exp any) (any, error) {
	return exp.(Expr), nil
}

func (p *parser) callonVarStatementExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVarStatementExpr1(stack["exp"])
}

func (c *current) onVarDeclaration1(name, typ, exp any) (any, error) {
	if typ == nil && exp == nil {
		return nil, fmt.Errorf("var statement must have a type or an expression")
	}

	return VarDeclaration{
		Name: name.(Identifier),
		Expr: maybePtr[Expr](exp),
		Type: maybePtr[Type](typ),

		Position: pos(c),
	}, nil
}

func (p *parser) callonVarDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVarDeclaration1(stack["name"], stack["typ"], stack["exp"])
}

func (c *current) onVarDeclarationExpr1(exp any) (any, error) {
	return exp.(Expr), nil
}

func (p *parser) callonVarDeclarationExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVarDeclarationExpr1(stack["exp"])
}

func (c *current) onDeclarationStatement1(ident, exp any) (any, error) {
	return DeclarationStatement{
		Name: ident.(Identifier),
		Expr: exp.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonDeclarationStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeclarationStatement1(stack["ident"], stack["exp"])
}

func (c *current) onAssignmentStatement1(left, right any) (any, error) {
	return AssignmentStatement{
		Left:  left.(Expr),
		Right: right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonAssignmentStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignmentStatement1(stack["left"], stack["right"])
}

func (c *current) onAssignmentOperatorStatement1(left, op, right any) (any, error) {
	return AssignmentOperatorStatement{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonAssignmentOperatorStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignmentOperatorStatement1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onExprStatement1(exp any) (any, error) {
	return ExprStatement{
		Expr: exp.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonExprStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprStatement1(stack["exp"])
}

func (c *current) onPostfixStatement1(exp, op any) (any, error) {
	return PostfixStatement{
		Expr:     exp.(Expr),
		Operator: Operator(op.([]byte)),

		Position: pos(c),
	}, nil
}

func (p *parser) callonPostfixStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostfixStatement1(stack["exp"], stack["op"])
}

func (c *current) onIfStatement1(exp, body, rest any) (any, error) {
	return IfStatement{
		Condition: exp.(Expr),
		Body:      maybeSlice[Statement](body),
		Else:      maybe[ElseIfElseStatement](rest),

		Position: pos(c),
	}, nil
}

func (p *parser) callonIfStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfStatement1(stack["exp"], stack["body"], stack["rest"])
}

func (c *current) onElseIfStatement1(exp, body, rest any) (any, error) {
	return ElseIfStatement{
		Condition: exp.(Expr),
		Body:      maybeSlice[Statement](body),
		Else:      maybe[ElseIfElseStatement](rest),

		Position: pos(c),
	}, nil
}

func (p *parser) callonElseIfStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfStatement1(stack["exp"], stack["body"], stack["rest"])
}

func (c *current) onElseStatement1(body any) (any, error) {
	return ElseStatement{
		Body: maybeSlice[Statement](body),

		Position: pos(c),
	}, nil
}

func (p *parser) callonElseStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseStatement1(stack["body"])
}

func (c *current) onForStatement1(header, body any) (any, error) {
	if header == nil {
		return ForStatement{
			Body: maybeSlice[Statement](body),

			Position: pos(c),
		}, nil
	}

	f := header.(ForStatement)
	f.Body = maybeSlice[Statement](body)
	f.Position = pos(c)
	return f, nil
}

func (p *parser) callonForStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForStatement1(stack["header"], stack["body"])
}

func (c *current) onForStatementStatements1(init, cond, step any) (any, error) {
	return ForStatement{
		Init:      maybe[Statement](init),
		Condition: maybe[Expr](cond),
		Step:      maybe[Statement](step),
	}, nil
}

func (p *parser) callonForStatementStatements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForStatementStatements1(stack["init"], stack["cond"], stack["step"])
}

func (c *current) onReturnStatement1(expr any) (any, error) {
	return ReturnStatement{
		Expr: maybe[Expr](expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonReturnStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturnStatement1(stack["expr"])
}

func (c *current) onExternFuncDeclaration1(name, params, ret any) (any, error) {
	return ExternFunctionDeclaration{
		Name:       name.(Identifier),
		Parameters: maybeSlice[Parameter](params),
		Return:     maybe[Type](ret),
	}, nil
}

func (p *parser) callonExternFuncDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternFuncDeclaration1(stack["name"], stack["params"], stack["ret"])
}

func (c *current) onFunctionDeclaration1(name, params, ret, body any) (any, error) {
	return FunctionDeclaration{
		Name:       name.(Identifier),
		Parameters: maybeSlice[Parameter](params),
		Return:     maybe[Type](ret),
		Body:       maybeSlice[Statement](body),

		Position: pos(c),
	}, nil
}

func (p *parser) callonFunctionDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionDeclaration1(stack["name"], stack["params"], stack["ret"], stack["body"])
}

func (c *current) onMethodDeclaration1(receiver, name, params, ret, body any) (any, error) {
	return MethodDeclaration{
		Name:       name.(Identifier),
		Receiver:   receiver.(Parameter),
		Parameters: maybeSlice[Parameter](params),
		Return:     maybe[Type](ret),
		Body:       maybeSlice[Statement](body),

		Position: pos(c),
	}, nil
}

func (p *parser) callonMethodDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethodDeclaration1(stack["receiver"], stack["name"], stack["params"], stack["ret"], stack["body"])
}

func (c *current) onStatementList1(stmt, rest any) (any, error) {
	if stmt == nil {
		return rest, nil
	}
	return append(
		[]Statement{stmt.(Statement)},
		maybeSlice[Statement](rest)...,
	), nil
}

func (p *parser) callonStatementList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatementList1(stack["stmt"], stack["rest"])
}

func (c *current) onParameterUnnamed1(typ any) (any, error) {
	return Parameter{
		Type: typ.(Type),
	}, nil
}

func (p *parser) callonParameterUnnamed1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterUnnamed1(stack["typ"])
}

func (c *current) onParameterNamed1(name, typ any) (any, error) {
	return Parameter{
		Name: maybePtr[Identifier](name),
		Type: typ.(Type),
	}, nil
}

func (p *parser) callonParameterNamed1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterNamed1(stack["name"], stack["typ"])
}

func (c *current) onParameterList1(param, rest any) (any, error) {
	return append([]Parameter{param.(Parameter)}, maybeSlice[Parameter](rest)...), nil
}

func (p *parser) callonParameterList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterList1(stack["param"], stack["rest"])
}

func (c *current) onParameterListComma1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonParameterListComma1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterListComma1(stack["rest"])
}

func (c *current) onIdentifier1() (any, error) {
	return Identifier(c.text), nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onParenthesizedExpr1(expr any) (any, error) {
	return ParenthesizedExpr{
		Expr: expr.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonParenthesizedExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenthesizedExpr1(stack["expr"])
}

func (c *current) onIntLiteral1() (any, error) {
	i, err := strconv.ParseInt(string(c.text), 0, 64)
	if err != nil {
		return 0, err
	}

	return IntLiteral{
		Value: i,

		Position: pos(c),
	}, nil
}

func (p *parser) callonIntLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntLiteral1()
}

func (c *current) onFloatLiteral1() (any, error) {
	f, err := strconv.ParseFloat(string(c.text), 64)
	if err != nil {
		return 0, err
	}

	return FloatLiteral{
		Value: f,

		Position: pos(c),
	}, nil
}

func (p *parser) callonFloatLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1()
}

func (c *current) onStringLiteral1() (any, error) {
	c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
	str, err := strconv.Unquote(string(c.text))
	if err != nil {
		return nil, err
	}

	return StringLiteral{
		Value: str,

		Position: pos(c),
	}, nil
}

func (p *parser) callonStringLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1()
}

func (c *current) onBoolLiteral1() (any, error) {
	return BoolLiteral{
		Value: string(c.text) == "true",

		Position: pos(c),
	}, nil
}

func (p *parser) callonBoolLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolLiteral1()
}

func (c *current) onIdentifierExpr1(ident any) (any, error) {
	return IdentifierExpr{
		Identifier: ident.(Identifier),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonIdentifierExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierExpr1(stack["ident"])
}

func (c *current) onCallExpr1(exp, args any) (any, error) {
	call := CallExpr{
		Expr: exp.(Expr),

		Position: pos(c),
	}

	if args != nil {
		call.Args = args.([]Expr)
	}

	return call, nil
}

func (p *parser) callonCallExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallExpr1(stack["exp"], stack["args"])
}

func (c *current) onCallArgumentList1(exp, rest any) (any, error) {
	return append([]Expr{exp.(Expr)}, maybeSlice[Expr](rest)...), nil
}

func (p *parser) callonCallArgumentList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallArgumentList1(stack["exp"], stack["rest"])
}

func (c *current) onCallArgumentListComma1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonCallArgumentListComma1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallArgumentListComma1(stack["rest"])
}

func (c *current) onDotExpr1(exp, ident any) (any, error) {
	return DotExpr{
		Expr: exp.(Expr),
		Key:  ident.(Identifier),

		Position: pos(c),
	}, nil
}

func (p *parser) callonDotExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotExpr1(stack["exp"], stack["ident"])
}

func (c *current) onIndexExpr1(expr, index any) (any, error) {
	return IndexExpr{
		Expr:  expr.(Expr),
		Index: index.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonIndexExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpr1(stack["expr"], stack["index"])
}

func (c *current) onExpExpr1(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonExpExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onMulExpr1(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonMulExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMulExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onAddExpr1(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonAddExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onCmpExpr1(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonCmpExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCmpExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onAndExpr1(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonAndExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onOrExpr1(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonOrExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onUnaryExpr1(op, exp any) (any, error) {
	return UnaryExpr{
		Operator: Operator(op.([]byte)),
		Expr:     exp.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonUnaryExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnaryExpr1(stack["op"], stack["exp"])
}

func (c *current) onTupleExpr1(args any) (any, error) {
	tuple := TupleExpr{
		Elems: maybeSlice[Expr](args),

		Position: pos(c),
	}

	return tuple, nil
}

func (p *parser) callonTupleExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleExpr1(stack["args"])
}

func (c *current) onTupleArgumentList1(exp, rest any) (any, error) {
	return append([]Expr{exp.(Expr)}, maybeSlice[Expr](rest)...), nil
}

func (p *parser) callonTupleArgumentList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleArgumentList1(stack["exp"], stack["rest"])
}

func (c *current) onTupleArgumentListComma1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonTupleArgumentListComma1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleArgumentListComma1(stack["rest"])
}

func (c *current) onArrayExpr1(length, typ, args any) (any, error) {
	argsSlice := maybeSlice[Expr](args)

	lengthLiteral, ok := length.(IntLiteral)
	if !ok {
		lengthLiteral = IntLiteral{
			Value: int64(len(argsSlice)),
		}
	}
	arr := ArrayExpr{
		Length: lengthLiteral,
		Type:   typ.(Type),
		Elems:  argsSlice,

		Position: pos(c),
	}

	return arr, nil
}

func (p *parser) callonArrayExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayExpr1(stack["length"], stack["typ"], stack["args"])
}

func (c *current) onArrayArgumentList1(exp, rest any) (any, error) {
	return append([]Expr{exp.(Expr)}, maybeSlice[Expr](rest)...), nil
}

func (p *parser) callonArrayArgumentList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayArgumentList1(stack["exp"], stack["rest"])
}

func (c *current) onArrayArgumentListComma1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonArrayArgumentListComma1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayArgumentListComma1(stack["rest"])
}

func (c *current) oncomment1() (any, error) {
	return nil, nil
}

func (p *parser) calloncomment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomment1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any

	leader        bool
	leftRecursive bool
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type ruleWithExpsStack struct {
	rule   *rule
	estack []any
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleRecursiveLeader(rule *rule) (any, bool) {
	result, ok := p.getMemoized(rule)
	if ok {
		p.restore(result.end)
		return result.v, result.b
	}

	if p.debug {
		defer p.out(p.in("recursive " + rule.name))
	}

	var (
		depth      = 0
		startMark  = p.pt
		lastResult = resultTuple{nil, false, startMark}
		lastErrors = *p.errs
	)

	for {
		lastState := p.cloneState()
		p.setMemoized(startMark, rule, lastResult)
		val, ok := p.parseRule(rule)
		endMark := p.pt
		if p.debug {
			p.printIndent("RECURSIVE", fmt.Sprintf(
				"Rule %s depth %d: %t -> %s",
				rule.name, depth, ok, string(p.sliceFrom(startMark))))
		}
		if (!ok) || (endMark.offset <= lastResult.end.offset && depth != 0) {
			p.restoreState(lastState)
			*p.errs = lastErrors
			break
		}
		lastResult = resultTuple{val, ok, endMark}
		lastErrors = *p.errs
		p.restore(startMark)
		depth++
	}

	p.restore(lastResult.end)
	p.setMemoized(startMark, rule, lastResult)
	return lastResult.v, lastResult.b
}

func (p *parser) parseRuleRecursiveNoLeader(rule *rule) (any, bool) {
	return p.parseRule(rule)
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize || rule.leftRecursive {
		if rule.leader {
			val, ok = p.parseRuleRecursiveLeader(rule)
		} else if p.memoize && !rule.leftRecursive {
			val, ok = p.parseRuleMemoize(rule)
		} else {
			val, ok = p.parseRuleRecursiveNoLeader(rule)
		}
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	isLeftRecusion := p.rstack[len(p.rstack)-1].leftRecursive
	if p.memoize && !isLeftRecusion {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize && !isLeftRecusion {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
