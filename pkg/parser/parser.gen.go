// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"log"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

func anyToSlice[T any](s any) []T {
	var ret []T
	for _, e := range s.([]any) {
		if e == nil {
			continue
		}
		ret = append(ret, e.(T))
	}

	return ret
}

func toPtr[T any](v T) *T {
	return &v
}

func maybe[T any](v any) T {
	if v == nil {
		var t T
		return t
	}

	return v.(T)
}

func maybePtr[T any](v any) *T {
	if v == nil {
		return nil
	}

	return toPtr(v.(T))
}

func maybeSlice[T any](v any) []T {
	if v == nil {
		return nil
	}

	return v.([]T)
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Program",
			pos:  position{line: 48, col: 1, offset: 595},
			expr: &actionExpr{
				pos: position{line: 48, col: 12, offset: 606},
				run: (*parser).callonProgram1,
				expr: &seqExpr{
					pos: position{line: 48, col: 12, offset: 606},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 48, col: 12, offset: 606},
							label: "pkg",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 16, offset: 610},
								name: "Package",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 24, offset: 618},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 48, col: 26, offset: 620},
							label: "decls",
							expr: &zeroOrMoreExpr{
								pos: position{line: 48, col: 32, offset: 626},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 33, offset: 627},
									name: "Declaration",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 47, offset: 641},
							name: "EOF",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Keyword",
			pos:  position{line: 56, col: 1, offset: 757},
			expr: &choiceExpr{
				pos: position{line: 56, col: 12, offset: 768},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 56, col: 12, offset: 768},
						val:        "map",
						ignoreCase: false,
						want:       "\"map\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 20, offset: 776},
						val:        "func",
						ignoreCase: false,
						want:       "\"func\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 29, offset: 785},
						val:        "if",
						ignoreCase: false,
						want:       "\"if\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 36, offset: 792},
						val:        "else",
						ignoreCase: false,
						want:       "\"else\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 45, offset: 801},
						val:        "for",
						ignoreCase: false,
						want:       "\"for\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 53, offset: 809},
						val:        "package",
						ignoreCase: false,
						want:       "\"package\"",
					},
					&litMatcher{
						pos:        position{line: 56, col: 65, offset: 821},
						val:        "var",
						ignoreCase: false,
						want:       "\"var\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Package",
			pos:  position{line: 58, col: 1, offset: 828},
			expr: &actionExpr{
				pos: position{line: 58, col: 12, offset: 839},
				run: (*parser).callonPackage1,
				expr: &seqExpr{
					pos: position{line: 58, col: 12, offset: 839},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 58, col: 12, offset: 839},
							val:        "package",
							ignoreCase: false,
							want:       "\"package\"",
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 22, offset: 849},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 58, col: 24, offset: 851},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 29, offset: 856},
								name: "Identifier",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Declaration",
			pos:  position{line: 64, col: 1, offset: 928},
			expr: &choiceExpr{
				pos: position{line: 64, col: 16, offset: 943},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 64, col: 16, offset: 943},
						name: "FunctionDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 64, col: 38, offset: 965},
						name: "TypeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 64, col: 56, offset: 983},
						name: "VarDeclaration",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeDeclaration",
			pos:  position{line: 66, col: 1, offset: 999},
			expr: &actionExpr{
				pos: position{line: 66, col: 20, offset: 1018},
				run: (*parser).callonTypeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 66, col: 20, offset: 1018},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 66, col: 20, offset: 1018},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 66, col: 22, offset: 1020},
							val:        "type",
							ignoreCase: false,
							want:       "\"type\"",
						},
						&ruleRefExpr{
							pos:  position{line: 66, col: 29, offset: 1027},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 66, col: 31, offset: 1029},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 66, col: 36, offset: 1034},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 66, col: 47, offset: 1045},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 66, col: 49, offset: 1047},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 66, col: 53, offset: 1051},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 66, col: 58, offset: 1056},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Type",
			pos:  position{line: 73, col: 1, offset: 1149},
			expr: &choiceExpr{
				pos: position{line: 73, col: 9, offset: 1157},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 73, col: 9, offset: 1157},
						name: "Identifier",
					},
					&ruleRefExpr{
						pos:  position{line: 73, col: 22, offset: 1170},
						name: "PointerType",
					},
					&ruleRefExpr{
						pos:  position{line: 73, col: 36, offset: 1184},
						name: "MapType",
					},
					&ruleRefExpr{
						pos:  position{line: 73, col: 46, offset: 1194},
						name: "SliceType",
					},
					&ruleRefExpr{
						pos:  position{line: 73, col: 58, offset: 1206},
						name: "TupleType",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PointerType",
			pos:  position{line: 75, col: 1, offset: 1217},
			expr: &actionExpr{
				pos: position{line: 75, col: 16, offset: 1232},
				run: (*parser).callonPointerType1,
				expr: &seqExpr{
					pos: position{line: 75, col: 16, offset: 1232},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 75, col: 16, offset: 1232},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&labeledExpr{
							pos:   position{line: 75, col: 20, offset: 1236},
							label: "pointee",
							expr: &ruleRefExpr{
								pos:  position{line: 75, col: 28, offset: 1244},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SliceType",
			pos:  position{line: 79, col: 1, offset: 1305},
			expr: &actionExpr{
				pos: position{line: 79, col: 14, offset: 1318},
				run: (*parser).callonSliceType1,
				expr: &seqExpr{
					pos: position{line: 79, col: 14, offset: 1318},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 79, col: 14, offset: 1318},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 79, col: 18, offset: 1322},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 79, col: 20, offset: 1324},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&labeledExpr{
							pos:   position{line: 79, col: 24, offset: 1328},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 32, offset: 1336},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleType",
			pos:  position{line: 83, col: 1, offset: 1395},
			expr: &actionExpr{
				pos: position{line: 83, col: 14, offset: 1408},
				run: (*parser).callonTupleType1,
				expr: &seqExpr{
					pos: position{line: 83, col: 14, offset: 1408},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 83, col: 14, offset: 1408},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 83, col: 18, offset: 1412},
							label: "elems",
							expr: &zeroOrOneExpr{
								pos: position{line: 83, col: 24, offset: 1418},
								expr: &ruleRefExpr{
									pos:  position{line: 83, col: 24, offset: 1418},
									name: "TupleTypeList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 83, col: 39, offset: 1433},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleTypeList",
			pos:  position{line: 87, col: 1, offset: 1501},
			expr: &actionExpr{
				pos: position{line: 87, col: 18, offset: 1518},
				run: (*parser).callonTupleTypeList1,
				expr: &seqExpr{
					pos: position{line: 87, col: 18, offset: 1518},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 87, col: 18, offset: 1518},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 87, col: 20, offset: 1520},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 87, col: 25, offset: 1525},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 30, offset: 1530},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 87, col: 32, offset: 1532},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 87, col: 37, offset: 1537},
								expr: &ruleRefExpr{
									pos:  position{line: 87, col: 37, offset: 1537},
									name: "TupleTypeListComma",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleTypeListComma",
			pos:  position{line: 91, col: 1, offset: 1631},
			expr: &actionExpr{
				pos: position{line: 91, col: 23, offset: 1653},
				run: (*parser).callonTupleTypeListComma1,
				expr: &seqExpr{
					pos: position{line: 91, col: 23, offset: 1653},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 91, col: 23, offset: 1653},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&labeledExpr{
							pos:   position{line: 91, col: 27, offset: 1657},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 32, offset: 1662},
								name: "TupleTypeList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MapType",
			pos:  position{line: 95, col: 1, offset: 1700},
			expr: &actionExpr{
				pos: position{line: 95, col: 12, offset: 1711},
				run: (*parser).callonMapType1,
				expr: &seqExpr{
					pos: position{line: 95, col: 12, offset: 1711},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 95, col: 12, offset: 1711},
							val:        "map",
							ignoreCase: false,
							want:       "\"map\"",
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 18, offset: 1717},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 95, col: 20, offset: 1719},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 24, offset: 1723},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 95, col: 26, offset: 1725},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 95, col: 30, offset: 1729},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 35, offset: 1734},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 95, col: 37, offset: 1736},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 41, offset: 1740},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 95, col: 43, offset: 1742},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 95, col: 49, offset: 1748},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Statement",
			pos:  position{line: 99, col: 1, offset: 1817},
			expr: &choiceExpr{
				pos: position{line: 99, col: 14, offset: 1830},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 99, col: 14, offset: 1830},
						name: "VarStatement",
					},
					&ruleRefExpr{
						pos:  position{line: 99, col: 29, offset: 1845},
						name: "DeclarationStatement",
					},
					&ruleRefExpr{
						pos:  position{line: 99, col: 52, offset: 1868},
						name: "AssignmentOperatorStatement",
					},
					&ruleRefExpr{
						pos:  position{line: 99, col: 82, offset: 1898},
						name: "AssignmentStatement",
					},
					&ruleRefExpr{
						pos:  position{line: 99, col: 104, offset: 1920},
						name: "IfStatement",
					},
					&ruleRefExpr{
						pos:  position{line: 99, col: 118, offset: 1934},
						name: "PostfixStatement",
					},
					&ruleRefExpr{
						pos:  position{line: 99, col: 137, offset: 1953},
						name: "ExprStatement",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VarStatement",
			pos:  position{line: 101, col: 1, offset: 1968},
			expr: &actionExpr{
				pos: position{line: 101, col: 17, offset: 1984},
				run: (*parser).callonVarStatement1,
				expr: &seqExpr{
					pos: position{line: 101, col: 17, offset: 1984},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 101, col: 17, offset: 1984},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 101, col: 19, offset: 1986},
							val:        "var",
							ignoreCase: false,
							want:       "\"var\"",
						},
						&ruleRefExpr{
							pos:  position{line: 101, col: 25, offset: 1992},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 101, col: 27, offset: 1994},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 101, col: 32, offset: 1999},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 101, col: 43, offset: 2010},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 101, col: 45, offset: 2012},
							label: "typ",
							expr: &zeroOrOneExpr{
								pos: position{line: 101, col: 49, offset: 2016},
								expr: &ruleRefExpr{
									pos:  position{line: 101, col: 49, offset: 2016},
									name: "Type",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 101, col: 55, offset: 2022},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 101, col: 57, offset: 2024},
							label: "exp",
							expr: &zeroOrOneExpr{
								pos: position{line: 101, col: 61, offset: 2028},
								expr: &ruleRefExpr{
									pos:  position{line: 101, col: 61, offset: 2028},
									name: "VarStatementExpr",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VarStatementExpr",
			pos:  position{line: 113, col: 1, offset: 2290},
			expr: &actionExpr{
				pos: position{line: 113, col: 21, offset: 2310},
				run: (*parser).callonVarStatementExpr1,
				expr: &seqExpr{
					pos: position{line: 113, col: 21, offset: 2310},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 113, col: 21, offset: 2310},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 113, col: 25, offset: 2314},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 113, col: 27, offset: 2316},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 113, col: 31, offset: 2320},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 113, col: 36, offset: 2325},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VarDeclaration",
			pos:  position{line: 117, col: 1, offset: 2357},
			expr: &actionExpr{
				pos: position{line: 117, col: 19, offset: 2375},
				run: (*parser).callonVarDeclaration1,
				expr: &seqExpr{
					pos: position{line: 117, col: 19, offset: 2375},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 117, col: 19, offset: 2375},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 117, col: 21, offset: 2377},
							val:        "var",
							ignoreCase: false,
							want:       "\"var\"",
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 27, offset: 2383},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 117, col: 29, offset: 2385},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 34, offset: 2390},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 45, offset: 2401},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 117, col: 47, offset: 2403},
							label: "typ",
							expr: &zeroOrOneExpr{
								pos: position{line: 117, col: 51, offset: 2407},
								expr: &ruleRefExpr{
									pos:  position{line: 117, col: 51, offset: 2407},
									name: "Type",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 57, offset: 2413},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 117, col: 59, offset: 2415},
							label: "exp",
							expr: &zeroOrOneExpr{
								pos: position{line: 117, col: 63, offset: 2419},
								expr: &ruleRefExpr{
									pos:  position{line: 117, col: 63, offset: 2419},
									name: "VarDeclarationExpr",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VarDeclarationExpr",
			pos:  position{line: 129, col: 1, offset: 2685},
			expr: &actionExpr{
				pos: position{line: 129, col: 23, offset: 2707},
				run: (*parser).callonVarDeclarationExpr1,
				expr: &seqExpr{
					pos: position{line: 129, col: 23, offset: 2707},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 129, col: 23, offset: 2707},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 27, offset: 2711},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 129, col: 29, offset: 2713},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 33, offset: 2717},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 38, offset: 2722},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DeclarationStatement",
			pos:  position{line: 133, col: 1, offset: 2754},
			expr: &actionExpr{
				pos: position{line: 133, col: 25, offset: 2778},
				run: (*parser).callonDeclarationStatement1,
				expr: &seqExpr{
					pos: position{line: 133, col: 25, offset: 2778},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 133, col: 25, offset: 2778},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 133, col: 27, offset: 2780},
							label: "ident",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 33, offset: 2786},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 133, col: 44, offset: 2797},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 133, col: 46, offset: 2799},
							val:        ":=",
							ignoreCase: false,
							want:       "\":=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 133, col: 51, offset: 2804},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 133, col: 53, offset: 2806},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 57, offset: 2810},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 133, col: 62, offset: 2815},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AssignmentStatement",
			pos:  position{line: 140, col: 1, offset: 2912},
			expr: &actionExpr{
				pos: position{line: 140, col: 24, offset: 2935},
				run: (*parser).callonAssignmentStatement1,
				expr: &seqExpr{
					pos: position{line: 140, col: 24, offset: 2935},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 140, col: 24, offset: 2935},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 140, col: 26, offset: 2937},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 140, col: 31, offset: 2942},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 140, col: 36, offset: 2947},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 140, col: 38, offset: 2949},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 140, col: 42, offset: 2953},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 140, col: 44, offset: 2955},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 140, col: 50, offset: 2961},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 140, col: 55, offset: 2966},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AssignmentOperatorStatement",
			pos:  position{line: 147, col: 1, offset: 3058},
			expr: &actionExpr{
				pos: position{line: 147, col: 32, offset: 3089},
				run: (*parser).callonAssignmentOperatorStatement1,
				expr: &seqExpr{
					pos: position{line: 147, col: 32, offset: 3089},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 147, col: 32, offset: 3089},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 147, col: 34, offset: 3091},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 39, offset: 3096},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 44, offset: 3101},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 147, col: 46, offset: 3103},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 147, col: 50, offset: 3107},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 147, col: 50, offset: 3107},
										val:        "+=",
										ignoreCase: false,
										want:       "\"+=\"",
									},
									&litMatcher{
										pos:        position{line: 147, col: 57, offset: 3114},
										val:        "-=",
										ignoreCase: false,
										want:       "\"-=\"",
									},
									&litMatcher{
										pos:        position{line: 147, col: 64, offset: 3121},
										val:        "*=",
										ignoreCase: false,
										want:       "\"*=\"",
									},
									&litMatcher{
										pos:        position{line: 147, col: 71, offset: 3128},
										val:        "/=",
										ignoreCase: false,
										want:       "\"/=\"",
									},
									&litMatcher{
										pos:        position{line: 147, col: 78, offset: 3135},
										val:        "%=",
										ignoreCase: false,
										want:       "\"%=\"",
									},
									&litMatcher{
										pos:        position{line: 147, col: 85, offset: 3142},
										val:        "**=",
										ignoreCase: false,
										want:       "\"**=\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 92, offset: 3149},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 147, col: 94, offset: 3151},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 100, offset: 3157},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 105, offset: 3162},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ExprStatement",
			pos:  position{line: 155, col: 1, offset: 3298},
			expr: &actionExpr{
				pos: position{line: 155, col: 18, offset: 3315},
				run: (*parser).callonExprStatement1,
				expr: &seqExpr{
					pos: position{line: 155, col: 18, offset: 3315},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 155, col: 18, offset: 3315},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 155, col: 20, offset: 3317},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 155, col: 24, offset: 3321},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 155, col: 29, offset: 3326},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PostfixStatement",
			pos:  position{line: 159, col: 1, offset: 3379},
			expr: &actionExpr{
				pos: position{line: 159, col: 21, offset: 3399},
				run: (*parser).callonPostfixStatement1,
				expr: &seqExpr{
					pos: position{line: 159, col: 21, offset: 3399},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 159, col: 21, offset: 3399},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 159, col: 23, offset: 3401},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 159, col: 27, offset: 3405},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 159, col: 32, offset: 3410},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 159, col: 36, offset: 3414},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 159, col: 36, offset: 3414},
										val:        "++",
										ignoreCase: false,
										want:       "\"++\"",
									},
									&litMatcher{
										pos:        position{line: 159, col: 43, offset: 3421},
										val:        "--",
										ignoreCase: false,
										want:       "\"--\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 159, col: 49, offset: 3427},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IfStatement",
			pos:  position{line: 163, col: 1, offset: 3516},
			expr: &actionExpr{
				pos: position{line: 163, col: 16, offset: 3531},
				run: (*parser).callonIfStatement1,
				expr: &seqExpr{
					pos: position{line: 163, col: 16, offset: 3531},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 163, col: 16, offset: 3531},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 163, col: 18, offset: 3533},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&ruleRefExpr{
							pos:  position{line: 163, col: 23, offset: 3538},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 163, col: 25, offset: 3540},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 163, col: 29, offset: 3544},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 163, col: 34, offset: 3549},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 163, col: 36, offset: 3551},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 163, col: 40, offset: 3555},
							label: "body",
							expr: &zeroOrMoreExpr{
								pos: position{line: 163, col: 45, offset: 3560},
								expr: &ruleRefExpr{
									pos:  position{line: 163, col: 46, offset: 3561},
									name: "Statement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 163, col: 58, offset: 3573},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 163, col: 60, offset: 3575},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&ruleRefExpr{
							pos:  position{line: 163, col: 64, offset: 3579},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 163, col: 66, offset: 3581},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 163, col: 71, offset: 3586},
								expr: &choiceExpr{
									pos: position{line: 163, col: 72, offset: 3587},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 163, col: 72, offset: 3587},
											name: "ElseIfStatement",
										},
										&ruleRefExpr{
											pos:  position{line: 163, col: 90, offset: 3605},
											name: "ElseStatement",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseIfStatement",
			pos:  position{line: 171, col: 1, offset: 3770},
			expr: &actionExpr{
				pos: position{line: 171, col: 20, offset: 3789},
				run: (*parser).callonElseIfStatement1,
				expr: &seqExpr{
					pos: position{line: 171, col: 20, offset: 3789},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 171, col: 20, offset: 3789},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 171, col: 22, offset: 3791},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&ruleRefExpr{
							pos:  position{line: 171, col: 29, offset: 3798},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 171, col: 31, offset: 3800},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&ruleRefExpr{
							pos:  position{line: 171, col: 36, offset: 3805},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 38, offset: 3807},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 42, offset: 3811},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 171, col: 47, offset: 3816},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 171, col: 49, offset: 3818},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 53, offset: 3822},
							label: "body",
							expr: &zeroOrMoreExpr{
								pos: position{line: 171, col: 58, offset: 3827},
								expr: &ruleRefExpr{
									pos:  position{line: 171, col: 59, offset: 3828},
									name: "Statement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 171, col: 71, offset: 3840},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 171, col: 73, offset: 3842},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&ruleRefExpr{
							pos:  position{line: 171, col: 77, offset: 3846},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 79, offset: 3848},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 171, col: 84, offset: 3853},
								expr: &choiceExpr{
									pos: position{line: 171, col: 85, offset: 3854},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 171, col: 85, offset: 3854},
											name: "ElseIfStatement",
										},
										&ruleRefExpr{
											pos:  position{line: 171, col: 103, offset: 3872},
											name: "ElseStatement",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseStatement",
			pos:  position{line: 179, col: 1, offset: 4041},
			expr: &actionExpr{
				pos: position{line: 179, col: 18, offset: 4058},
				run: (*parser).callonElseStatement1,
				expr: &seqExpr{
					pos: position{line: 179, col: 18, offset: 4058},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 179, col: 18, offset: 4058},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 179, col: 20, offset: 4060},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&ruleRefExpr{
							pos:  position{line: 179, col: 27, offset: 4067},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 179, col: 29, offset: 4069},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 179, col: 33, offset: 4073},
							label: "body",
							expr: &zeroOrMoreExpr{
								pos: position{line: 179, col: 38, offset: 4078},
								expr: &ruleRefExpr{
									pos:  position{line: 179, col: 39, offset: 4079},
									name: "Statement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 179, col: 51, offset: 4091},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 179, col: 53, offset: 4093},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&ruleRefExpr{
							pos:  position{line: 179, col: 57, offset: 4097},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForStatement",
			pos:  position{line: 185, col: 1, offset: 4176},
			expr: &actionExpr{
				pos: position{line: 185, col: 17, offset: 4192},
				run: (*parser).callonForStatement1,
				expr: &seqExpr{
					pos: position{line: 185, col: 17, offset: 4192},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 185, col: 17, offset: 4192},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 185, col: 19, offset: 4194},
							val:        "for",
							ignoreCase: false,
							want:       "\"for\"",
						},
						&ruleRefExpr{
							pos:  position{line: 185, col: 25, offset: 4200},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 185, col: 27, offset: 4202},
							label: "init",
							expr: &zeroOrOneExpr{
								pos: position{line: 185, col: 32, offset: 4207},
								expr: &ruleRefExpr{
									pos:  position{line: 185, col: 33, offset: 4208},
									name: "ForStatementInitStatement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 185, col: 61, offset: 4236},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 185, col: 63, offset: 4238},
							label: "cond",
							expr: &zeroOrOneExpr{
								pos: position{line: 185, col: 68, offset: 4243},
								expr: &ruleRefExpr{
									pos:  position{line: 185, col: 69, offset: 4244},
									name: "ForStatementConditionExpr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 185, col: 97, offset: 4272},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 185, col: 99, offset: 4274},
							label: "step",
							expr: &zeroOrOneExpr{
								pos: position{line: 185, col: 104, offset: 4279},
								expr: &ruleRefExpr{
									pos:  position{line: 185, col: 105, offset: 4280},
									name: "ForStatementStepStatement",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 185, col: 133, offset: 4308},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 185, col: 137, offset: 4312},
							label: "body",
							expr: &zeroOrMoreExpr{
								pos: position{line: 185, col: 142, offset: 4317},
								expr: &ruleRefExpr{
									pos:  position{line: 185, col: 143, offset: 4318},
									name: "Statement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 185, col: 155, offset: 4330},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 185, col: 157, offset: 4332},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&ruleRefExpr{
							pos:  position{line: 185, col: 161, offset: 4336},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForStatementInitStatement",
			pos:  position{line: 194, col: 1, offset: 4525},
			expr: &actionExpr{
				pos: position{line: 194, col: 30, offset: 4554},
				run: (*parser).callonForStatementInitStatement1,
				expr: &seqExpr{
					pos: position{line: 194, col: 30, offset: 4554},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 194, col: 30, offset: 4554},
							label: "init",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 36, offset: 4560},
								name: "VarStatement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 50, offset: 4574},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 194, col: 52, offset: 4576},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForStatementConditionExpr",
			pos:  position{line: 198, col: 1, offset: 4616},
			expr: &actionExpr{
				pos: position{line: 198, col: 30, offset: 4645},
				run: (*parser).callonForStatementConditionExpr1,
				expr: &seqExpr{
					pos: position{line: 198, col: 30, offset: 4645},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 198, col: 30, offset: 4645},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 34, offset: 4649},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 198, col: 39, offset: 4654},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 198, col: 41, offset: 4656},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForStatementStepStatement",
			pos:  position{line: 202, col: 1, offset: 4690},
			expr: &actionExpr{
				pos: position{line: 202, col: 30, offset: 4719},
				run: (*parser).callonForStatementStepStatement1,
				expr: &labeledExpr{
					pos:   position{line: 202, col: 30, offset: 4719},
					label: "step",
					expr: &ruleRefExpr{
						pos:  position{line: 202, col: 36, offset: 4725},
						name: "PostfixStatement",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FunctionDeclaration",
			pos:  position{line: 206, col: 1, offset: 4779},
			expr: &actionExpr{
				pos: position{line: 206, col: 24, offset: 4802},
				run: (*parser).callonFunctionDeclaration1,
				expr: &seqExpr{
					pos: position{line: 206, col: 24, offset: 4802},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 206, col: 24, offset: 4802},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 206, col: 26, offset: 4804},
							val:        "func",
							ignoreCase: false,
							want:       "\"func\"",
						},
						&ruleRefExpr{
							pos:  position{line: 206, col: 33, offset: 4811},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 35, offset: 4813},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 206, col: 40, offset: 4818},
								name: "Identifier",
							},
						},
						&litMatcher{
							pos:        position{line: 206, col: 51, offset: 4829},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 55, offset: 4833},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 206, col: 62, offset: 4840},
								expr: &ruleRefExpr{
									pos:  position{line: 206, col: 62, offset: 4840},
									name: "ParameterList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 206, col: 77, offset: 4855},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 206, col: 81, offset: 4859},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 83, offset: 4861},
							label: "ret",
							expr: &zeroOrOneExpr{
								pos: position{line: 206, col: 87, offset: 4865},
								expr: &ruleRefExpr{
									pos:  position{line: 206, col: 87, offset: 4865},
									name: "Type",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 206, col: 93, offset: 4871},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 206, col: 95, offset: 4873},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 99, offset: 4877},
							label: "body",
							expr: &zeroOrMoreExpr{
								pos: position{line: 206, col: 104, offset: 4882},
								expr: &ruleRefExpr{
									pos:  position{line: 206, col: 105, offset: 4883},
									name: "Statement",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 206, col: 117, offset: 4895},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&ruleRefExpr{
							pos:  position{line: 206, col: 121, offset: 4899},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Parameter",
			pos:  position{line: 215, col: 1, offset: 5090},
			expr: &choiceExpr{
				pos: position{line: 215, col: 14, offset: 5103},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 215, col: 14, offset: 5103},
						name: "ParameterNamed",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 31, offset: 5120},
						name: "ParameterUnnamed",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParameterUnnamed",
			pos:  position{line: 217, col: 1, offset: 5138},
			expr: &actionExpr{
				pos: position{line: 217, col: 21, offset: 5158},
				run: (*parser).callonParameterUnnamed1,
				expr: &labeledExpr{
					pos:   position{line: 217, col: 21, offset: 5158},
					label: "typ",
					expr: &ruleRefExpr{
						pos:  position{line: 217, col: 25, offset: 5162},
						name: "Type",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParameterNamed",
			pos:  position{line: 223, col: 1, offset: 5223},
			expr: &actionExpr{
				pos: position{line: 223, col: 19, offset: 5241},
				run: (*parser).callonParameterNamed1,
				expr: &seqExpr{
					pos: position{line: 223, col: 19, offset: 5241},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 223, col: 19, offset: 5241},
							label: "name",
							expr: &zeroOrOneExpr{
								pos: position{line: 223, col: 24, offset: 5246},
								expr: &ruleRefExpr{
									pos:  position{line: 223, col: 24, offset: 5246},
									name: "Identifier",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 36, offset: 5258},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 223, col: 38, offset: 5260},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 42, offset: 5264},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParameterList",
			pos:  position{line: 230, col: 1, offset: 5363},
			expr: &actionExpr{
				pos: position{line: 230, col: 18, offset: 5380},
				run: (*parser).callonParameterList1,
				expr: &seqExpr{
					pos: position{line: 230, col: 18, offset: 5380},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 230, col: 18, offset: 5380},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 20, offset: 5382},
							label: "param",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 26, offset: 5388},
								name: "Parameter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 36, offset: 5398},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 38, offset: 5400},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 230, col: 43, offset: 5405},
								expr: &ruleRefExpr{
									pos:  position{line: 230, col: 43, offset: 5405},
									name: "ParameterListComma",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParameterListComma",
			pos:  position{line: 235, col: 1, offset: 5548},
			expr: &actionExpr{
				pos: position{line: 235, col: 23, offset: 5570},
				run: (*parser).callonParameterListComma1,
				expr: &seqExpr{
					pos: position{line: 235, col: 23, offset: 5570},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 235, col: 23, offset: 5570},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 27, offset: 5574},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 32, offset: 5579},
								name: "ParameterList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Identifier",
			pos:  position{line: 239, col: 1, offset: 5617},
			expr: &actionExpr{
				pos: position{line: 239, col: 15, offset: 5631},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 239, col: 15, offset: 5631},
					exprs: []any{
						&notExpr{
							pos: position{line: 239, col: 15, offset: 5631},
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 16, offset: 5632},
								name: "Keyword",
							},
						},
						&charClassMatcher{
							pos:        position{line: 239, col: 24, offset: 5640},
							val:        "[_a-zA-Z]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 33, offset: 5649},
							expr: &charClassMatcher{
								pos:        position{line: 239, col: 33, offset: 5649},
								val:        "[_a-zA-Z0-9]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Expr",
			pos:  position{line: 243, col: 1, offset: 5701},
			expr: &choiceExpr{
				pos: position{line: 243, col: 9, offset: 5709},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 243, col: 9, offset: 5709},
						name: "UnaryExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 21, offset: 5721},
						name: "DotExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 31, offset: 5731},
						name: "CallExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 42, offset: 5742},
						name: "BinaryExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 55, offset: 5755},
						name: "NumberLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 71, offset: 5771},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 87, offset: 5787},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 104, offset: 5804},
						name: "IdentifierExpr",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "NumberLiteral",
			pos:  position{line: 245, col: 1, offset: 5820},
			expr: &actionExpr{
				pos: position{line: 245, col: 18, offset: 5837},
				run: (*parser).callonNumberLiteral1,
				expr: &seqExpr{
					pos: position{line: 245, col: 18, offset: 5837},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 245, col: 18, offset: 5837},
							expr: &litMatcher{
								pos:        position{line: 245, col: 18, offset: 5837},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&choiceExpr{
							pos: position{line: 245, col: 26, offset: 5845},
							alternatives: []any{
								&oneOrMoreExpr{
									pos: position{line: 245, col: 26, offset: 5845},
									expr: &charClassMatcher{
										pos:        position{line: 245, col: 26, offset: 5845},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&seqExpr{
									pos: position{line: 245, col: 35, offset: 5854},
									exprs: []any{
										&oneOrMoreExpr{
											pos: position{line: 245, col: 35, offset: 5854},
											expr: &charClassMatcher{
												pos:        position{line: 245, col: 35, offset: 5854},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&anyMatcher{
											line: 245, col: 41, offset: 5860,
										},
										&oneOrMoreExpr{
											pos: position{line: 245, col: 42, offset: 5861},
											expr: &charClassMatcher{
												pos:        position{line: 245, col: 42, offset: 5861},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StringLiteral",
			pos:  position{line: 254, col: 1, offset: 5997},
			expr: &actionExpr{
				pos: position{line: 254, col: 18, offset: 6014},
				run: (*parser).callonStringLiteral1,
				expr: &seqExpr{
					pos: position{line: 254, col: 18, offset: 6014},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 254, col: 18, offset: 6014},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 254, col: 22, offset: 6018},
							expr: &choiceExpr{
								pos: position{line: 254, col: 24, offset: 6020},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 254, col: 24, offset: 6020},
										exprs: []any{
											&notExpr{
												pos: position{line: 254, col: 24, offset: 6020},
												expr: &ruleRefExpr{
													pos:  position{line: 254, col: 25, offset: 6021},
													name: "EscapedChar",
												},
											},
											&anyMatcher{
												line: 254, col: 37, offset: 6033,
											},
										},
									},
									&seqExpr{
										pos: position{line: 254, col: 41, offset: 6037},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 254, col: 41, offset: 6037},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&ruleRefExpr{
												pos:  position{line: 254, col: 46, offset: 6042},
												name: "EscapeSequence",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 254, col: 64, offset: 6060},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 264, col: 1, offset: 6267},
			expr: &actionExpr{
				pos: position{line: 264, col: 19, offset: 6285},
				run: (*parser).callonBooleanLiteral1,
				expr: &choiceExpr{
					pos: position{line: 264, col: 20, offset: 6286},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 264, col: 20, offset: 6286},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&litMatcher{
							pos:        position{line: 264, col: 29, offset: 6295},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IdentifierExpr",
			pos:  position{line: 268, col: 1, offset: 6362},
			expr: &actionExpr{
				pos: position{line: 268, col: 19, offset: 6380},
				run: (*parser).callonIdentifierExpr1,
				expr: &labeledExpr{
					pos:   position{line: 268, col: 19, offset: 6380},
					label: "ident",
					expr: &ruleRefExpr{
						pos:  position{line: 268, col: 25, offset: 6386},
						name: "Identifier",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CallExpr",
			pos:  position{line: 272, col: 1, offset: 6463},
			expr: &actionExpr{
				pos: position{line: 272, col: 13, offset: 6475},
				run: (*parser).callonCallExpr1,
				expr: &seqExpr{
					pos: position{line: 272, col: 13, offset: 6475},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 272, col: 13, offset: 6475},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 17, offset: 6479},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 272, col: 22, offset: 6484},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 272, col: 26, offset: 6488},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 272, col: 31, offset: 6493},
								expr: &ruleRefExpr{
									pos:  position{line: 272, col: 31, offset: 6493},
									name: "CallArgumentList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 272, col: 49, offset: 6511},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "CallArgumentList",
			pos:  position{line: 284, col: 1, offset: 6640},
			expr: &actionExpr{
				pos: position{line: 284, col: 21, offset: 6660},
				run: (*parser).callonCallArgumentList1,
				expr: &seqExpr{
					pos: position{line: 284, col: 21, offset: 6660},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 284, col: 21, offset: 6660},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 284, col: 23, offset: 6662},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 27, offset: 6666},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 284, col: 32, offset: 6671},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 284, col: 34, offset: 6673},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 284, col: 39, offset: 6678},
								expr: &ruleRefExpr{
									pos:  position{line: 284, col: 39, offset: 6678},
									name: "CallArgumentListComma",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CallArgumentListComma",
			pos:  position{line: 292, col: 1, offset: 6824},
			expr: &actionExpr{
				pos: position{line: 292, col: 26, offset: 6849},
				run: (*parser).callonCallArgumentListComma1,
				expr: &seqExpr{
					pos: position{line: 292, col: 26, offset: 6849},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 292, col: 26, offset: 6849},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&labeledExpr{
							pos:   position{line: 292, col: 30, offset: 6853},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 35, offset: 6858},
								name: "CallArgumentList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DotExpr",
			pos:  position{line: 296, col: 1, offset: 6899},
			expr: &actionExpr{
				pos: position{line: 296, col: 12, offset: 6910},
				run: (*parser).callonDotExpr1,
				expr: &seqExpr{
					pos: position{line: 296, col: 12, offset: 6910},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 296, col: 12, offset: 6910},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 16, offset: 6914},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 296, col: 21, offset: 6919},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 296, col: 25, offset: 6923},
							label: "ident",
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 31, offset: 6929},
								name: "Identifier",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "BinaryExpr",
			pos:  position{line: 303, col: 1, offset: 7021},
			expr: &choiceExpr{
				pos: position{line: 303, col: 15, offset: 7035},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 303, col: 15, offset: 7035},
						run: (*parser).callonBinaryExpr2,
						expr: &seqExpr{
							pos: position{line: 303, col: 15, offset: 7035},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 303, col: 15, offset: 7035},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 303, col: 20, offset: 7040},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 303, col: 25, offset: 7045},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 303, col: 27, offset: 7047},
									label: "op",
									expr: &litMatcher{
										pos:        position{line: 303, col: 31, offset: 7051},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 303, col: 37, offset: 7057},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 303, col: 39, offset: 7059},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 303, col: 45, offset: 7065},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 309, col: 5, offset: 7191},
						run: (*parser).callonBinaryExpr12,
						expr: &seqExpr{
							pos: position{line: 309, col: 5, offset: 7191},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 309, col: 5, offset: 7191},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 309, col: 10, offset: 7196},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 309, col: 15, offset: 7201},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 309, col: 17, offset: 7203},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 309, col: 21, offset: 7207},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 309, col: 21, offset: 7207},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&litMatcher{
												pos:        position{line: 309, col: 27, offset: 7213},
												val:        "/",
												ignoreCase: false,
												want:       "\"/\"",
											},
											&litMatcher{
												pos:        position{line: 309, col: 33, offset: 7219},
												val:        "%",
												ignoreCase: false,
												want:       "\"%\"",
											},
											&litMatcher{
												pos:        position{line: 309, col: 39, offset: 7225},
												val:        "<<",
												ignoreCase: false,
												want:       "\"<<\"",
											},
											&litMatcher{
												pos:        position{line: 309, col: 46, offset: 7232},
												val:        ">>",
												ignoreCase: false,
												want:       "\">>\"",
											},
											&litMatcher{
												pos:        position{line: 309, col: 53, offset: 7239},
												val:        "&",
												ignoreCase: false,
												want:       "\"&\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 309, col: 58, offset: 7244},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 309, col: 60, offset: 7246},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 309, col: 66, offset: 7252},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 315, col: 5, offset: 7378},
						run: (*parser).callonBinaryExpr28,
						expr: &seqExpr{
							pos: position{line: 315, col: 5, offset: 7378},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 315, col: 5, offset: 7378},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 315, col: 10, offset: 7383},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 315, col: 15, offset: 7388},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 315, col: 17, offset: 7390},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 315, col: 21, offset: 7394},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 315, col: 21, offset: 7394},
												val:        "+",
												ignoreCase: false,
												want:       "\"+\"",
											},
											&litMatcher{
												pos:        position{line: 315, col: 27, offset: 7400},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
											&litMatcher{
												pos:        position{line: 315, col: 33, offset: 7406},
												val:        "|",
												ignoreCase: false,
												want:       "\"|\"",
											},
											&litMatcher{
												pos:        position{line: 315, col: 39, offset: 7412},
												val:        "^",
												ignoreCase: false,
												want:       "\"^\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 315, col: 44, offset: 7417},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 315, col: 46, offset: 7419},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 315, col: 52, offset: 7425},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 321, col: 5, offset: 7551},
						run: (*parser).callonBinaryExpr42,
						expr: &seqExpr{
							pos: position{line: 321, col: 5, offset: 7551},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 321, col: 5, offset: 7551},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 321, col: 10, offset: 7556},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 321, col: 15, offset: 7561},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 321, col: 17, offset: 7563},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 321, col: 21, offset: 7567},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 321, col: 21, offset: 7567},
												val:        "==",
												ignoreCase: false,
												want:       "\"==\"",
											},
											&litMatcher{
												pos:        position{line: 321, col: 28, offset: 7574},
												val:        "!=",
												ignoreCase: false,
												want:       "\"!=\"",
											},
											&litMatcher{
												pos:        position{line: 321, col: 35, offset: 7581},
												val:        "<",
												ignoreCase: false,
												want:       "\"<\"",
											},
											&litMatcher{
												pos:        position{line: 321, col: 41, offset: 7587},
												val:        ">",
												ignoreCase: false,
												want:       "\">\"",
											},
											&litMatcher{
												pos:        position{line: 321, col: 47, offset: 7593},
												val:        ">=",
												ignoreCase: false,
												want:       "\">=\"",
											},
											&litMatcher{
												pos:        position{line: 321, col: 54, offset: 7600},
												val:        "<=",
												ignoreCase: false,
												want:       "\"<=\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 321, col: 60, offset: 7606},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 321, col: 62, offset: 7608},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 321, col: 68, offset: 7614},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 327, col: 5, offset: 7740},
						run: (*parser).callonBinaryExpr58,
						expr: &seqExpr{
							pos: position{line: 327, col: 5, offset: 7740},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 327, col: 5, offset: 7740},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 327, col: 10, offset: 7745},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 327, col: 15, offset: 7750},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 327, col: 17, offset: 7752},
									label: "op",
									expr: &litMatcher{
										pos:        position{line: 327, col: 21, offset: 7756},
										val:        "&&",
										ignoreCase: false,
										want:       "\"&&\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 327, col: 27, offset: 7762},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 327, col: 29, offset: 7764},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 327, col: 35, offset: 7770},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 333, col: 5, offset: 7896},
						run: (*parser).callonBinaryExpr68,
						expr: &seqExpr{
							pos: position{line: 333, col: 5, offset: 7896},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 333, col: 5, offset: 7896},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 333, col: 10, offset: 7901},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 333, col: 15, offset: 7906},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 333, col: 17, offset: 7908},
									label: "op",
									expr: &litMatcher{
										pos:        position{line: 333, col: 21, offset: 7912},
										val:        "||",
										ignoreCase: false,
										want:       "\"||\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 333, col: 27, offset: 7918},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 333, col: 29, offset: 7920},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 333, col: 35, offset: 7926},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "UnaryExpr",
			pos:  position{line: 341, col: 1, offset: 8051},
			expr: &actionExpr{
				pos: position{line: 341, col: 14, offset: 8064},
				run: (*parser).callonUnaryExpr1,
				expr: &seqExpr{
					pos: position{line: 341, col: 14, offset: 8064},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 341, col: 14, offset: 8064},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 341, col: 18, offset: 8068},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 341, col: 18, offset: 8068},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 341, col: 24, offset: 8074},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 341, col: 30, offset: 8080},
										val:        "!",
										ignoreCase: false,
										want:       "\"!\"",
									},
									&litMatcher{
										pos:        position{line: 341, col: 36, offset: 8086},
										val:        "^",
										ignoreCase: false,
										want:       "\"^\"",
									},
									&litMatcher{
										pos:        position{line: 341, col: 42, offset: 8092},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
									&litMatcher{
										pos:        position{line: 341, col: 48, offset: 8098},
										val:        "&",
										ignoreCase: false,
										want:       "\"&\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 341, col: 53, offset: 8103},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 341, col: 55, offset: 8105},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 341, col: 59, offset: 8109},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapedChar",
			pos:  position{line: 348, col: 1, offset: 8207},
			expr: &charClassMatcher{
				pos:        position{line: 348, col: 16, offset: 8222},
				val:        "[\\x00-\\x1f\"\\\\]",
				chars:      []rune{'"', '\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 350, col: 1, offset: 8238},
			expr: &choiceExpr{
				pos: position{line: 350, col: 19, offset: 8256},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 350, col: 19, offset: 8256},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 350, col: 38, offset: 8275},
						name: "UnicodeEscape",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 352, col: 1, offset: 8290},
			expr: &charClassMatcher{
				pos:        position{line: 352, col: 21, offset: 8310},
				val:        "[\"\\\\/bfnrt]",
				chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 354, col: 1, offset: 8323},
			expr: &zeroOrMoreExpr{
				pos: position{line: 354, col: 19, offset: 8341},
				expr: &charClassMatcher{
					pos:        position{line: 354, col: 19, offset: 8341},
					val:        "[ \\n\\t\\r]",
					chars:      []rune{' ', '\n', '\t', '\r'},
					ignoreCase: false,
					inverted:   false,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EOF",
			pos:  position{line: 356, col: 1, offset: 8353},
			expr: &notExpr{
				pos: position{line: 356, col: 8, offset: 8360},
				expr: &anyMatcher{
					line: 356, col: 9, offset: 8361,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
	},
}

func (c *current) onProgram1(pkg, decls any) (any, error) {
	return Program{
		Package: pkg.(Package),

		Declarations: anyToSlice[Declaration](decls),
	}, nil
}

func (p *parser) callonProgram1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProgram1(stack["pkg"], stack["decls"])
}

func (c *current) onPackage1(name any) (any, error) {
	return Package{
		Name: name.(Identifier),
	}, nil
}

func (p *parser) callonPackage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPackage1(stack["name"])
}

func (c *current) onTypeDeclaration1(name, typ any) (any, error) {
	return TypeDeclaration{
		Name: name.(Identifier),
		Type: typ.(Type),
	}, nil
}

func (p *parser) callonTypeDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeDeclaration1(stack["name"], stack["typ"])
}

func (c *current) onPointerType1(pointee any) (any, error) {
	return PointerType{Pointee: pointee.(Type)}, nil
}

func (p *parser) callonPointerType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPointerType1(stack["pointee"])
}

func (c *current) onSliceType1(element any) (any, error) {
	return SliceType{Element: element.(Type)}, nil
}

func (p *parser) callonSliceType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSliceType1(stack["element"])
}

func (c *current) onTupleType1(elems any) (any, error) {
	return TupleType{Elements: maybeSlice[Type](elems)}, nil
}

func (p *parser) callonTupleType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleType1(stack["elems"])
}

func (c *current) onTupleTypeList1(elem, rest any) (any, error) {
	return append([]Type{elem.(Type)}, maybeSlice[Type](rest)...), nil
}

func (p *parser) callonTupleTypeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleTypeList1(stack["elem"], stack["rest"])
}

func (c *current) onTupleTypeListComma1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonTupleTypeListComma1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleTypeListComma1(stack["rest"])
}

func (c *current) onMapType1(key, value any) (any, error) {
	return MapType{Key: key.(Type), Value: value.(Type)}, nil
}

func (p *parser) callonMapType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMapType1(stack["key"], stack["value"])
}

func (c *current) onVarStatement1(name, typ, exp any) (any, error) {
	if typ == nil && exp == nil {
		return nil, fmt.Errorf("var statement must have a type or an expression")
	}

	return &VarStatement{
		Name: name.(Identifier),
		Expr: maybePtr[Expr](exp),
		Type: maybePtr[Type](typ),
	}, nil
}

func (p *parser) callonVarStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVarStatement1(stack["name"], stack["typ"], stack["exp"])
}

func (c *current) onVarStatementExpr1(exp any) (any, error) {
	return exp.(Expr), nil
}

func (p *parser) callonVarStatementExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVarStatementExpr1(stack["exp"])
}

func (c *current) onVarDeclaration1(name, typ, exp any) (any, error) {
	if typ == nil && exp == nil {
		return nil, fmt.Errorf("var statement must have a type or an expression")
	}

	return &VarDeclaration{
		Name: name.(Identifier),
		Expr: maybePtr[Expr](exp),
		Type: maybePtr[Type](typ),
	}, nil
}

func (p *parser) callonVarDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVarDeclaration1(stack["name"], stack["typ"], stack["exp"])
}

func (c *current) onVarDeclarationExpr1(exp any) (any, error) {
	return exp.(Expr), nil
}

func (p *parser) callonVarDeclarationExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVarDeclarationExpr1(stack["exp"])
}

func (c *current) onDeclarationStatement1(ident, exp any) (any, error) {
	return DeclarationStatement{
		Name: ident.(Identifier),
		Expr: exp.(Expr),
	}, nil
}

func (p *parser) callonDeclarationStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeclarationStatement1(stack["ident"], stack["exp"])
}

func (c *current) onAssignmentStatement1(left, right any) (any, error) {
	return AssignmentStatement{
		Left:  left.(Expr),
		Right: right.(Expr),
	}, nil
}

func (p *parser) callonAssignmentStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignmentStatement1(stack["left"], stack["right"])
}

func (c *current) onAssignmentOperatorStatement1(left, op, right any) (any, error) {
	return AssignmentOperatorStatement{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),
	}, nil
}

func (p *parser) callonAssignmentOperatorStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignmentOperatorStatement1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onExprStatement1(exp any) (any, error) {
	return ExprStatement{Expr: exp.(Expr)}, nil
}

func (p *parser) callonExprStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprStatement1(stack["exp"])
}

func (c *current) onPostfixStatement1(exp, op any) (any, error) {
	return PostfixStatement{Expr: exp.(Expr), Operator: Operator(op.([]byte))}, nil
}

func (p *parser) callonPostfixStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostfixStatement1(stack["exp"], stack["op"])
}

func (c *current) onIfStatement1(exp, body, rest any) (any, error) {
	return IfStatement{
		Condition: exp.(Expr),
		Body:      anyToSlice[Statement](body),
		Else:      maybePtr[ElseIfElseStatement](rest),
	}, nil
}

func (p *parser) callonIfStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfStatement1(stack["exp"], stack["body"], stack["rest"])
}

func (c *current) onElseIfStatement1(exp, body, rest any) (any, error) {
	return ElseIfStatement{
		Condition: exp.(Expr),
		Body:      anyToSlice[Statement](body),
		Else:      maybePtr[ElseIfElseStatement](rest),
	}, nil
}

func (p *parser) callonElseIfStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfStatement1(stack["exp"], stack["body"], stack["rest"])
}

func (c *current) onElseStatement1(body any) (any, error) {
	return ElseStatement{
		Body: anyToSlice[Statement](body),
	}, nil
}

func (p *parser) callonElseStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseStatement1(stack["body"])
}

func (c *current) onForStatement1(init, cond, step, body any) (any, error) {
	return ForStatement{
		Body:      anyToSlice[Statement](body),
		Init:      maybePtr[Statement](init),
		Condition: maybePtr[Expr](cond),
		Step:      maybePtr[Statement](step),
	}, nil
}

func (p *parser) callonForStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForStatement1(stack["init"], stack["cond"], stack["step"], stack["body"])
}

func (c *current) onForStatementInitStatement1(init any) (any, error) {
	return init.(Statement), nil
}

func (p *parser) callonForStatementInitStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForStatementInitStatement1(stack["init"])
}

func (c *current) onForStatementConditionExpr1(exp any) (any, error) {
	return exp.(Expr), nil
}

func (p *parser) callonForStatementConditionExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForStatementConditionExpr1(stack["exp"])
}

func (c *current) onForStatementStepStatement1(step any) (any, error) {
	return step.(Statement), nil
}

func (p *parser) callonForStatementStepStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForStatementStepStatement1(stack["step"])
}

func (c *current) onFunctionDeclaration1(name, params, ret, body any) (any, error) {
	return FunctionDeclaration{
		Name:       name.(Identifier),
		Parameters: maybeSlice[Parameter](params),
		Return:     maybe[Type](ret),
		Body:       anyToSlice[Statement](body),
	}, nil
}

func (p *parser) callonFunctionDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionDeclaration1(stack["name"], stack["params"], stack["ret"], stack["body"])
}

func (c *current) onParameterUnnamed1(typ any) (any, error) {
	return Parameter{
		Type: typ.(Type),
	}, nil
}

func (p *parser) callonParameterUnnamed1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterUnnamed1(stack["typ"])
}

func (c *current) onParameterNamed1(name, typ any) (any, error) {
	return Parameter{
		Name: maybePtr[Identifier](name),
		Type: typ.(Type),
	}, nil
}

func (p *parser) callonParameterNamed1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterNamed1(stack["name"], stack["typ"])
}

func (c *current) onParameterList1(param, rest any) (any, error) {
	log.Printf("%v %T", param, rest)
	return append([]Parameter{param.(Parameter)}, maybeSlice[Parameter](rest)...), nil
}

func (p *parser) callonParameterList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterList1(stack["param"], stack["rest"])
}

func (c *current) onParameterListComma1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonParameterListComma1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterListComma1(stack["rest"])
}

func (c *current) onIdentifier1() (any, error) {
	return Identifier(c.text), nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onNumberLiteral1() (any, error) {
	f, err := strconv.ParseFloat(string(c.text), 64)
	if err != nil {
		return 0, err
	}

	return NumberLiteral(f), nil
}

func (p *parser) callonNumberLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberLiteral1()
}

func (c *current) onStringLiteral1() (any, error) {
	c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
	str, err := strconv.Unquote(string(c.text))
	if err != nil {
		return nil, err
	}

	return StringLiteral(str), nil
}

func (p *parser) callonStringLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1()
}

func (c *current) onBooleanLiteral1() (any, error) {
	return BooleanLiteral(string(c.text) == "true"), nil
}

func (p *parser) callonBooleanLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral1()
}

func (c *current) onIdentifierExpr1(ident any) (any, error) {
	return IdentifierExpr{Identifier: ident.(Identifier)}, nil
}

func (p *parser) callonIdentifierExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierExpr1(stack["ident"])
}

func (c *current) onCallExpr1(exp, args any) (any, error) {
	call := CallExpr{
		Expr: exp.(Expr),
	}

	if args != nil {
		call.Args = args.([]Expr)
	}

	return call, nil
}

func (p *parser) callonCallExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallExpr1(stack["exp"], stack["args"])
}

func (c *current) onCallArgumentList1(exp, rest any) (any, error) {
	if rest != nil {
		return append([]Expr{exp.(Expr)}, rest.([]Expr)...), nil
	}

	return []Expr{exp.(Expr)}, nil
}

func (p *parser) callonCallArgumentList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallArgumentList1(stack["exp"], stack["rest"])
}

func (c *current) onCallArgumentListComma1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonCallArgumentListComma1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallArgumentListComma1(stack["rest"])
}

func (c *current) onDotExpr1(exp, ident any) (any, error) {
	return DotExpr{
		Expr: exp.(Expr),
		Key:  ident.(Identifier),
	}, nil
}

func (p *parser) callonDotExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotExpr1(stack["exp"], stack["ident"])
}

func (c *current) onBinaryExpr2(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),
	}, nil
}

func (p *parser) callonBinaryExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinaryExpr2(stack["left"], stack["op"], stack["right"])
}

func (c *current) onBinaryExpr12(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),
	}, nil
}

func (p *parser) callonBinaryExpr12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinaryExpr12(stack["left"], stack["op"], stack["right"])
}

func (c *current) onBinaryExpr28(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),
	}, nil
}

func (p *parser) callonBinaryExpr28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinaryExpr28(stack["left"], stack["op"], stack["right"])
}

func (c *current) onBinaryExpr42(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),
	}, nil
}

func (p *parser) callonBinaryExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinaryExpr42(stack["left"], stack["op"], stack["right"])
}

func (c *current) onBinaryExpr58(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),
	}, nil
}

func (p *parser) callonBinaryExpr58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinaryExpr58(stack["left"], stack["op"], stack["right"])
}

func (c *current) onBinaryExpr68(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),
	}, nil
}

func (p *parser) callonBinaryExpr68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinaryExpr68(stack["left"], stack["op"], stack["right"])
}

func (c *current) onUnaryExpr1(op, exp any) (any, error) {
	return UnaryExpr{
		Operator: Operator(op.([]byte)),
		Expr:     exp.(Expr),
	}, nil
}

func (p *parser) callonUnaryExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnaryExpr1(stack["op"], stack["exp"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any

	leader        bool
	leftRecursive bool
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type ruleWithExpsStack struct {
	rule   *rule
	estack []any
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleRecursiveLeader(rule *rule) (any, bool) {
	result, ok := p.getMemoized(rule)
	if ok {
		p.restore(result.end)
		return result.v, result.b
	}

	if p.debug {
		defer p.out(p.in("recursive " + rule.name))
	}

	var (
		depth      = 0
		startMark  = p.pt
		lastResult = resultTuple{nil, false, startMark}
		lastErrors = *p.errs
	)

	for {
		lastState := p.cloneState()
		p.setMemoized(startMark, rule, lastResult)
		val, ok := p.parseRule(rule)
		endMark := p.pt
		if p.debug {
			p.printIndent("RECURSIVE", fmt.Sprintf(
				"Rule %s depth %d: %t -> %s",
				rule.name, depth, ok, string(p.sliceFrom(startMark))))
		}
		if (!ok) || (endMark.offset <= lastResult.end.offset && depth != 0) {
			p.restoreState(lastState)
			*p.errs = lastErrors
			break
		}
		lastResult = resultTuple{val, ok, endMark}
		lastErrors = *p.errs
		p.restore(startMark)
		depth++
	}

	p.restore(lastResult.end)
	p.setMemoized(startMark, rule, lastResult)
	return lastResult.v, lastResult.b
}

func (p *parser) parseRuleRecursiveNoLeader(rule *rule) (any, bool) {
	return p.parseRule(rule)
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize || rule.leftRecursive {
		if rule.leader {
			val, ok = p.parseRuleRecursiveLeader(rule)
		} else if p.memoize && !rule.leftRecursive {
			val, ok = p.parseRuleMemoize(rule)
		} else {
			val, ok = p.parseRuleRecursiveNoLeader(rule)
		}
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	isLeftRecusion := p.rstack[len(p.rstack)-1].leftRecursive
	if p.memoize && !isLeftRecusion {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize && !isLeftRecusion {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
