// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"log"
	"math"
	"os"
	"slices"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

func anyToSlice[T any](s any) []T {
	var ret []T
	for _, e := range s.([]any) {
		if e == nil {
			continue
		}
		ret = append(ret, e.(T))
	}

	return ret
}

func toPtr[T any](v T) *T {
	return &v
}

func maybe[T any](v any) T {
	if v == nil {
		var t T
		return t
	}

	return v.(T)
}

func maybePtr[T any](v any) *T {
	if v == nil {
		return nil
	}

	return toPtr(v.(T))
}

func maybeSlice[T any](v any) []T {
	if v == nil {
		return nil
	}

	return v.([]T)
}

var g = &grammar{
	rules: []*rule{
		{
			name: "File",
			pos:  position{line: 51, col: 1, offset: 613},
			expr: &actionExpr{
				pos: position{line: 51, col: 9, offset: 621},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 51, col: 9, offset: 621},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 51, col: 9, offset: 621},
							label: "pkg",
							expr: &ruleRefExpr{
								pos:  position{line: 51, col: 13, offset: 625},
								name: "Package",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 51, col: 21, offset: 633},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 51, col: 24, offset: 636},
							label: "decls",
							expr: &zeroOrMoreExpr{
								pos: position{line: 51, col: 30, offset: 642},
								expr: &ruleRefExpr{
									pos:  position{line: 51, col: 31, offset: 643},
									name: "Declaration",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 51, col: 45, offset: 657},
							name: "EOF",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Keyword",
			pos:  position{line: 59, col: 1, offset: 770},
			expr: &seqExpr{
				pos: position{line: 59, col: 12, offset: 781},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 59, col: 13, offset: 782},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 59, col: 13, offset: 782},
								val:        "map",
								ignoreCase: false,
								want:       "\"map\"",
							},
							&litMatcher{
								pos:        position{line: 59, col: 21, offset: 790},
								val:        "func",
								ignoreCase: false,
								want:       "\"func\"",
							},
							&litMatcher{
								pos:        position{line: 59, col: 30, offset: 799},
								val:        "if",
								ignoreCase: false,
								want:       "\"if\"",
							},
							&litMatcher{
								pos:        position{line: 59, col: 37, offset: 806},
								val:        "else",
								ignoreCase: false,
								want:       "\"else\"",
							},
							&litMatcher{
								pos:        position{line: 59, col: 46, offset: 815},
								val:        "for",
								ignoreCase: false,
								want:       "\"for\"",
							},
							&litMatcher{
								pos:        position{line: 59, col: 54, offset: 823},
								val:        "package",
								ignoreCase: false,
								want:       "\"package\"",
							},
							&litMatcher{
								pos:        position{line: 59, col: 66, offset: 835},
								val:        "var",
								ignoreCase: false,
								want:       "\"var\"",
							},
							&litMatcher{
								pos:        position{line: 59, col: 74, offset: 843},
								val:        "extern",
								ignoreCase: false,
								want:       "\"extern\"",
							},
							&litMatcher{
								pos:        position{line: 59, col: 85, offset: 854},
								val:        "const",
								ignoreCase: false,
								want:       "\"const\"",
							},
							&litMatcher{
								pos:        position{line: 59, col: 95, offset: 864},
								val:        "struct",
								ignoreCase: false,
								want:       "\"struct\"",
							},
							&litMatcher{
								pos:        position{line: 59, col: 106, offset: 875},
								val:        "interface",
								ignoreCase: false,
								want:       "\"interface\"",
							},
							&litMatcher{
								pos:        position{line: 59, col: 120, offset: 889},
								val:        "break",
								ignoreCase: false,
								want:       "\"break\"",
							},
							&litMatcher{
								pos:        position{line: 59, col: 130, offset: 899},
								val:        "continue",
								ignoreCase: false,
								want:       "\"continue\"",
							},
						},
					},
					&notExpr{
						pos: position{line: 59, col: 142, offset: 911},
						expr: &charClassMatcher{
							pos:        position{line: 59, col: 143, offset: 912},
							val:        "[a-zA-Z_0-9]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Package",
			pos:  position{line: 61, col: 1, offset: 926},
			expr: &actionExpr{
				pos: position{line: 61, col: 12, offset: 937},
				run: (*parser).callonPackage1,
				expr: &seqExpr{
					pos: position{line: 61, col: 12, offset: 937},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 61, col: 12, offset: 937},
							val:        "package",
							ignoreCase: false,
							want:       "\"package\"",
						},
						&ruleRefExpr{
							pos:  position{line: 61, col: 22, offset: 947},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 61, col: 24, offset: 949},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 29, offset: 954},
								name: "Identifier",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Declaration",
			pos:  position{line: 67, col: 1, offset: 1026},
			expr: &actionExpr{
				pos: position{line: 67, col: 16, offset: 1041},
				run: (*parser).callonDeclaration1,
				expr: &seqExpr{
					pos: position{line: 67, col: 16, offset: 1041},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 67, col: 16, offset: 1041},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 67, col: 18, offset: 1043},
							label: "decl",
							expr: &choiceExpr{
								pos: position{line: 67, col: 24, offset: 1049},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 67, col: 24, offset: 1049},
										name: "Directive",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 36, offset: 1061},
										name: "MethodDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 56, offset: 1081},
										name: "FunctionDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 78, offset: 1103},
										name: "ExternFuncDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 102, offset: 1127},
										name: "TypeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 120, offset: 1145},
										name: "VarDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 137, offset: 1162},
										name: "ConstDeclaration",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 155, offset: 1180},
							name: "__",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Directive",
			pos:  position{line: 71, col: 1, offset: 1207},
			expr: &actionExpr{
				pos: position{line: 71, col: 14, offset: 1220},
				run: (*parser).callonDirective1,
				expr: &seqExpr{
					pos: position{line: 71, col: 14, offset: 1220},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 71, col: 14, offset: 1220},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 71, col: 18, offset: 1224},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 71, col: 23, offset: 1229},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 71, col: 34, offset: 1240},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 71, col: 36, offset: 1242},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 71, col: 41, offset: 1247},
								expr: &ruleRefExpr{
									pos:  position{line: 71, col: 41, offset: 1247},
									name: "DirectiveArguments",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 71, col: 61, offset: 1267},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 71, col: 64, offset: 1270},
							label: "decl",
							expr: &ruleRefExpr{
								pos:  position{line: 71, col: 69, offset: 1275},
								name: "Declaration",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveArguments",
			pos:  position{line: 81, col: 1, offset: 1435},
			expr: &actionExpr{
				pos: position{line: 81, col: 23, offset: 1457},
				run: (*parser).callonDirectiveArguments1,
				expr: &seqExpr{
					pos: position{line: 81, col: 23, offset: 1457},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 81, col: 23, offset: 1457},
							label: "arg",
							expr: &ruleRefExpr{
								pos:  position{line: 81, col: 27, offset: 1461},
								name: "DirectiveArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 81, col: 45, offset: 1479},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 81, col: 50, offset: 1484},
								expr: &ruleRefExpr{
									pos:  position{line: 81, col: 50, offset: 1484},
									name: "DirectiveArgumentsRest",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveArgumentsRest",
			pos:  position{line: 85, col: 1, offset: 1581},
			expr: &actionExpr{
				pos: position{line: 85, col: 27, offset: 1607},
				run: (*parser).callonDirectiveArgumentsRest1,
				expr: &seqExpr{
					pos: position{line: 85, col: 27, offset: 1607},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 85, col: 27, offset: 1607},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 85, col: 29, offset: 1609},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 85, col: 34, offset: 1614},
								name: "DirectiveArguments",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveArgument",
			pos:  position{line: 89, col: 1, offset: 1656},
			expr: &choiceExpr{
				pos: position{line: 89, col: 22, offset: 1677},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 89, col: 22, offset: 1677},
						name: "Identifier",
					},
					&ruleRefExpr{
						pos:  position{line: 89, col: 35, offset: 1690},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 89, col: 51, offset: 1706},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 89, col: 66, offset: 1721},
						name: "IntLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 89, col: 79, offset: 1734},
						name: "BoolLiteral",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeDeclaration",
			pos:  position{line: 91, col: 1, offset: 1747},
			expr: &actionExpr{
				pos: position{line: 91, col: 20, offset: 1766},
				run: (*parser).callonTypeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 91, col: 20, offset: 1766},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 91, col: 20, offset: 1766},
							val:        "type",
							ignoreCase: false,
							want:       "\"type\"",
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 27, offset: 1773},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 91, col: 29, offset: 1775},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 34, offset: 1780},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 45, offset: 1791},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 91, col: 47, offset: 1793},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 51, offset: 1797},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ConstDeclaration",
			pos:  position{line: 98, col: 1, offset: 1893},
			expr: &actionExpr{
				pos: position{line: 98, col: 21, offset: 1913},
				run: (*parser).callonConstDeclaration1,
				expr: &seqExpr{
					pos: position{line: 98, col: 21, offset: 1913},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 98, col: 21, offset: 1913},
							val:        "const",
							ignoreCase: false,
							want:       "\"const\"",
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 29, offset: 1921},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 98, col: 31, offset: 1923},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 98, col: 36, offset: 1928},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 47, offset: 1939},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 98, col: 49, offset: 1941},
							label: "typ",
							expr: &zeroOrOneExpr{
								pos: position{line: 98, col: 53, offset: 1945},
								expr: &ruleRefExpr{
									pos:  position{line: 98, col: 53, offset: 1945},
									name: "Type",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 59, offset: 1951},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 98, col: 61, offset: 1953},
							label: "exp",
							expr: &zeroOrOneExpr{
								pos: position{line: 98, col: 65, offset: 1957},
								expr: &ruleRefExpr{
									pos:  position{line: 98, col: 65, offset: 1957},
									name: "VarStatementExpr",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Type",
			pos:  position{line: 112, col: 1, offset: 2245},
			expr: &choiceExpr{
				pos: position{line: 112, col: 9, offset: 2253},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 112, col: 9, offset: 2253},
						name: "Identifier",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 22, offset: 2266},
						name: "ParenthesizedType",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 42, offset: 2286},
						name: "PointerType",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 56, offset: 2300},
						name: "MapType",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 66, offset: 2310},
						name: "ArrayType",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 78, offset: 2322},
						name: "SliceType",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 90, offset: 2334},
						name: "TupleType",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 102, offset: 2346},
						name: "StructType",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 115, offset: 2359},
						name: "FunctionType",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 130, offset: 2374},
						name: "InterfaceType",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParenthesizedType",
			pos:  position{line: 114, col: 1, offset: 2389},
			expr: &actionExpr{
				pos: position{line: 114, col: 22, offset: 2410},
				run: (*parser).callonParenthesizedType1,
				expr: &seqExpr{
					pos: position{line: 114, col: 22, offset: 2410},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 114, col: 22, offset: 2410},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 26, offset: 2414},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 114, col: 28, offset: 2416},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 32, offset: 2420},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 37, offset: 2425},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 114, col: 39, offset: 2427},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PointerType",
			pos:  position{line: 122, col: 1, offset: 2518},
			expr: &actionExpr{
				pos: position{line: 122, col: 16, offset: 2533},
				run: (*parser).callonPointerType1,
				expr: &seqExpr{
					pos: position{line: 122, col: 16, offset: 2533},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 122, col: 16, offset: 2533},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&labeledExpr{
							pos:   position{line: 122, col: 20, offset: 2537},
							label: "pointee",
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 28, offset: 2545},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SliceType",
			pos:  position{line: 130, col: 1, offset: 2635},
			expr: &actionExpr{
				pos: position{line: 130, col: 14, offset: 2648},
				run: (*parser).callonSliceType1,
				expr: &seqExpr{
					pos: position{line: 130, col: 14, offset: 2648},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 130, col: 14, offset: 2648},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 18, offset: 2652},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 130, col: 20, offset: 2654},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&labeledExpr{
							pos:   position{line: 130, col: 24, offset: 2658},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 32, offset: 2666},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArrayType",
			pos:  position{line: 138, col: 1, offset: 2754},
			expr: &actionExpr{
				pos: position{line: 138, col: 14, offset: 2767},
				run: (*parser).callonArrayType1,
				expr: &seqExpr{
					pos: position{line: 138, col: 14, offset: 2767},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 138, col: 14, offset: 2767},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 138, col: 18, offset: 2771},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 20, offset: 2773},
							label: "length",
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 28, offset: 2781},
								name: "IntLiteral",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 138, col: 40, offset: 2793},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 138, col: 42, offset: 2795},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 46, offset: 2799},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 54, offset: 2807},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleType",
			pos:  position{line: 147, col: 1, offset: 2926},
			expr: &actionExpr{
				pos: position{line: 147, col: 14, offset: 2939},
				run: (*parser).callonTupleType1,
				expr: &seqExpr{
					pos: position{line: 147, col: 14, offset: 2939},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 147, col: 14, offset: 2939},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 147, col: 18, offset: 2943},
							label: "elems",
							expr: &zeroOrOneExpr{
								pos: position{line: 147, col: 24, offset: 2949},
								expr: &ruleRefExpr{
									pos:  position{line: 147, col: 24, offset: 2949},
									name: "TupleTypeList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 39, offset: 2964},
							name: "ce_",
						},
						&litMatcher{
							pos:        position{line: 147, col: 43, offset: 2968},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleTypeList",
			pos:  position{line: 155, col: 1, offset: 3065},
			expr: &actionExpr{
				pos: position{line: 155, col: 18, offset: 3082},
				run: (*parser).callonTupleTypeList1,
				expr: &seqExpr{
					pos: position{line: 155, col: 18, offset: 3082},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 155, col: 18, offset: 3082},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 155, col: 20, offset: 3084},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 155, col: 25, offset: 3089},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 155, col: 30, offset: 3094},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 155, col: 32, offset: 3096},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 155, col: 37, offset: 3101},
								expr: &ruleRefExpr{
									pos:  position{line: 155, col: 37, offset: 3101},
									name: "TupleTypeListComma",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleTypeListComma",
			pos:  position{line: 159, col: 1, offset: 3195},
			expr: &actionExpr{
				pos: position{line: 159, col: 23, offset: 3217},
				run: (*parser).callonTupleTypeListComma1,
				expr: &seqExpr{
					pos: position{line: 159, col: 23, offset: 3217},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 159, col: 23, offset: 3217},
							name: "c_",
						},
						&labeledExpr{
							pos:   position{line: 159, col: 26, offset: 3220},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 159, col: 31, offset: 3225},
								name: "TupleTypeList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StructType",
			pos:  position{line: 163, col: 1, offset: 3263},
			expr: &actionExpr{
				pos: position{line: 163, col: 15, offset: 3277},
				run: (*parser).callonStructType1,
				expr: &seqExpr{
					pos: position{line: 163, col: 15, offset: 3277},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 163, col: 15, offset: 3277},
							val:        "struct",
							ignoreCase: false,
							want:       "\"struct\"",
						},
						&ruleRefExpr{
							pos:  position{line: 163, col: 24, offset: 3286},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 163, col: 26, offset: 3288},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 163, col: 30, offset: 3292},
							label: "elems",
							expr: &zeroOrOneExpr{
								pos: position{line: 163, col: 36, offset: 3298},
								expr: &ruleRefExpr{
									pos:  position{line: 163, col: 36, offset: 3298},
									name: "StructFieldList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 163, col: 53, offset: 3315},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 163, col: 56, offset: 3318},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StructField",
			pos:  position{line: 171, col: 1, offset: 3418},
			expr: &actionExpr{
				pos: position{line: 171, col: 16, offset: 3433},
				run: (*parser).callonStructField1,
				expr: &seqExpr{
					pos: position{line: 171, col: 16, offset: 3433},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 171, col: 16, offset: 3433},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 21, offset: 3438},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 171, col: 32, offset: 3449},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 34, offset: 3451},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 38, offset: 3455},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StructFieldList",
			pos:  position{line: 180, col: 1, offset: 3562},
			expr: &actionExpr{
				pos: position{line: 180, col: 20, offset: 3581},
				run: (*parser).callonStructFieldList1,
				expr: &seqExpr{
					pos: position{line: 180, col: 20, offset: 3581},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 180, col: 20, offset: 3581},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 180, col: 23, offset: 3584},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 180, col: 29, offset: 3590},
								name: "StructField",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 41, offset: 3602},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 180, col: 43, offset: 3604},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 180, col: 48, offset: 3609},
								expr: &ruleRefExpr{
									pos:  position{line: 180, col: 48, offset: 3609},
									name: "StructFieldListNewline",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StructFieldListNewline",
			pos:  position{line: 184, col: 1, offset: 3728},
			expr: &actionExpr{
				pos: position{line: 184, col: 27, offset: 3754},
				run: (*parser).callonStructFieldListNewline1,
				expr: &seqExpr{
					pos: position{line: 184, col: 27, offset: 3754},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 184, col: 27, offset: 3754},
							name: "nl",
						},
						&labeledExpr{
							pos:   position{line: 184, col: 30, offset: 3757},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 35, offset: 3762},
								name: "StructFieldList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "InterfaceType",
			pos:  position{line: 188, col: 1, offset: 3801},
			expr: &actionExpr{
				pos: position{line: 188, col: 18, offset: 3818},
				run: (*parser).callonInterfaceType1,
				expr: &seqExpr{
					pos: position{line: 188, col: 18, offset: 3818},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 188, col: 18, offset: 3818},
							val:        "interface",
							ignoreCase: false,
							want:       "\"interface\"",
						},
						&ruleRefExpr{
							pos:  position{line: 188, col: 30, offset: 3830},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 188, col: 32, offset: 3832},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 188, col: 36, offset: 3836},
							label: "elems",
							expr: &zeroOrOneExpr{
								pos: position{line: 188, col: 42, offset: 3842},
								expr: &ruleRefExpr{
									pos:  position{line: 188, col: 42, offset: 3842},
									name: "InterfaceMethodList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 188, col: 63, offset: 3863},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 188, col: 66, offset: 3866},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "InterfaceMethod",
			pos:  position{line: 196, col: 1, offset: 3974},
			expr: &actionExpr{
				pos: position{line: 196, col: 20, offset: 3993},
				run: (*parser).callonInterfaceMethod1,
				expr: &seqExpr{
					pos: position{line: 196, col: 20, offset: 3993},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 196, col: 20, offset: 3993},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 25, offset: 3998},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 196, col: 36, offset: 4009},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 196, col: 38, offset: 4011},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 196, col: 42, offset: 4015},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 196, col: 49, offset: 4022},
								expr: &ruleRefExpr{
									pos:  position{line: 196, col: 49, offset: 4022},
									name: "ParameterList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 196, col: 64, offset: 4037},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 196, col: 68, offset: 4041},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 196, col: 70, offset: 4043},
							label: "ret",
							expr: &zeroOrOneExpr{
								pos: position{line: 196, col: 74, offset: 4047},
								expr: &ruleRefExpr{
									pos:  position{line: 196, col: 74, offset: 4047},
									name: "Type",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "InterfaceMethodList",
			pos:  position{line: 206, col: 1, offset: 4214},
			expr: &actionExpr{
				pos: position{line: 206, col: 24, offset: 4237},
				run: (*parser).callonInterfaceMethodList1,
				expr: &seqExpr{
					pos: position{line: 206, col: 24, offset: 4237},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 206, col: 24, offset: 4237},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 27, offset: 4240},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 206, col: 33, offset: 4246},
								name: "InterfaceMethod",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 206, col: 49, offset: 4262},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 51, offset: 4264},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 206, col: 56, offset: 4269},
								expr: &ruleRefExpr{
									pos:  position{line: 206, col: 56, offset: 4269},
									name: "InterfaceMethodListNewline",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "InterfaceMethodListNewline",
			pos:  position{line: 210, col: 1, offset: 4404},
			expr: &actionExpr{
				pos: position{line: 210, col: 31, offset: 4434},
				run: (*parser).callonInterfaceMethodListNewline1,
				expr: &seqExpr{
					pos: position{line: 210, col: 31, offset: 4434},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 210, col: 31, offset: 4434},
							name: "nl",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 34, offset: 4437},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 39, offset: 4442},
								name: "InterfaceMethodList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleKey",
			pos:  position{line: 215, col: 1, offset: 4486},
			expr: &actionExpr{
				pos: position{line: 215, col: 13, offset: 4498},
				run: (*parser).callonTupleKey1,
				expr: &oneOrMoreExpr{
					pos: position{line: 215, col: 13, offset: 4498},
					expr: &charClassMatcher{
						pos:        position{line: 215, col: 13, offset: 4498},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MapType",
			pos:  position{line: 222, col: 1, offset: 4582},
			expr: &actionExpr{
				pos: position{line: 222, col: 12, offset: 4593},
				run: (*parser).callonMapType1,
				expr: &seqExpr{
					pos: position{line: 222, col: 12, offset: 4593},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 222, col: 12, offset: 4593},
							val:        "map",
							ignoreCase: false,
							want:       "\"map\"",
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 18, offset: 4599},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 222, col: 20, offset: 4601},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 24, offset: 4605},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 222, col: 26, offset: 4607},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 30, offset: 4611},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 35, offset: 4616},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 222, col: 37, offset: 4618},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 41, offset: 4622},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 222, col: 43, offset: 4624},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 49, offset: 4630},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Statement",
			pos:  position{line: 226, col: 1, offset: 4699},
			expr: &actionExpr{
				pos: position{line: 226, col: 14, offset: 4712},
				run: (*parser).callonStatement1,
				expr: &labeledExpr{
					pos:   position{line: 226, col: 14, offset: 4712},
					label: "stmt",
					expr: &choiceExpr{
						pos: position{line: 226, col: 20, offset: 4718},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 226, col: 20, offset: 4718},
								name: "comment",
							},
							&ruleRefExpr{
								pos:  position{line: 226, col: 30, offset: 4728},
								name: "VarStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 226, col: 45, offset: 4743},
								name: "ReturnStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 226, col: 63, offset: 4761},
								name: "DeclarationStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 226, col: 86, offset: 4784},
								name: "AssignmentOperatorStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 226, col: 116, offset: 4814},
								name: "AssignmentStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 226, col: 138, offset: 4836},
								name: "IfStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 226, col: 152, offset: 4850},
								name: "ForStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 226, col: 167, offset: 4865},
								name: "PostfixStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 226, col: 186, offset: 4884},
								name: "ExprStatement",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SimpleStatement",
			pos:  position{line: 230, col: 1, offset: 4923},
			expr: &actionExpr{
				pos: position{line: 230, col: 20, offset: 4942},
				run: (*parser).callonSimpleStatement1,
				expr: &labeledExpr{
					pos:   position{line: 230, col: 20, offset: 4942},
					label: "stmt",
					expr: &choiceExpr{
						pos: position{line: 230, col: 26, offset: 4948},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 230, col: 26, offset: 4948},
								name: "VarStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 230, col: 41, offset: 4963},
								name: "DeclarationStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 230, col: 64, offset: 4986},
								name: "AssignmentOperatorStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 230, col: 94, offset: 5016},
								name: "AssignmentStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 230, col: 116, offset: 5038},
								name: "PostfixStatement",
							},
							&ruleRefExpr{
								pos:  position{line: 230, col: 135, offset: 5057},
								name: "ExprStatement",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VarStatement",
			pos:  position{line: 234, col: 1, offset: 5096},
			expr: &choiceExpr{
				pos: position{line: 234, col: 17, offset: 5112},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 234, col: 17, offset: 5112},
						run: (*parser).callonVarStatement2,
						expr: &seqExpr{
							pos: position{line: 234, col: 17, offset: 5112},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 234, col: 17, offset: 5112},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 234, col: 23, offset: 5118},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 234, col: 25, offset: 5120},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 234, col: 30, offset: 5125},
										name: "Identifier",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 234, col: 41, offset: 5136},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 234, col: 43, offset: 5138},
									label: "typ",
									expr: &zeroOrOneExpr{
										pos: position{line: 234, col: 47, offset: 5142},
										expr: &ruleRefExpr{
											pos:  position{line: 234, col: 47, offset: 5142},
											name: "Type",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 234, col: 53, offset: 5148},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 234, col: 55, offset: 5150},
									label: "exp",
									expr: &zeroOrOneExpr{
										pos: position{line: 234, col: 59, offset: 5154},
										expr: &ruleRefExpr{
											pos:  position{line: 234, col: 59, offset: 5154},
											name: "VarStatementExpr",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 246, col: 5, offset: 5440},
						run: (*parser).callonVarStatement16,
						expr: &seqExpr{
							pos: position{line: 246, col: 5, offset: 5440},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 246, col: 5, offset: 5440},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 246, col: 11, offset: 5446},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 246, col: 13, offset: 5448},
									name: "Expr",
								},
								&ruleRefExpr{
									pos:  position{line: 246, col: 18, offset: 5453},
									name: "_",
								},
								&zeroOrOneExpr{
									pos: position{line: 246, col: 20, offset: 5455},
									expr: &ruleRefExpr{
										pos:  position{line: 246, col: 20, offset: 5455},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 246, col: 26, offset: 5461},
									name: "_",
								},
								&zeroOrOneExpr{
									pos: position{line: 246, col: 28, offset: 5463},
									expr: &seqExpr{
										pos: position{line: 246, col: 29, offset: 5464},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 246, col: 29, offset: 5464},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&ruleRefExpr{
												pos:  position{line: 246, col: 33, offset: 5468},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 246, col: 35, offset: 5470},
												name: "Expr",
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VarStatementExpr",
			pos:  position{line: 250, col: 1, offset: 5589},
			expr: &actionExpr{
				pos: position{line: 250, col: 21, offset: 5609},
				run: (*parser).callonVarStatementExpr1,
				expr: &seqExpr{
					pos: position{line: 250, col: 21, offset: 5609},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 250, col: 21, offset: 5609},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 250, col: 25, offset: 5613},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 250, col: 27, offset: 5615},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 250, col: 31, offset: 5619},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 250, col: 36, offset: 5624},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VarDeclaration",
			pos:  position{line: 254, col: 1, offset: 5656},
			expr: &choiceExpr{
				pos: position{line: 254, col: 19, offset: 5674},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 254, col: 19, offset: 5674},
						run: (*parser).callonVarDeclaration2,
						expr: &seqExpr{
							pos: position{line: 254, col: 19, offset: 5674},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 254, col: 19, offset: 5674},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 254, col: 25, offset: 5680},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 254, col: 27, offset: 5682},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 254, col: 32, offset: 5687},
										name: "Identifier",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 254, col: 43, offset: 5698},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 254, col: 45, offset: 5700},
									label: "typ",
									expr: &zeroOrOneExpr{
										pos: position{line: 254, col: 49, offset: 5704},
										expr: &ruleRefExpr{
											pos:  position{line: 254, col: 49, offset: 5704},
											name: "Type",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 254, col: 55, offset: 5710},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 254, col: 57, offset: 5712},
									label: "exp",
									expr: &zeroOrOneExpr{
										pos: position{line: 254, col: 61, offset: 5716},
										expr: &ruleRefExpr{
											pos:  position{line: 254, col: 61, offset: 5716},
											name: "VarDeclarationExpr",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 266, col: 5, offset: 6005},
						run: (*parser).callonVarDeclaration16,
						expr: &seqExpr{
							pos: position{line: 266, col: 5, offset: 6005},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 266, col: 5, offset: 6005},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 266, col: 11, offset: 6011},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 266, col: 13, offset: 6013},
									name: "Expr",
								},
								&ruleRefExpr{
									pos:  position{line: 266, col: 18, offset: 6018},
									name: "_",
								},
								&zeroOrOneExpr{
									pos: position{line: 266, col: 20, offset: 6020},
									expr: &ruleRefExpr{
										pos:  position{line: 266, col: 20, offset: 6020},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 266, col: 26, offset: 6026},
									name: "_",
								},
								&zeroOrOneExpr{
									pos: position{line: 266, col: 28, offset: 6028},
									expr: &seqExpr{
										pos: position{line: 266, col: 29, offset: 6029},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 266, col: 29, offset: 6029},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&ruleRefExpr{
												pos:  position{line: 266, col: 33, offset: 6033},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 266, col: 35, offset: 6035},
												name: "Expr",
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VarDeclarationExpr",
			pos:  position{line: 270, col: 1, offset: 6154},
			expr: &actionExpr{
				pos: position{line: 270, col: 23, offset: 6176},
				run: (*parser).callonVarDeclarationExpr1,
				expr: &seqExpr{
					pos: position{line: 270, col: 23, offset: 6176},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 270, col: 23, offset: 6176},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 27, offset: 6180},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 270, col: 29, offset: 6182},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 33, offset: 6186},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 38, offset: 6191},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DeclarationStatement",
			pos:  position{line: 274, col: 1, offset: 6223},
			expr: &choiceExpr{
				pos: position{line: 274, col: 25, offset: 6247},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 274, col: 25, offset: 6247},
						run: (*parser).callonDeclarationStatement2,
						expr: &seqExpr{
							pos: position{line: 274, col: 25, offset: 6247},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 274, col: 25, offset: 6247},
									label: "ident",
									expr: &ruleRefExpr{
										pos:  position{line: 274, col: 31, offset: 6253},
										name: "Identifier",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 274, col: 42, offset: 6264},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 274, col: 44, offset: 6266},
									val:        ":=",
									ignoreCase: false,
									want:       "\":=\"",
								},
								&ruleRefExpr{
									pos:  position{line: 274, col: 49, offset: 6271},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 274, col: 51, offset: 6273},
									label: "exp",
									expr: &ruleRefExpr{
										pos:  position{line: 274, col: 55, offset: 6277},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 281, col: 5, offset: 6401},
						run: (*parser).callonDeclarationStatement11,
						expr: &seqExpr{
							pos: position{line: 281, col: 5, offset: 6401},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 281, col: 5, offset: 6401},
									name: "Expr",
								},
								&ruleRefExpr{
									pos:  position{line: 281, col: 10, offset: 6406},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 281, col: 12, offset: 6408},
									val:        ":=",
									ignoreCase: false,
									want:       "\":=\"",
								},
								&ruleRefExpr{
									pos:  position{line: 281, col: 17, offset: 6413},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 281, col: 19, offset: 6415},
									name: "Expr",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AssignmentStatement",
			pos:  position{line: 285, col: 1, offset: 6515},
			expr: &actionExpr{
				pos: position{line: 285, col: 24, offset: 6538},
				run: (*parser).callonAssignmentStatement1,
				expr: &seqExpr{
					pos: position{line: 285, col: 24, offset: 6538},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 285, col: 24, offset: 6538},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 29, offset: 6543},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 285, col: 34, offset: 6548},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 285, col: 36, offset: 6550},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 285, col: 40, offset: 6554},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 285, col: 42, offset: 6556},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 48, offset: 6562},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AssignmentOperatorStatement",
			pos:  position{line: 294, col: 1, offset: 6680},
			expr: &actionExpr{
				pos: position{line: 294, col: 32, offset: 6711},
				run: (*parser).callonAssignmentOperatorStatement1,
				expr: &seqExpr{
					pos: position{line: 294, col: 32, offset: 6711},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 294, col: 32, offset: 6711},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 37, offset: 6716},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 294, col: 42, offset: 6721},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 294, col: 44, offset: 6723},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 294, col: 48, offset: 6727},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 294, col: 48, offset: 6727},
										val:        "+=",
										ignoreCase: false,
										want:       "\"+=\"",
									},
									&litMatcher{
										pos:        position{line: 294, col: 55, offset: 6734},
										val:        "-=",
										ignoreCase: false,
										want:       "\"-=\"",
									},
									&litMatcher{
										pos:        position{line: 294, col: 62, offset: 6741},
										val:        "*=",
										ignoreCase: false,
										want:       "\"*=\"",
									},
									&litMatcher{
										pos:        position{line: 294, col: 69, offset: 6748},
										val:        "/=",
										ignoreCase: false,
										want:       "\"/=\"",
									},
									&litMatcher{
										pos:        position{line: 294, col: 76, offset: 6755},
										val:        "%=",
										ignoreCase: false,
										want:       "\"%=\"",
									},
									&litMatcher{
										pos:        position{line: 294, col: 83, offset: 6762},
										val:        "**=",
										ignoreCase: false,
										want:       "\"**=\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 294, col: 90, offset: 6769},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 294, col: 92, offset: 6771},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 98, offset: 6777},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ExprStatement",
			pos:  position{line: 304, col: 1, offset: 6939},
			expr: &actionExpr{
				pos: position{line: 304, col: 18, offset: 6956},
				run: (*parser).callonExprStatement1,
				expr: &labeledExpr{
					pos:   position{line: 304, col: 18, offset: 6956},
					label: "exp",
					expr: &ruleRefExpr{
						pos:  position{line: 304, col: 22, offset: 6960},
						name: "Expr",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PostfixStatement",
			pos:  position{line: 312, col: 1, offset: 7048},
			expr: &actionExpr{
				pos: position{line: 312, col: 21, offset: 7068},
				run: (*parser).callonPostfixStatement1,
				expr: &seqExpr{
					pos: position{line: 312, col: 21, offset: 7068},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 312, col: 21, offset: 7068},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 312, col: 25, offset: 7072},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 312, col: 30, offset: 7077},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 312, col: 32, offset: 7079},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 312, col: 36, offset: 7083},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 312, col: 36, offset: 7083},
										val:        "++",
										ignoreCase: false,
										want:       "\"++\"",
									},
									&litMatcher{
										pos:        position{line: 312, col: 43, offset: 7090},
										val:        "--",
										ignoreCase: false,
										want:       "\"--\"",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IfStatement",
			pos:  position{line: 321, col: 1, offset: 7219},
			expr: &actionExpr{
				pos: position{line: 321, col: 16, offset: 7234},
				run: (*parser).callonIfStatement1,
				expr: &seqExpr{
					pos: position{line: 321, col: 16, offset: 7234},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 321, col: 16, offset: 7234},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&ruleRefExpr{
							pos:  position{line: 321, col: 21, offset: 7239},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 321, col: 23, offset: 7241},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 321, col: 27, offset: 7245},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 321, col: 32, offset: 7250},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 321, col: 34, offset: 7252},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 321, col: 38, offset: 7256},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 321, col: 43, offset: 7261},
								expr: &ruleRefExpr{
									pos:  position{line: 321, col: 43, offset: 7261},
									name: "StatementList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 321, col: 58, offset: 7276},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&ruleRefExpr{
							pos:  position{line: 321, col: 62, offset: 7280},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 321, col: 64, offset: 7282},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 321, col: 69, offset: 7287},
								expr: &choiceExpr{
									pos: position{line: 321, col: 70, offset: 7288},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 321, col: 70, offset: 7288},
											name: "ElseIfStatement",
										},
										&ruleRefExpr{
											pos:  position{line: 321, col: 88, offset: 7306},
											name: "ElseStatement",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseIfStatement",
			pos:  position{line: 331, col: 1, offset: 7491},
			expr: &actionExpr{
				pos: position{line: 331, col: 20, offset: 7510},
				run: (*parser).callonElseIfStatement1,
				expr: &seqExpr{
					pos: position{line: 331, col: 20, offset: 7510},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 331, col: 20, offset: 7510},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 27, offset: 7517},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 331, col: 29, offset: 7519},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 34, offset: 7524},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 331, col: 36, offset: 7526},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 40, offset: 7530},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 45, offset: 7535},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 331, col: 47, offset: 7537},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 331, col: 51, offset: 7541},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 331, col: 56, offset: 7546},
								expr: &ruleRefExpr{
									pos:  position{line: 331, col: 56, offset: 7546},
									name: "StatementList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 331, col: 71, offset: 7561},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 75, offset: 7565},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 331, col: 77, offset: 7567},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 331, col: 82, offset: 7572},
								expr: &choiceExpr{
									pos: position{line: 331, col: 83, offset: 7573},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 331, col: 83, offset: 7573},
											name: "ElseIfStatement",
										},
										&ruleRefExpr{
											pos:  position{line: 331, col: 101, offset: 7591},
											name: "ElseStatement",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseStatement",
			pos:  position{line: 341, col: 1, offset: 7780},
			expr: &actionExpr{
				pos: position{line: 341, col: 18, offset: 7797},
				run: (*parser).callonElseStatement1,
				expr: &seqExpr{
					pos: position{line: 341, col: 18, offset: 7797},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 341, col: 18, offset: 7797},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&ruleRefExpr{
							pos:  position{line: 341, col: 25, offset: 7804},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 341, col: 27, offset: 7806},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 341, col: 31, offset: 7810},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 341, col: 36, offset: 7815},
								expr: &ruleRefExpr{
									pos:  position{line: 341, col: 36, offset: 7815},
									name: "StatementList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 341, col: 51, offset: 7830},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 341, col: 53, offset: 7832},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForStatement",
			pos:  position{line: 350, col: 1, offset: 7937},
			expr: &actionExpr{
				pos: position{line: 350, col: 17, offset: 7953},
				run: (*parser).callonForStatement1,
				expr: &seqExpr{
					pos: position{line: 350, col: 17, offset: 7953},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 350, col: 17, offset: 7953},
							val:        "for",
							ignoreCase: false,
							want:       "\"for\"",
						},
						&ruleRefExpr{
							pos:  position{line: 350, col: 23, offset: 7959},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 25, offset: 7961},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 350, col: 32, offset: 7968},
								expr: &ruleRefExpr{
									pos:  position{line: 350, col: 32, offset: 7968},
									name: "ForStatementStatements",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 350, col: 56, offset: 7992},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 350, col: 58, offset: 7994},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 350, col: 62, offset: 7998},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 65, offset: 8001},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 350, col: 70, offset: 8006},
								expr: &ruleRefExpr{
									pos:  position{line: 350, col: 70, offset: 8006},
									name: "StatementList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 350, col: 85, offset: 8021},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForStatementStatements",
			pos:  position{line: 365, col: 1, offset: 8264},
			expr: &actionExpr{
				pos: position{line: 365, col: 27, offset: 8290},
				run: (*parser).callonForStatementStatements1,
				expr: &seqExpr{
					pos: position{line: 365, col: 27, offset: 8290},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 365, col: 27, offset: 8290},
							label: "init",
							expr: &zeroOrOneExpr{
								pos: position{line: 365, col: 32, offset: 8295},
								expr: &ruleRefExpr{
									pos:  position{line: 365, col: 32, offset: 8295},
									name: "SimpleStatement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 365, col: 49, offset: 8312},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 365, col: 51, offset: 8314},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
						&ruleRefExpr{
							pos:  position{line: 365, col: 55, offset: 8318},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 365, col: 57, offset: 8320},
							label: "cond",
							expr: &zeroOrOneExpr{
								pos: position{line: 365, col: 62, offset: 8325},
								expr: &ruleRefExpr{
									pos:  position{line: 365, col: 62, offset: 8325},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 365, col: 68, offset: 8331},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 365, col: 70, offset: 8333},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
						&ruleRefExpr{
							pos:  position{line: 365, col: 74, offset: 8337},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 365, col: 76, offset: 8339},
							label: "step",
							expr: &zeroOrOneExpr{
								pos: position{line: 365, col: 81, offset: 8344},
								expr: &ruleRefExpr{
									pos:  position{line: 365, col: 81, offset: 8344},
									name: "SimpleStatement",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ReturnStatement",
			pos:  position{line: 373, col: 1, offset: 8500},
			expr: &actionExpr{
				pos: position{line: 373, col: 20, offset: 8519},
				run: (*parser).callonReturnStatement1,
				expr: &seqExpr{
					pos: position{line: 373, col: 20, offset: 8519},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 373, col: 20, offset: 8519},
							val:        "return",
							ignoreCase: false,
							want:       "\"return\"",
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 29, offset: 8528},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 373, col: 31, offset: 8530},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 373, col: 36, offset: 8535},
								expr: &ruleRefExpr{
									pos:  position{line: 373, col: 36, offset: 8535},
									name: "Expr",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ExternFuncDeclaration",
			pos:  position{line: 381, col: 1, offset: 8633},
			expr: &actionExpr{
				pos: position{line: 381, col: 26, offset: 8658},
				run: (*parser).callonExternFuncDeclaration1,
				expr: &seqExpr{
					pos: position{line: 381, col: 26, offset: 8658},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 381, col: 26, offset: 8658},
							val:        "extern",
							ignoreCase: false,
							want:       "\"extern\"",
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 35, offset: 8667},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 381, col: 37, offset: 8669},
							val:        "func",
							ignoreCase: false,
							want:       "\"func\"",
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 44, offset: 8676},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 381, col: 46, offset: 8678},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 51, offset: 8683},
								name: "Identifier",
							},
						},
						&litMatcher{
							pos:        position{line: 381, col: 62, offset: 8694},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 381, col: 66, offset: 8698},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 381, col: 73, offset: 8705},
								expr: &ruleRefExpr{
									pos:  position{line: 381, col: 73, offset: 8705},
									name: "ParameterList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 381, col: 88, offset: 8720},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 92, offset: 8724},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 381, col: 94, offset: 8726},
							label: "ret",
							expr: &zeroOrOneExpr{
								pos: position{line: 381, col: 98, offset: 8730},
								expr: &ruleRefExpr{
									pos:  position{line: 381, col: 98, offset: 8730},
									name: "Type",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 104, offset: 8736},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FunctionDeclaration",
			pos:  position{line: 391, col: 1, offset: 8915},
			expr: &actionExpr{
				pos: position{line: 391, col: 24, offset: 8938},
				run: (*parser).callonFunctionDeclaration1,
				expr: &seqExpr{
					pos: position{line: 391, col: 24, offset: 8938},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 391, col: 24, offset: 8938},
							val:        "func",
							ignoreCase: false,
							want:       "\"func\"",
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 31, offset: 8945},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 33, offset: 8947},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 38, offset: 8952},
								name: "Identifier",
							},
						},
						&litMatcher{
							pos:        position{line: 391, col: 49, offset: 8963},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 53, offset: 8967},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 391, col: 60, offset: 8974},
								expr: &ruleRefExpr{
									pos:  position{line: 391, col: 60, offset: 8974},
									name: "ParameterList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 391, col: 75, offset: 8989},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 79, offset: 8993},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 81, offset: 8995},
							label: "ret",
							expr: &zeroOrOneExpr{
								pos: position{line: 391, col: 85, offset: 8999},
								expr: &ruleRefExpr{
									pos:  position{line: 391, col: 85, offset: 8999},
									name: "Type",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 91, offset: 9005},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 391, col: 93, offset: 9007},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 97, offset: 9011},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 100, offset: 9014},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 391, col: 105, offset: 9019},
								expr: &ruleRefExpr{
									pos:  position{line: 391, col: 105, offset: 9019},
									name: "StatementList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 391, col: 120, offset: 9034},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FunctionType",
			pos:  position{line: 402, col: 1, offset: 9250},
			expr: &actionExpr{
				pos: position{line: 402, col: 17, offset: 9266},
				run: (*parser).callonFunctionType1,
				expr: &seqExpr{
					pos: position{line: 402, col: 17, offset: 9266},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 402, col: 17, offset: 9266},
							val:        "func",
							ignoreCase: false,
							want:       "\"func\"",
						},
						&ruleRefExpr{
							pos:  position{line: 402, col: 24, offset: 9273},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 402, col: 26, offset: 9275},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 402, col: 30, offset: 9279},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 402, col: 38, offset: 9287},
								expr: &ruleRefExpr{
									pos:  position{line: 402, col: 38, offset: 9287},
									name: "ParameterList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 402, col: 53, offset: 9302},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 402, col: 57, offset: 9306},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 402, col: 59, offset: 9308},
							label: "ret",
							expr: &zeroOrOneExpr{
								pos: position{line: 402, col: 63, offset: 9312},
								expr: &ruleRefExpr{
									pos:  position{line: 402, col: 63, offset: 9312},
									name: "Type",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MethodDeclaration",
			pos:  position{line: 411, col: 1, offset: 9449},
			expr: &actionExpr{
				pos: position{line: 411, col: 22, offset: 9470},
				run: (*parser).callonMethodDeclaration1,
				expr: &seqExpr{
					pos: position{line: 411, col: 22, offset: 9470},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 411, col: 22, offset: 9470},
							val:        "func",
							ignoreCase: false,
							want:       "\"func\"",
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 29, offset: 9477},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 411, col: 31, offset: 9479},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 35, offset: 9483},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 411, col: 37, offset: 9485},
							label: "receiver",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 46, offset: 9494},
								name: "Receiver",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 55, offset: 9503},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 411, col: 57, offset: 9505},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 61, offset: 9509},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 411, col: 63, offset: 9511},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 68, offset: 9516},
								name: "Identifier",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 79, offset: 9527},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 411, col: 83, offset: 9531},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 411, col: 90, offset: 9538},
								expr: &ruleRefExpr{
									pos:  position{line: 411, col: 90, offset: 9538},
									name: "ParameterList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 105, offset: 9553},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 109, offset: 9557},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 411, col: 111, offset: 9559},
							label: "ret",
							expr: &zeroOrOneExpr{
								pos: position{line: 411, col: 115, offset: 9563},
								expr: &ruleRefExpr{
									pos:  position{line: 411, col: 115, offset: 9563},
									name: "Type",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 121, offset: 9569},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 411, col: 123, offset: 9571},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 127, offset: 9575},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 411, col: 130, offset: 9578},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 411, col: 135, offset: 9583},
								expr: &ruleRefExpr{
									pos:  position{line: 411, col: 135, offset: 9583},
									name: "StatementList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 150, offset: 9598},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StatementList",
			pos:  position{line: 423, col: 1, offset: 9846},
			expr: &actionExpr{
				pos: position{line: 423, col: 18, offset: 9863},
				run: (*parser).callonStatementList1,
				expr: &seqExpr{
					pos: position{line: 423, col: 18, offset: 9863},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 423, col: 18, offset: 9863},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 423, col: 21, offset: 9866},
							label: "stmt",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 26, offset: 9871},
								name: "Statement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 423, col: 36, offset: 9881},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 423, col: 39, offset: 9884},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 423, col: 44, offset: 9889},
								expr: &ruleRefExpr{
									pos:  position{line: 423, col: 44, offset: 9889},
									name: "StatementList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 423, col: 59, offset: 9904},
							name: "__",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Receiver",
			pos:  position{line: 433, col: 1, offset: 10053},
			expr: &choiceExpr{
				pos: position{line: 433, col: 13, offset: 10065},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 433, col: 13, offset: 10065},
						name: "ParameterNamed",
					},
					&ruleRefExpr{
						pos:  position{line: 433, col: 30, offset: 10082},
						name: "ParameterUnnamed",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParameterUnnamed",
			pos:  position{line: 435, col: 1, offset: 10100},
			expr: &actionExpr{
				pos: position{line: 435, col: 21, offset: 10120},
				run: (*parser).callonParameterUnnamed1,
				expr: &labeledExpr{
					pos:   position{line: 435, col: 21, offset: 10120},
					label: "typ",
					expr: &ruleRefExpr{
						pos:  position{line: 435, col: 25, offset: 10124},
						name: "Type",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParameterUntyped",
			pos:  position{line: 443, col: 1, offset: 10206},
			expr: &actionExpr{
				pos: position{line: 443, col: 21, offset: 10226},
				run: (*parser).callonParameterUntyped1,
				expr: &labeledExpr{
					pos:   position{line: 443, col: 21, offset: 10226},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 443, col: 26, offset: 10231},
						name: "Identifier",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParameterNamed",
			pos:  position{line: 451, col: 1, offset: 10335},
			expr: &actionExpr{
				pos: position{line: 451, col: 19, offset: 10353},
				run: (*parser).callonParameterNamed1,
				expr: &seqExpr{
					pos: position{line: 451, col: 19, offset: 10353},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 451, col: 19, offset: 10353},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 24, offset: 10358},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 451, col: 35, offset: 10369},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 451, col: 37, offset: 10371},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 41, offset: 10375},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParameterList",
			pos:  position{line: 460, col: 1, offset: 10495},
			expr: &choiceExpr{
				pos: position{line: 460, col: 18, offset: 10512},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 460, col: 18, offset: 10512},
						run: (*parser).callonParameterList2,
						expr: &andExpr{
							pos: position{line: 460, col: 18, offset: 10512},
							expr: &litMatcher{
								pos:        position{line: 460, col: 20, offset: 10514},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
					&actionExpr{
						pos: position{line: 463, col: 5, offset: 10576},
						run: (*parser).callonParameterList5,
						expr: &seqExpr{
							pos: position{line: 463, col: 5, offset: 10576},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 463, col: 5, offset: 10576},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 463, col: 7, offset: 10578},
									label: "param",
									expr: &ruleRefExpr{
										pos:  position{line: 463, col: 13, offset: 10584},
										name: "ParameterUnnamed",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 463, col: 30, offset: 10601},
									name: "_",
								},
								&andExpr{
									pos: position{line: 463, col: 32, offset: 10603},
									expr: &litMatcher{
										pos:        position{line: 463, col: 33, offset: 10604},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 466, col: 5, offset: 10699},
						run: (*parser).callonParameterList13,
						expr: &seqExpr{
							pos: position{line: 466, col: 5, offset: 10699},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 466, col: 5, offset: 10699},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 466, col: 7, offset: 10701},
									label: "param",
									expr: &ruleRefExpr{
										pos:  position{line: 466, col: 13, offset: 10707},
										name: "ParameterListNamedParameter",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 466, col: 41, offset: 10735},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 466, col: 43, offset: 10737},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 466, col: 48, offset: 10742},
										expr: &ruleRefExpr{
											pos:  position{line: 466, col: 48, offset: 10742},
											name: "ParameterListComma",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 475, col: 5, offset: 11075},
						run: (*parser).callonParameterList22,
						expr: &seqExpr{
							pos: position{line: 475, col: 5, offset: 11075},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 475, col: 5, offset: 11075},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 475, col: 7, offset: 11077},
									label: "param",
									expr: &ruleRefExpr{
										pos:  position{line: 475, col: 13, offset: 11083},
										name: "ParameterListUnnamedParameter",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 475, col: 43, offset: 11113},
									name: "_",
								},
								&notExpr{
									pos: position{line: 475, col: 45, offset: 11115},
									expr: &ruleRefExpr{
										pos:  position{line: 475, col: 46, offset: 11116},
										name: "Identifier",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 475, col: 57, offset: 11127},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 475, col: 59, offset: 11129},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 475, col: 64, offset: 11134},
										expr: &ruleRefExpr{
											pos:  position{line: 475, col: 64, offset: 11134},
											name: "ParameterListComma",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParameterListComma",
			pos:  position{line: 486, col: 1, offset: 11468},
			expr: &actionExpr{
				pos: position{line: 486, col: 23, offset: 11490},
				run: (*parser).callonParameterListComma1,
				expr: &seqExpr{
					pos: position{line: 486, col: 23, offset: 11490},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 486, col: 23, offset: 11490},
							name: "c_",
						},
						&labeledExpr{
							pos:   position{line: 486, col: 26, offset: 11493},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 31, offset: 11498},
								name: "ParameterList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParameterListNamedParameter",
			pos:  position{line: 490, col: 1, offset: 11536},
			expr: &choiceExpr{
				pos: position{line: 490, col: 32, offset: 11567},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 490, col: 32, offset: 11567},
						name: "ParameterNamed",
					},
					&ruleRefExpr{
						pos:  position{line: 490, col: 49, offset: 11584},
						name: "ParameterUntyped",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParameterListUnnamedParameter",
			pos:  position{line: 492, col: 1, offset: 11602},
			expr: &ruleRefExpr{
				pos:  position{line: 492, col: 34, offset: 11635},
				name: "ParameterUnnamed",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Identifier",
			pos:  position{line: 494, col: 1, offset: 11653},
			expr: &actionExpr{
				pos: position{line: 494, col: 15, offset: 11667},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 494, col: 15, offset: 11667},
					exprs: []any{
						&notExpr{
							pos: position{line: 494, col: 15, offset: 11667},
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 16, offset: 11668},
								name: "Keyword",
							},
						},
						&charClassMatcher{
							pos:        position{line: 494, col: 24, offset: 11676},
							val:        "[_a-zA-Z]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 494, col: 33, offset: 11685},
							expr: &charClassMatcher{
								pos:        position{line: 494, col: 33, offset: 11685},
								val:        "[_a-zA-Z0-9]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParenthesizedExpr",
			pos:  position{line: 502, col: 1, offset: 11777},
			expr: &actionExpr{
				pos: position{line: 502, col: 22, offset: 11798},
				run: (*parser).callonParenthesizedExpr1,
				expr: &seqExpr{
					pos: position{line: 502, col: 22, offset: 11798},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 502, col: 22, offset: 11798},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 502, col: 26, offset: 11802},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 502, col: 28, offset: 11804},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 33, offset: 11809},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 502, col: 38, offset: 11814},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 502, col: 40, offset: 11816},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IntLiteral",
			pos:  position{line: 510, col: 1, offset: 11908},
			expr: &actionExpr{
				pos: position{line: 510, col: 15, offset: 11922},
				run: (*parser).callonIntLiteral1,
				expr: &seqExpr{
					pos: position{line: 510, col: 15, offset: 11922},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 510, col: 15, offset: 11922},
							expr: &litMatcher{
								pos:        position{line: 510, col: 15, offset: 11922},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&choiceExpr{
							pos: position{line: 510, col: 22, offset: 11929},
							alternatives: []any{
								&oneOrMoreExpr{
									pos: position{line: 510, col: 22, offset: 11929},
									expr: &charClassMatcher{
										pos:        position{line: 510, col: 22, offset: 11929},
										val:        "[0-9_]",
										chars:      []rune{'_'},
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&seqExpr{
									pos: position{line: 510, col: 33, offset: 11940},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 510, col: 33, offset: 11940},
											val:        "0x",
											ignoreCase: false,
											want:       "\"0x\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 510, col: 38, offset: 11945},
											expr: &charClassMatcher{
												pos:        position{line: 510, col: 38, offset: 11945},
												val:        "[0-9a-f_]",
												chars:      []rune{'_'},
												ranges:     []rune{'0', '9', 'a', 'f'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 510, col: 53, offset: 11960},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 510, col: 53, offset: 11960},
											val:        "0o",
											ignoreCase: false,
											want:       "\"0o\"",
										},
										&charClassMatcher{
											pos:        position{line: 510, col: 58, offset: 11965},
											val:        "[0-7_]",
											chars:      []rune{'_'},
											ranges:     []rune{'0', '7'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&seqExpr{
									pos: position{line: 510, col: 69, offset: 11976},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 510, col: 69, offset: 11976},
											val:        "0b",
											ignoreCase: false,
											want:       "\"0b\"",
										},
										&charClassMatcher{
											pos:        position{line: 510, col: 74, offset: 11981},
											val:        "[0-1_]",
											chars:      []rune{'_'},
											ranges:     []rune{'0', '1'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 523, col: 1, offset: 12155},
			expr: &actionExpr{
				pos: position{line: 523, col: 17, offset: 12171},
				run: (*parser).callonFloatLiteral1,
				expr: &seqExpr{
					pos: position{line: 523, col: 17, offset: 12171},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 523, col: 17, offset: 12171},
							expr: &litMatcher{
								pos:        position{line: 523, col: 17, offset: 12171},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&seqExpr{
							pos: position{line: 523, col: 25, offset: 12179},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 523, col: 25, offset: 12179},
									expr: &charClassMatcher{
										pos:        position{line: 523, col: 25, offset: 12179},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 523, col: 31, offset: 12185},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 523, col: 34, offset: 12188},
									expr: &charClassMatcher{
										pos:        position{line: 523, col: 34, offset: 12188},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StringLiteral",
			pos:  position{line: 537, col: 1, offset: 12363},
			expr: &actionExpr{
				pos: position{line: 537, col: 18, offset: 12380},
				run: (*parser).callonStringLiteral1,
				expr: &seqExpr{
					pos: position{line: 537, col: 18, offset: 12380},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 537, col: 18, offset: 12380},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 537, col: 22, offset: 12384},
							expr: &choiceExpr{
								pos: position{line: 537, col: 24, offset: 12386},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 537, col: 24, offset: 12386},
										exprs: []any{
											&notExpr{
												pos: position{line: 537, col: 24, offset: 12386},
												expr: &ruleRefExpr{
													pos:  position{line: 537, col: 25, offset: 12387},
													name: "EscapedChar",
												},
											},
											&anyMatcher{
												line: 537, col: 37, offset: 12399,
											},
										},
									},
									&seqExpr{
										pos: position{line: 537, col: 41, offset: 12403},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 537, col: 41, offset: 12403},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&ruleRefExpr{
												pos:  position{line: 537, col: 46, offset: 12408},
												name: "EscapeSequence",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 537, col: 64, offset: 12426},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BoolLiteral",
			pos:  position{line: 551, col: 1, offset: 12678},
			expr: &actionExpr{
				pos: position{line: 551, col: 16, offset: 12693},
				run: (*parser).callonBoolLiteral1,
				expr: &choiceExpr{
					pos: position{line: 551, col: 17, offset: 12694},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 551, col: 17, offset: 12694},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&litMatcher{
							pos:        position{line: 551, col: 26, offset: 12703},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IdentifierExpr",
			pos:  position{line: 559, col: 1, offset: 12806},
			expr: &actionExpr{
				pos: position{line: 559, col: 19, offset: 12824},
				run: (*parser).callonIdentifierExpr1,
				expr: &labeledExpr{
					pos:   position{line: 559, col: 19, offset: 12824},
					label: "ident",
					expr: &ruleRefExpr{
						pos:  position{line: 559, col: 25, offset: 12830},
						name: "Identifier",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MaybeCallExpr",
			pos:  position{line: 567, col: 1, offset: 12939},
			expr: &choiceExpr{
				pos: position{line: 567, col: 18, offset: 12956},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 567, col: 18, offset: 12956},
						name: "CallExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 567, col: 29, offset: 12967},
						name: "IdentifierExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "CallExpr",
			pos:  position{line: 569, col: 1, offset: 12983},
			expr: &actionExpr{
				pos: position{line: 569, col: 13, offset: 12995},
				run: (*parser).callonCallExpr1,
				expr: &seqExpr{
					pos: position{line: 569, col: 13, offset: 12995},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 569, col: 13, offset: 12995},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 17, offset: 12999},
								name: "TermExpr",
							},
						},
						&litMatcher{
							pos:        position{line: 569, col: 26, offset: 13008},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 30, offset: 13012},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 569, col: 33, offset: 13015},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 569, col: 38, offset: 13020},
								expr: &ruleRefExpr{
									pos:  position{line: 569, col: 38, offset: 13020},
									name: "CallArgumentList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 56, offset: 13038},
							name: "ce_",
						},
						&litMatcher{
							pos:        position{line: 569, col: 60, offset: 13042},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "CallArgumentList",
			pos:  position{line: 584, col: 1, offset: 13220},
			expr: &actionExpr{
				pos: position{line: 584, col: 21, offset: 13240},
				run: (*parser).callonCallArgumentList1,
				expr: &seqExpr{
					pos: position{line: 584, col: 21, offset: 13240},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 584, col: 21, offset: 13240},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 584, col: 23, offset: 13242},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 27, offset: 13246},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 584, col: 32, offset: 13251},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 584, col: 34, offset: 13253},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 584, col: 39, offset: 13258},
								expr: &ruleRefExpr{
									pos:  position{line: 584, col: 39, offset: 13258},
									name: "CallArgumentListComma",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CallArgumentListComma",
			pos:  position{line: 588, col: 1, offset: 13354},
			expr: &actionExpr{
				pos: position{line: 588, col: 26, offset: 13379},
				run: (*parser).callonCallArgumentListComma1,
				expr: &seqExpr{
					pos: position{line: 588, col: 26, offset: 13379},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 588, col: 26, offset: 13379},
							name: "c_",
						},
						&labeledExpr{
							pos:   position{line: 588, col: 29, offset: 13382},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 34, offset: 13387},
								name: "CallArgumentList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DotExpr",
			pos:  position{line: 592, col: 1, offset: 13428},
			expr: &actionExpr{
				pos: position{line: 592, col: 12, offset: 13439},
				run: (*parser).callonDotExpr1,
				expr: &seqExpr{
					pos: position{line: 592, col: 12, offset: 13439},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 592, col: 12, offset: 13439},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 16, offset: 13443},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 592, col: 21, offset: 13448},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 592, col: 25, offset: 13452},
							label: "ident",
							expr: &choiceExpr{
								pos: position{line: 592, col: 32, offset: 13459},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 592, col: 32, offset: 13459},
										name: "Identifier",
									},
									&ruleRefExpr{
										pos:  position{line: 592, col: 45, offset: 13472},
										name: "TupleKey",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "IndexExpr",
			pos:  position{line: 601, col: 1, offset: 13586},
			expr: &actionExpr{
				pos: position{line: 601, col: 14, offset: 13599},
				run: (*parser).callonIndexExpr1,
				expr: &seqExpr{
					pos: position{line: 601, col: 14, offset: 13599},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 601, col: 14, offset: 13599},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 19, offset: 13604},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 601, col: 24, offset: 13609},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 601, col: 26, offset: 13611},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 601, col: 30, offset: 13615},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 601, col: 32, offset: 13617},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 38, offset: 13623},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 601, col: 43, offset: 13628},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 601, col: 45, offset: 13630},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "Expr",
			pos:  position{line: 610, col: 1, offset: 13733},
			expr: &ruleRefExpr{
				pos:  position{line: 610, col: 9, offset: 13741},
				name: "MaybeOrExpr",
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "ParenExpr",
			pos:  position{line: 612, col: 1, offset: 13754},
			expr: &choiceExpr{
				pos: position{line: 612, col: 14, offset: 13767},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 612, col: 14, offset: 13767},
						name: "Expr",
					},
					&ruleRefExpr{
						pos:  position{line: 612, col: 21, offset: 13774},
						name: "Type",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TermExpr",
			pos:  position{line: 614, col: 1, offset: 13780},
			expr: &choiceExpr{
				pos: position{line: 614, col: 13, offset: 13792},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 614, col: 13, offset: 13792},
						name: "UnaryExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 614, col: 25, offset: 13804},
						name: "IndexExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 614, col: 37, offset: 13816},
						name: "DotExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 614, col: 47, offset: 13826},
						name: "ParenthesizedExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 614, col: 67, offset: 13846},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 614, col: 82, offset: 13861},
						name: "IntLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 614, col: 95, offset: 13874},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 614, col: 111, offset: 13890},
						name: "BoolLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 614, col: 125, offset: 13904},
						name: "MaybeCallExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 614, col: 141, offset: 13920},
						name: "TupleExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 614, col: 153, offset: 13932},
						name: "ArrayExpr",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "MaybeExpExpr",
			pos:  position{line: 616, col: 1, offset: 13943},
			expr: &choiceExpr{
				pos: position{line: 616, col: 17, offset: 13959},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 616, col: 17, offset: 13959},
						name: "ExpExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 616, col: 27, offset: 13969},
						name: "TermExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "ExpExpr",
			pos:  position{line: 618, col: 1, offset: 13979},
			expr: &actionExpr{
				pos: position{line: 618, col: 12, offset: 13990},
				run: (*parser).callonExpExpr1,
				expr: &seqExpr{
					pos: position{line: 618, col: 12, offset: 13990},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 618, col: 12, offset: 13990},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 17, offset: 13995},
								name: "TermExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 26, offset: 14004},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 618, col: 28, offset: 14006},
							label: "op",
							expr: &litMatcher{
								pos:        position{line: 618, col: 32, offset: 14010},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 38, offset: 14016},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 618, col: 41, offset: 14019},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 47, offset: 14025},
								name: "MaybeExpExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "MaybeMulExpr",
			pos:  position{line: 628, col: 1, offset: 14181},
			expr: &choiceExpr{
				pos: position{line: 628, col: 17, offset: 14197},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 628, col: 17, offset: 14197},
						name: "MulExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 27, offset: 14207},
						name: "MaybeExpExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "MulExpr",
			pos:  position{line: 630, col: 1, offset: 14221},
			expr: &actionExpr{
				pos: position{line: 630, col: 12, offset: 14232},
				run: (*parser).callonMulExpr1,
				expr: &seqExpr{
					pos: position{line: 630, col: 12, offset: 14232},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 630, col: 12, offset: 14232},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 17, offset: 14237},
								name: "MaybeExpExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 30, offset: 14250},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 630, col: 32, offset: 14252},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 630, col: 36, offset: 14256},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 630, col: 36, offset: 14256},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
									&litMatcher{
										pos:        position{line: 630, col: 42, offset: 14262},
										val:        "/",
										ignoreCase: false,
										want:       "\"/\"",
									},
									&litMatcher{
										pos:        position{line: 630, col: 48, offset: 14268},
										val:        "%",
										ignoreCase: false,
										want:       "\"%\"",
									},
									&litMatcher{
										pos:        position{line: 630, col: 54, offset: 14274},
										val:        "<<",
										ignoreCase: false,
										want:       "\"<<\"",
									},
									&litMatcher{
										pos:        position{line: 630, col: 61, offset: 14281},
										val:        ">>",
										ignoreCase: false,
										want:       "\">>\"",
									},
									&litMatcher{
										pos:        position{line: 630, col: 68, offset: 14288},
										val:        "&",
										ignoreCase: false,
										want:       "\"&\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 73, offset: 14293},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 630, col: 76, offset: 14296},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 82, offset: 14302},
								name: "MaybeMulExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "MaybeAddExpr",
			pos:  position{line: 640, col: 1, offset: 14458},
			expr: &choiceExpr{
				pos: position{line: 640, col: 17, offset: 14474},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 640, col: 17, offset: 14474},
						name: "AddExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 640, col: 27, offset: 14484},
						name: "MaybeMulExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "AddExpr",
			pos:  position{line: 642, col: 1, offset: 14498},
			expr: &actionExpr{
				pos: position{line: 642, col: 12, offset: 14509},
				run: (*parser).callonAddExpr1,
				expr: &seqExpr{
					pos: position{line: 642, col: 12, offset: 14509},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 642, col: 12, offset: 14509},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 17, offset: 14514},
								name: "MaybeMulExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 642, col: 30, offset: 14527},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 642, col: 32, offset: 14529},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 642, col: 36, offset: 14533},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 642, col: 36, offset: 14533},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 642, col: 42, offset: 14539},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 642, col: 48, offset: 14545},
										val:        "|",
										ignoreCase: false,
										want:       "\"|\"",
									},
									&litMatcher{
										pos:        position{line: 642, col: 54, offset: 14551},
										val:        "^",
										ignoreCase: false,
										want:       "\"^\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 642, col: 59, offset: 14556},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 642, col: 62, offset: 14559},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 68, offset: 14565},
								name: "MaybeAddExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "MaybeCmpExpr",
			pos:  position{line: 652, col: 1, offset: 14721},
			expr: &choiceExpr{
				pos: position{line: 652, col: 17, offset: 14737},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 652, col: 17, offset: 14737},
						name: "CmpExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 652, col: 27, offset: 14747},
						name: "MaybeAddExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "CmpExpr",
			pos:  position{line: 654, col: 1, offset: 14761},
			expr: &actionExpr{
				pos: position{line: 654, col: 12, offset: 14772},
				run: (*parser).callonCmpExpr1,
				expr: &seqExpr{
					pos: position{line: 654, col: 12, offset: 14772},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 654, col: 12, offset: 14772},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 654, col: 17, offset: 14777},
								name: "MaybeAddExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 654, col: 30, offset: 14790},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 654, col: 32, offset: 14792},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 654, col: 36, offset: 14796},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 654, col: 36, offset: 14796},
										val:        "==",
										ignoreCase: false,
										want:       "\"==\"",
									},
									&litMatcher{
										pos:        position{line: 654, col: 43, offset: 14803},
										val:        "!=",
										ignoreCase: false,
										want:       "\"!=\"",
									},
									&litMatcher{
										pos:        position{line: 654, col: 50, offset: 14810},
										val:        ">=",
										ignoreCase: false,
										want:       "\">=\"",
									},
									&litMatcher{
										pos:        position{line: 654, col: 57, offset: 14817},
										val:        "<=",
										ignoreCase: false,
										want:       "\"<=\"",
									},
									&litMatcher{
										pos:        position{line: 654, col: 64, offset: 14824},
										val:        ">",
										ignoreCase: false,
										want:       "\">\"",
									},
									&litMatcher{
										pos:        position{line: 654, col: 70, offset: 14830},
										val:        "<",
										ignoreCase: false,
										want:       "\"<\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 654, col: 75, offset: 14835},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 654, col: 78, offset: 14838},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 654, col: 84, offset: 14844},
								name: "MaybeCmpExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "MaybeAndExpr",
			pos:  position{line: 664, col: 1, offset: 15000},
			expr: &choiceExpr{
				pos: position{line: 664, col: 17, offset: 15016},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 664, col: 17, offset: 15016},
						name: "AndExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 664, col: 27, offset: 15026},
						name: "MaybeCmpExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "AndExpr",
			pos:  position{line: 666, col: 1, offset: 15040},
			expr: &actionExpr{
				pos: position{line: 666, col: 12, offset: 15051},
				run: (*parser).callonAndExpr1,
				expr: &seqExpr{
					pos: position{line: 666, col: 12, offset: 15051},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 666, col: 12, offset: 15051},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 666, col: 17, offset: 15056},
								name: "MaybeCmpExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 666, col: 30, offset: 15069},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 666, col: 32, offset: 15071},
							label: "op",
							expr: &litMatcher{
								pos:        position{line: 666, col: 36, offset: 15075},
								val:        "&&",
								ignoreCase: false,
								want:       "\"&&\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 666, col: 42, offset: 15081},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 666, col: 45, offset: 15084},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 666, col: 51, offset: 15090},
								name: "MaybeCmpExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "MaybeOrExpr",
			pos:  position{line: 676, col: 1, offset: 15246},
			expr: &choiceExpr{
				pos: position{line: 676, col: 16, offset: 15261},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 676, col: 16, offset: 15261},
						name: "OrExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 676, col: 25, offset: 15270},
						name: "MaybeAndExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "OrExpr",
			pos:  position{line: 678, col: 1, offset: 15284},
			expr: &actionExpr{
				pos: position{line: 678, col: 11, offset: 15294},
				run: (*parser).callonOrExpr1,
				expr: &seqExpr{
					pos: position{line: 678, col: 11, offset: 15294},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 678, col: 11, offset: 15294},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 16, offset: 15299},
								name: "MaybeAndExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 29, offset: 15312},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 678, col: 31, offset: 15314},
							label: "op",
							expr: &litMatcher{
								pos:        position{line: 678, col: 35, offset: 15318},
								val:        "||",
								ignoreCase: false,
								want:       "\"||\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 41, offset: 15324},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 678, col: 44, offset: 15327},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 50, offset: 15333},
								name: "MaybeAndExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "UnaryExpr",
			pos:  position{line: 688, col: 1, offset: 15489},
			expr: &actionExpr{
				pos: position{line: 688, col: 14, offset: 15502},
				run: (*parser).callonUnaryExpr1,
				expr: &seqExpr{
					pos: position{line: 688, col: 14, offset: 15502},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 688, col: 14, offset: 15502},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 688, col: 18, offset: 15506},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 688, col: 18, offset: 15506},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 688, col: 24, offset: 15512},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 688, col: 30, offset: 15518},
										val:        "!",
										ignoreCase: false,
										want:       "\"!\"",
									},
									&litMatcher{
										pos:        position{line: 688, col: 36, offset: 15524},
										val:        "^",
										ignoreCase: false,
										want:       "\"^\"",
									},
									&litMatcher{
										pos:        position{line: 688, col: 42, offset: 15530},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
									&litMatcher{
										pos:        position{line: 688, col: 48, offset: 15536},
										val:        "&",
										ignoreCase: false,
										want:       "\"&\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 688, col: 53, offset: 15541},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 57, offset: 15545},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleExpr",
			pos:  position{line: 697, col: 1, offset: 15666},
			expr: &actionExpr{
				pos: position{line: 697, col: 14, offset: 15679},
				run: (*parser).callonTupleExpr1,
				expr: &seqExpr{
					pos: position{line: 697, col: 14, offset: 15679},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 697, col: 14, offset: 15679},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 697, col: 18, offset: 15683},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 697, col: 21, offset: 15686},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 697, col: 26, offset: 15691},
								expr: &ruleRefExpr{
									pos:  position{line: 697, col: 26, offset: 15691},
									name: "TupleArgumentList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 697, col: 45, offset: 15710},
							name: "ce_",
						},
						&litMatcher{
							pos:        position{line: 697, col: 49, offset: 15714},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleArgumentList",
			pos:  position{line: 707, col: 1, offset: 15826},
			expr: &actionExpr{
				pos: position{line: 707, col: 22, offset: 15847},
				run: (*parser).callonTupleArgumentList1,
				expr: &seqExpr{
					pos: position{line: 707, col: 22, offset: 15847},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 707, col: 22, offset: 15847},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 707, col: 24, offset: 15849},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 707, col: 28, offset: 15853},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 707, col: 33, offset: 15858},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 707, col: 35, offset: 15860},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 707, col: 40, offset: 15865},
								expr: &ruleRefExpr{
									pos:  position{line: 707, col: 40, offset: 15865},
									name: "TupleArgumentListComma",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TupleArgumentListComma",
			pos:  position{line: 711, col: 1, offset: 15962},
			expr: &actionExpr{
				pos: position{line: 711, col: 27, offset: 15988},
				run: (*parser).callonTupleArgumentListComma1,
				expr: &seqExpr{
					pos: position{line: 711, col: 27, offset: 15988},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 711, col: 27, offset: 15988},
							name: "c_",
						},
						&labeledExpr{
							pos:   position{line: 711, col: 30, offset: 15991},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 35, offset: 15996},
								name: "TupleArgumentList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArrayExpr",
			pos:  position{line: 715, col: 1, offset: 16038},
			expr: &actionExpr{
				pos: position{line: 715, col: 14, offset: 16051},
				run: (*parser).callonArrayExpr1,
				expr: &seqExpr{
					pos: position{line: 715, col: 14, offset: 16051},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 715, col: 14, offset: 16051},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 715, col: 18, offset: 16055},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 715, col: 21, offset: 16058},
							label: "length",
							expr: &choiceExpr{
								pos: position{line: 715, col: 29, offset: 16066},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 715, col: 29, offset: 16066},
										name: "IntLiteral",
									},
									&litMatcher{
										pos:        position{line: 715, col: 42, offset: 16079},
										val:        "...",
										ignoreCase: false,
										want:       "\"...\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 715, col: 49, offset: 16086},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 715, col: 52, offset: 16089},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&labeledExpr{
							pos:   position{line: 715, col: 56, offset: 16093},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 715, col: 60, offset: 16097},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 715, col: 65, offset: 16102},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 715, col: 69, offset: 16106},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 715, col: 72, offset: 16109},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 715, col: 77, offset: 16114},
								expr: &ruleRefExpr{
									pos:  position{line: 715, col: 77, offset: 16114},
									name: "ArrayArgumentList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 715, col: 96, offset: 16133},
							name: "ce_",
						},
						&litMatcher{
							pos:        position{line: 715, col: 100, offset: 16137},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArrayArgumentList",
			pos:  position{line: 735, col: 1, offset: 16437},
			expr: &actionExpr{
				pos: position{line: 735, col: 22, offset: 16458},
				run: (*parser).callonArrayArgumentList1,
				expr: &seqExpr{
					pos: position{line: 735, col: 22, offset: 16458},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 735, col: 22, offset: 16458},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 735, col: 24, offset: 16460},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 28, offset: 16464},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 735, col: 33, offset: 16469},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 735, col: 35, offset: 16471},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 735, col: 40, offset: 16476},
								expr: &ruleRefExpr{
									pos:  position{line: 735, col: 40, offset: 16476},
									name: "ArrayArgumentListComma",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArrayArgumentListComma",
			pos:  position{line: 739, col: 1, offset: 16573},
			expr: &actionExpr{
				pos: position{line: 739, col: 27, offset: 16599},
				run: (*parser).callonArrayArgumentListComma1,
				expr: &seqExpr{
					pos: position{line: 739, col: 27, offset: 16599},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 739, col: 27, offset: 16599},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 739, col: 31, offset: 16603},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 739, col: 34, offset: 16606},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 39, offset: 16611},
								name: "ArrayArgumentList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapedChar",
			pos:  position{line: 743, col: 1, offset: 16653},
			expr: &charClassMatcher{
				pos:        position{line: 743, col: 16, offset: 16668},
				val:        "[\\x00-\\x1f\"\\\\]",
				chars:      []rune{'"', '\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 745, col: 1, offset: 16684},
			expr: &choiceExpr{
				pos: position{line: 745, col: 19, offset: 16702},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 745, col: 19, offset: 16702},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 745, col: 38, offset: 16721},
						name: "UnicodeEscape",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 747, col: 1, offset: 16736},
			expr: &charClassMatcher{
				pos:        position{line: 747, col: 21, offset: 16756},
				val:        "[\"\\\\/bfnrt]",
				chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "c_",
			pos:  position{line: 749, col: 1, offset: 16769},
			expr: &choiceExpr{
				pos: position{line: 749, col: 7, offset: 16775},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 749, col: 7, offset: 16775},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 749, col: 7, offset: 16775},
								name: "_",
							},
							&seqExpr{
								pos: position{line: 749, col: 10, offset: 16778},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 749, col: 10, offset: 16778},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 749, col: 14, offset: 16782},
										name: "_",
									},
									&zeroOrOneExpr{
										pos: position{line: 749, col: 16, offset: 16784},
										expr: &litMatcher{
											pos:        position{line: 749, col: 16, offset: 16784},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 749, col: 23, offset: 16791},
								name: "_",
							},
						},
					},
					&actionExpr{
						pos: position{line: 749, col: 27, offset: 16795},
						run: (*parser).callonc_10,
						expr: &seqExpr{
							pos: position{line: 749, col: 27, offset: 16795},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 749, col: 27, offset: 16795},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 749, col: 29, offset: 16797},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ce_",
			pos:  position{line: 753, col: 1, offset: 16879},
			expr: &choiceExpr{
				pos: position{line: 753, col: 8, offset: 16886},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 753, col: 8, offset: 16886},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 753, col: 8, offset: 16886},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
							&ruleRefExpr{
								pos:  position{line: 753, col: 12, offset: 16890},
								name: "_",
							},
							&zeroOrOneExpr{
								pos: position{line: 753, col: 14, offset: 16892},
								expr: &litMatcher{
									pos:        position{line: 753, col: 14, offset: 16892},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 753, col: 20, offset: 16898},
								name: "__",
							},
						},
					},
					&actionExpr{
						pos: position{line: 753, col: 25, offset: 16903},
						run: (*parser).callonce_8,
						expr: &seqExpr{
							pos: position{line: 753, col: 25, offset: 16903},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 753, col: 25, offset: 16903},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 753, col: 27, offset: 16905},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&ruleRefExpr{
									pos:  position{line: 753, col: 32, offset: 16910},
									name: "__",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 755, col: 5, offset: 16991},
						name: "_",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name:        "__",
			displayName: "\"whitespace\"",
			pos:         position{line: 757, col: 1, offset: 16994},
			expr: &zeroOrMoreExpr{
				pos: position{line: 757, col: 20, offset: 17013},
				expr: &charClassMatcher{
					pos:        position{line: 757, col: 20, offset: 17013},
					val:        "[ \\n\\t\\r]",
					chars:      []rune{' ', '\n', '\t', '\r'},
					ignoreCase: false,
					inverted:   false,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name:        "_",
			displayName: "\"spaces\"",
			pos:         position{line: 758, col: 1, offset: 17024},
			expr: &zeroOrMoreExpr{
				pos: position{line: 758, col: 15, offset: 17038},
				expr: &charClassMatcher{
					pos:        position{line: 758, col: 15, offset: 17038},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "comment",
			pos:  position{line: 760, col: 1, offset: 17046},
			expr: &actionExpr{
				pos: position{line: 760, col: 12, offset: 17057},
				run: (*parser).calloncomment1,
				expr: &seqExpr{
					pos: position{line: 760, col: 12, offset: 17057},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 760, col: 12, offset: 17057},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 760, col: 17, offset: 17062},
							expr: &charClassMatcher{
								pos:        position{line: 760, col: 17, offset: 17062},
								val:        "[^\\n]",
								chars:      []rune{'\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 760, col: 24, offset: 17069},
							val:        "\n",
							ignoreCase: false,
							want:       "\"\\n\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "nl",
			pos:  position{line: 764, col: 1, offset: 17097},
			expr: &seqExpr{
				pos: position{line: 764, col: 7, offset: 17103},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 764, col: 7, offset: 17103},
						name: "_",
					},
					&choiceExpr{
						pos: position{line: 764, col: 10, offset: 17106},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 764, col: 10, offset: 17106},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
							&litMatcher{
								pos:        position{line: 764, col: 16, offset: 17112},
								val:        "\n",
								ignoreCase: false,
								want:       "\"\\n\"",
							},
							&litMatcher{
								pos:        position{line: 764, col: 23, offset: 17119},
								val:        "\r\n",
								ignoreCase: false,
								want:       "\"\\r\\n\"",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 764, col: 31, offset: 17127},
						name: "__",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EOF",
			pos:  position{line: 766, col: 1, offset: 17131},
			expr: &notExpr{
				pos: position{line: 766, col: 8, offset: 17138},
				expr: &anyMatcher{
					line: 766, col: 9, offset: 17139,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
	},
}

func (c *current) onFile1(pkg, decls any) (any, error) {
	return File{
		Package: pkg.(Package),

		Declarations: anyToSlice[Declaration](decls),
	}, nil
}

func (p *parser) callonFile1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["pkg"], stack["decls"])
}

func (c *current) onPackage1(name any) (any, error) {
	return Package{
		Name: name.(Identifier),
	}, nil
}

func (p *parser) callonPackage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPackage1(stack["name"])
}

func (c *current) onDeclaration1(decl any) (any, error) {
	return decl, nil
}

func (p *parser) callonDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeclaration1(stack["decl"])
}

func (c *current) onDirective1(name, args, decl any) (any, error) {
	return Directive{
		Name:        name.(Identifier),
		Args:        maybeSlice[any](args),
		Declaration: decl.(Declaration),

		Position: pos(c),
	}, nil
}

func (p *parser) callonDirective1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirective1(stack["name"], stack["args"], stack["decl"])
}

func (c *current) onDirectiveArguments1(arg, rest any) (any, error) {
	return append(append([]any{}, arg), maybeSlice[any](rest)...), nil
}

func (p *parser) callonDirectiveArguments1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveArguments1(stack["arg"], stack["rest"])
}

func (c *current) onDirectiveArgumentsRest1(args any) (any, error) {
	return args, nil
}

func (p *parser) callonDirectiveArgumentsRest1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveArgumentsRest1(stack["args"])
}

func (c *current) onTypeDeclaration1(name, typ any) (any, error) {
	return TypeDeclaration{
		Name: name.(Identifier),
		Type: typ.(Type),
	}, nil
}

func (p *parser) callonTypeDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeDeclaration1(stack["name"], stack["typ"])
}

func (c *current) onConstDeclaration1(name, typ, exp any) (any, error) {
	if typ == nil && exp == nil {
		return nil, fmt.Errorf("var statement must have a type or an expression")
	}

	return ConstDeclaration{
		Name: name.(Identifier),
		Expr: maybePtr[Expr](exp),
		Type: maybePtr[Type](typ),

		Position: pos(c),
	}, nil
}

func (p *parser) callonConstDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDeclaration1(stack["name"], stack["typ"], stack["exp"])
}

func (c *current) onParenthesizedType1(typ any) (any, error) {
	return ParenthesizedType{
		Type: typ.(Type),

		Position: pos(c),
	}, nil
}

func (p *parser) callonParenthesizedType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenthesizedType1(stack["typ"])
}

func (c *current) onPointerType1(pointee any) (any, error) {
	return PointerType{
		Pointee: pointee.(Type),

		Position: pos(c),
	}, nil
}

func (p *parser) callonPointerType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPointerType1(stack["pointee"])
}

func (c *current) onSliceType1(element any) (any, error) {
	return SliceType{
		Element: element.(Type),

		Position: pos(c),
	}, nil
}

func (p *parser) callonSliceType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSliceType1(stack["element"])
}

func (c *current) onArrayType1(length, element any) (any, error) {
	return ArrayType{
		Length:  length.(IntLiteral),
		Element: element.(Type),

		Position: pos(c),
	}, nil
}

func (p *parser) callonArrayType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayType1(stack["length"], stack["element"])
}

func (c *current) onTupleType1(elems any) (any, error) {
	return TupleType{
		Elements: maybeSlice[Type](elems),

		Position: pos(c),
	}, nil
}

func (p *parser) callonTupleType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleType1(stack["elems"])
}

func (c *current) onTupleTypeList1(elem, rest any) (any, error) {
	return append([]Type{elem.(Type)}, maybeSlice[Type](rest)...), nil
}

func (p *parser) callonTupleTypeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleTypeList1(stack["elem"], stack["rest"])
}

func (c *current) onTupleTypeListComma1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonTupleTypeListComma1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleTypeListComma1(stack["rest"])
}

func (c *current) onStructType1(elems any) (any, error) {
	return StructType{
		Fields: maybeSlice[StructField](elems),

		Position: pos(c),
	}, nil
}

func (p *parser) callonStructType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStructType1(stack["elems"])
}

func (c *current) onStructField1(name, typ any) (any, error) {
	return StructField{
		Name: name.(Identifier),
		Type: typ.(Type),

		Position: pos(c),
	}, nil
}

func (p *parser) callonStructField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStructField1(stack["name"], stack["typ"])
}

func (c *current) onStructFieldList1(field, rest any) (any, error) {
	return append([]StructField{field.(StructField)}, maybeSlice[StructField](rest)...), nil
}

func (p *parser) callonStructFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStructFieldList1(stack["field"], stack["rest"])
}

func (c *current) onStructFieldListNewline1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonStructFieldListNewline1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStructFieldListNewline1(stack["rest"])
}

func (c *current) onInterfaceType1(elems any) (any, error) {
	return InterfaceType{
		Methods: maybeSlice[InterfaceMethod](elems),

		Position: pos(c),
	}, nil
}

func (p *parser) callonInterfaceType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterfaceType1(stack["elems"])
}

func (c *current) onInterfaceMethod1(name, params, ret any) (any, error) {
	return InterfaceMethod{
		Name:       name.(Identifier),
		Parameters: maybeSlice[Parameter](params),
		Return:     maybe[Type](ret),

		Position: pos(c),
	}, nil
}

func (p *parser) callonInterfaceMethod1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterfaceMethod1(stack["name"], stack["params"], stack["ret"])
}

func (c *current) onInterfaceMethodList1(field, rest any) (any, error) {
	return append([]InterfaceMethod{field.(InterfaceMethod)}, maybeSlice[InterfaceMethod](rest)...), nil
}

func (p *parser) callonInterfaceMethodList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterfaceMethodList1(stack["field"], stack["rest"])
}

func (c *current) onInterfaceMethodListNewline1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonInterfaceMethodListNewline1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterfaceMethodListNewline1(stack["rest"])
}

func (c *current) onTupleKey1() (any, error) {
	return Identifier{
		Str:      string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonTupleKey1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleKey1()
}

func (c *current) onMapType1(key, value any) (any, error) {
	return MapType{Key: key.(Type), Value: value.(Type)}, nil
}

func (p *parser) callonMapType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMapType1(stack["key"], stack["value"])
}

func (c *current) onStatement1(stmt any) (any, error) {
	return stmt, nil
}

func (p *parser) callonStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatement1(stack["stmt"])
}

func (c *current) onSimpleStatement1(stmt any) (any, error) {
	return stmt, nil
}

func (p *parser) callonSimpleStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleStatement1(stack["stmt"])
}

func (c *current) onVarStatement2(name, typ, exp any) (any, error) {
	if typ == nil && exp == nil {
		return nil, fmt.Errorf("var statement must have a type or an expression")
	}

	return &VarStatement{
		Name: name.(Identifier),
		Expr: maybePtr[Expr](exp),
		Type: maybePtr[Type](typ),

		Position: pos(c),
	}, nil
}

func (p *parser) callonVarStatement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVarStatement2(stack["name"], stack["typ"], stack["exp"])
}

func (c *current) onVarStatement16() (any, error) {
	return nil, pos(c).WrapError(fmt.Errorf("cannot use expression as identifier in variable declaration"))
}

func (p *parser) callonVarStatement16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVarStatement16()
}

func (c *current) onVarStatementExpr1(exp any) (any, error) {
	return exp.(Expr), nil
}

func (p *parser) callonVarStatementExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVarStatementExpr1(stack["exp"])
}

func (c *current) onVarDeclaration2(name, typ, exp any) (any, error) {
	if typ == nil && exp == nil {
		return nil, fmt.Errorf("var statement must have a type or an expression")
	}

	return VarDeclaration{
		Name: name.(Identifier),
		Expr: maybePtr[Expr](exp),
		Type: maybePtr[Type](typ),

		Position: pos(c),
	}, nil
}

func (p *parser) callonVarDeclaration2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVarDeclaration2(stack["name"], stack["typ"], stack["exp"])
}

func (c *current) onVarDeclaration16() (any, error) {
	return nil, pos(c).WrapError(fmt.Errorf("cannot use expression as identifier in variable declaration"))
}

func (p *parser) callonVarDeclaration16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVarDeclaration16()
}

func (c *current) onVarDeclarationExpr1(exp any) (any, error) {
	return exp.(Expr), nil
}

func (p *parser) callonVarDeclarationExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVarDeclarationExpr1(stack["exp"])
}

func (c *current) onDeclarationStatement2(ident, exp any) (any, error) {
	return DeclarationStatement{
		Name: ident.(Identifier),
		Expr: exp.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonDeclarationStatement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeclarationStatement2(stack["ident"], stack["exp"])
}

func (c *current) onDeclarationStatement11() (any, error) {
	return nil, pos(c).WrapError(fmt.Errorf("cannot use expression as lhs of declaration"))
}

func (p *parser) callonDeclarationStatement11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeclarationStatement11()
}

func (c *current) onAssignmentStatement1(left, right any) (any, error) {
	return AssignmentStatement{
		Left:  left.(Expr),
		Right: right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonAssignmentStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignmentStatement1(stack["left"], stack["right"])
}

func (c *current) onAssignmentOperatorStatement1(left, op, right any) (any, error) {
	return AssignmentOperatorStatement{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonAssignmentOperatorStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignmentOperatorStatement1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onExprStatement1(exp any) (any, error) {
	return ExprStatement{
		Expr: exp.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonExprStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprStatement1(stack["exp"])
}

func (c *current) onPostfixStatement1(exp, op any) (any, error) {
	return PostfixStatement{
		Expr:     exp.(Expr),
		Operator: Operator(op.([]byte)),

		Position: pos(c),
	}, nil
}

func (p *parser) callonPostfixStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostfixStatement1(stack["exp"], stack["op"])
}

func (c *current) onIfStatement1(exp, body, rest any) (any, error) {
	return IfStatement{
		Condition: exp.(Expr),
		Body:      maybeSlice[Statement](body),
		Else:      maybe[ElseIfElseStatement](rest),

		Position: pos(c),
	}, nil
}

func (p *parser) callonIfStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfStatement1(stack["exp"], stack["body"], stack["rest"])
}

func (c *current) onElseIfStatement1(exp, body, rest any) (any, error) {
	return ElseIfStatement{
		Condition: exp.(Expr),
		Body:      maybeSlice[Statement](body),
		Else:      maybe[ElseIfElseStatement](rest),

		Position: pos(c),
	}, nil
}

func (p *parser) callonElseIfStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfStatement1(stack["exp"], stack["body"], stack["rest"])
}

func (c *current) onElseStatement1(body any) (any, error) {
	return ElseStatement{
		Body: maybeSlice[Statement](body),

		Position: pos(c),
	}, nil
}

func (p *parser) callonElseStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseStatement1(stack["body"])
}

func (c *current) onForStatement1(header, body any) (any, error) {
	if header == nil {
		return ForStatement{
			Body: maybeSlice[Statement](body),

			Position: pos(c),
		}, nil
	}

	f := header.(ForStatement)
	f.Body = maybeSlice[Statement](body)
	f.Position = pos(c)
	return f, nil
}

func (p *parser) callonForStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForStatement1(stack["header"], stack["body"])
}

func (c *current) onForStatementStatements1(init, cond, step any) (any, error) {
	return ForStatement{
		Init:      maybe[Statement](init),
		Condition: maybe[Expr](cond),
		Step:      maybe[Statement](step),
	}, nil
}

func (p *parser) callonForStatementStatements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForStatementStatements1(stack["init"], stack["cond"], stack["step"])
}

func (c *current) onReturnStatement1(expr any) (any, error) {
	return ReturnStatement{
		Expr: maybe[Expr](expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonReturnStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturnStatement1(stack["expr"])
}

func (c *current) onExternFuncDeclaration1(name, params, ret any) (any, error) {
	return ExternFunctionDeclaration{
		Name:       name.(Identifier),
		Parameters: maybeSlice[Parameter](params),
		Return:     maybe[Type](ret),

		Position: pos(c),
	}, nil
}

func (p *parser) callonExternFuncDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternFuncDeclaration1(stack["name"], stack["params"], stack["ret"])
}

func (c *current) onFunctionDeclaration1(name, params, ret, body any) (any, error) {
	return FunctionDeclaration{
		Name:       name.(Identifier),
		Parameters: maybeSlice[Parameter](params),
		Return:     maybe[Type](ret),
		Body:       maybeSlice[Statement](body),

		Position: pos(c),
	}, nil
}

func (p *parser) callonFunctionDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionDeclaration1(stack["name"], stack["params"], stack["ret"], stack["body"])
}

func (c *current) onFunctionType1(params, ret any) (any, error) {
	return FunctionType{
		Parameters: maybeSlice[Parameter](params),
		Return:     maybe[Type](ret),

		Position: pos(c),
	}, nil
}

func (p *parser) callonFunctionType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionType1(stack["params"], stack["ret"])
}

func (c *current) onMethodDeclaration1(receiver, name, params, ret, body any) (any, error) {
	return MethodDeclaration{
		Name:       name.(Identifier),
		Receiver:   receiver.(Parameter),
		Parameters: maybeSlice[Parameter](params),
		Return:     maybe[Type](ret),
		Body:       maybeSlice[Statement](body),

		Position: pos(c),
	}, nil
}

func (p *parser) callonMethodDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethodDeclaration1(stack["receiver"], stack["name"], stack["params"], stack["ret"], stack["body"])
}

func (c *current) onStatementList1(stmt, rest any) (any, error) {
	if stmt == nil {
		return rest, nil
	}
	return append(
		[]Statement{stmt.(Statement)},
		maybeSlice[Statement](rest)...,
	), nil
}

func (p *parser) callonStatementList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatementList1(stack["stmt"], stack["rest"])
}

func (c *current) onParameterUnnamed1(typ any) (any, error) {
	return Parameter{
		Type: typ.(Type),

		Position: pos(c),
	}, nil
}

func (p *parser) callonParameterUnnamed1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterUnnamed1(stack["typ"])
}

func (c *current) onParameterUntyped1(name any) (any, error) {
	return Parameter{
		Name: maybePtr[Identifier](name),

		Position: pos(c),
	}, nil
}

func (p *parser) callonParameterUntyped1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterUntyped1(stack["name"])
}

func (c *current) onParameterNamed1(name, typ any) (any, error) {
	return Parameter{
		Name: maybePtr[Identifier](name),
		Type: typ.(Type),

		Position: pos(c),
	}, nil
}

func (p *parser) callonParameterNamed1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterNamed1(stack["name"], stack["typ"])
}

func (c *current) onParameterList2() (any, error) {
	// empty parameter list
	return []Parameter{}, nil
}

func (p *parser) callonParameterList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterList2()
}

func (c *current) onParameterList5(param any) (any, error) {
	// single param is assumed to be type
	return []Parameter{param.(Parameter)}, nil
}

func (p *parser) callonParameterList5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterList5(stack["param"])
}

func (c *current) onParameterList13(param, rest any) (any, error) {
	// named parameter list
	restSlice := maybeSlice[Parameter](rest)
	if slices.ContainsFunc(restSlice, func(p Parameter) bool {
		return p.Name == nil
	}) {
		return nil, pos(c).WrapError(fmt.Errorf("mixed named and unnamed parameters"))
	}
	return append([]Parameter{param.(Parameter)}, restSlice...), nil
}

func (p *parser) callonParameterList13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterList13(stack["param"], stack["rest"])
}

func (c *current) onParameterList22(param, rest any) (any, error) {
	// unnamed parameter list
	restSlice := maybeSlice[Parameter](rest)
	if slices.ContainsFunc(restSlice, func(p Parameter) bool {
		return p.Name != nil
	}) {
		return nil, pos(c).WrapError(fmt.Errorf("mixed named and unnamed parameters"))
	}
	return append([]Parameter{param.(Parameter)}, restSlice...), nil
}

func (p *parser) callonParameterList22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterList22(stack["param"], stack["rest"])
}

func (c *current) onParameterListComma1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonParameterListComma1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterListComma1(stack["rest"])
}

func (c *current) onIdentifier1() (any, error) {
	return Identifier{
		Str: string(c.text),

		Position: pos(c),
	}, nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onParenthesizedExpr1(expr any) (any, error) {
	return ParenthesizedExpr{
		Expr: expr.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonParenthesizedExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenthesizedExpr1(stack["expr"])
}

func (c *current) onIntLiteral1() (any, error) {
	i, err := strconv.ParseInt(string(c.text), 0, 64)
	if err != nil {
		return 0, err
	}

	return IntLiteral{
		Value: i,

		Position: pos(c),
	}, nil
}

func (p *parser) callonIntLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntLiteral1()
}

func (c *current) onFloatLiteral1() (any, error) {
	f, err := strconv.ParseFloat(string(c.text), 64)
	if err != nil {
		return 0, err
	}

	return FloatLiteral{
		Value: f,

		Position: pos(c),
	}, nil
}

func (p *parser) callonFloatLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1()
}

func (c *current) onStringLiteral1() (any, error) {
	c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
	str, err := strconv.Unquote(string(c.text))
	if err != nil {
		return nil, err
	}

	return StringLiteral{
		Value: str,

		Position: pos(c),
	}, nil
}

func (p *parser) callonStringLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1()
}

func (c *current) onBoolLiteral1() (any, error) {
	return BoolLiteral{
		Value: string(c.text) == "true",

		Position: pos(c),
	}, nil
}

func (p *parser) callonBoolLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolLiteral1()
}

func (c *current) onIdentifierExpr1(ident any) (any, error) {
	return IdentifierExpr{
		Identifier: ident.(Identifier),

		Position: pos(c),
	}, nil
}

func (p *parser) callonIdentifierExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierExpr1(stack["ident"])
}

func (c *current) onCallExpr1(exp, args any) (any, error) {
	log.Printf("%s", c.text)
	call := CallExpr{
		Expr: exp.(Expr),

		Position: pos(c),
	}

	if args != nil {
		call.Args = args.([]Expr)
	}

	return call, nil
}

func (p *parser) callonCallExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallExpr1(stack["exp"], stack["args"])
}

func (c *current) onCallArgumentList1(exp, rest any) (any, error) {
	return append([]Expr{exp.(Expr)}, maybeSlice[Expr](rest)...), nil
}

func (p *parser) callonCallArgumentList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallArgumentList1(stack["exp"], stack["rest"])
}

func (c *current) onCallArgumentListComma1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonCallArgumentListComma1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallArgumentListComma1(stack["rest"])
}

func (c *current) onDotExpr1(exp, ident any) (any, error) {
	return DotExpr{
		Expr: exp.(Expr),
		Key:  ident.(Identifier),

		Position: pos(c),
	}, nil
}

func (p *parser) callonDotExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotExpr1(stack["exp"], stack["ident"])
}

func (c *current) onIndexExpr1(expr, index any) (any, error) {
	return IndexExpr{
		Expr:  expr.(Expr),
		Index: index.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonIndexExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpr1(stack["expr"], stack["index"])
}

func (c *current) onExpExpr1(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonExpExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onMulExpr1(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonMulExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMulExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onAddExpr1(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonAddExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onCmpExpr1(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonCmpExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCmpExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onAndExpr1(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonAndExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onOrExpr1(left, op, right any) (any, error) {
	return BinaryExpr{
		Left:     left.(Expr),
		Operator: Operator(op.([]byte)),
		Right:    right.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonOrExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onUnaryExpr1(op, exp any) (any, error) {
	return UnaryExpr{
		Operator: Operator(op.([]byte)),
		Expr:     exp.(Expr),

		Position: pos(c),
	}, nil
}

func (p *parser) callonUnaryExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnaryExpr1(stack["op"], stack["exp"])
}

func (c *current) onTupleExpr1(args any) (any, error) {
	tuple := TupleExpr{
		Elems: maybeSlice[Expr](args),

		Position: pos(c),
	}

	return tuple, nil
}

func (p *parser) callonTupleExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleExpr1(stack["args"])
}

func (c *current) onTupleArgumentList1(exp, rest any) (any, error) {
	return append([]Expr{exp.(Expr)}, maybeSlice[Expr](rest)...), nil
}

func (p *parser) callonTupleArgumentList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleArgumentList1(stack["exp"], stack["rest"])
}

func (c *current) onTupleArgumentListComma1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonTupleArgumentListComma1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleArgumentListComma1(stack["rest"])
}

func (c *current) onArrayExpr1(length, typ, args any) (any, error) {
	argsSlice := maybeSlice[Expr](args)

	lengthLiteral, ok := length.(IntLiteral)
	if !ok {
		lengthLiteral = IntLiteral{
			Value: int64(len(argsSlice)),
		}
	}
	arr := ArrayExpr{
		Length: lengthLiteral,
		Type:   typ.(Type),
		Elems:  argsSlice,

		Position: pos(c),
	}

	return arr, nil
}

func (p *parser) callonArrayExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayExpr1(stack["length"], stack["typ"], stack["args"])
}

func (c *current) onArrayArgumentList1(exp, rest any) (any, error) {
	return append([]Expr{exp.(Expr)}, maybeSlice[Expr](rest)...), nil
}

func (p *parser) callonArrayArgumentList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayArgumentList1(stack["exp"], stack["rest"])
}

func (c *current) onArrayArgumentListComma1(rest any) (any, error) {
	return rest, nil
}

func (p *parser) callonArrayArgumentListComma1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayArgumentListComma1(stack["rest"])
}

func (c *current) onc_10() (any, error) {
	return nil, pos(c).WrapError(fmt.Errorf("expected , before newline"))
}

func (p *parser) callonc_10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onc_10()
}

func (c *current) once_8() (any, error) {
	return nil, pos(c).WrapError(fmt.Errorf("expected , before newline"))
}

func (p *parser) callonce_8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.once_8()
}

func (c *current) oncomment1() (any, error) {
	return nil, nil
}

func (p *parser) calloncomment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomment1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any

	leader        bool
	leftRecursive bool
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type ruleWithExpsStack struct {
	rule   *rule
	estack []any
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleRecursiveLeader(rule *rule) (any, bool) {
	result, ok := p.getMemoized(rule)
	if ok {
		p.restore(result.end)
		return result.v, result.b
	}

	if p.debug {
		defer p.out(p.in("recursive " + rule.name))
	}

	var (
		depth      = 0
		startMark  = p.pt
		lastResult = resultTuple{nil, false, startMark}
		lastErrors = *p.errs
	)

	for {
		lastState := p.cloneState()
		p.setMemoized(startMark, rule, lastResult)
		val, ok := p.parseRule(rule)
		endMark := p.pt
		if p.debug {
			p.printIndent("RECURSIVE", fmt.Sprintf(
				"Rule %s depth %d: %t -> %s",
				rule.name, depth, ok, string(p.sliceFrom(startMark))))
		}
		if (!ok) || (endMark.offset <= lastResult.end.offset && depth != 0) {
			p.restoreState(lastState)
			*p.errs = lastErrors
			break
		}
		lastResult = resultTuple{val, ok, endMark}
		lastErrors = *p.errs
		p.restore(startMark)
		depth++
	}

	p.restore(lastResult.end)
	p.setMemoized(startMark, rule, lastResult)
	return lastResult.v, lastResult.b
}

func (p *parser) parseRuleRecursiveNoLeader(rule *rule) (any, bool) {
	return p.parseRule(rule)
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize || rule.leftRecursive {
		if rule.leader {
			val, ok = p.parseRuleRecursiveLeader(rule)
		} else if p.memoize && !rule.leftRecursive {
			val, ok = p.parseRuleMemoize(rule)
		} else {
			val, ok = p.parseRuleRecursiveNoLeader(rule)
		}
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	isLeftRecusion := p.rstack[len(p.rstack)-1].leftRecursive
	if p.memoize && !isLeftRecusion {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize && !isLeftRecusion {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
