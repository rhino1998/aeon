
function @__builtin_sin($n:number):number
	return sin($n)

function @__builtin_cos($n:number):number
	return cos($n)

function @print($s:text)
	print($s)

function @printInt($n:number)
	print($n)

function @itoa($n:number):text
	return $n:text

function @print3($a:text, $b:text, $c:text)
	print(text("print3 {} {} {}", $a, $b, $c))

function @add($a:number, $b:number):number
	return $a + $b


const $PAGE_SIZE = {{.PageSize}}

{{range $page := loop 0 .NumCodePages -}}
array $aeon_code_page_{{$page}}_c:text
{{end}}
{{range $page := loop 0 .NumMemPages -}}
array $aeon_mem_page_{{$page}}_c:text
{{end}}
array $aeon_reg:text

function @aeon_fatal()
	var $x = "hello"
	$x = $x:number

function @aeon_trunc($a:number):number
	if ($a > 0)
		return floor($a)
	return ceil($a)

function @aeon_code_init()
	{{range $page := loop 0 .NumCodePages}}$aeon_code_page_{{$page}}_c.fill(65535, ""){{"\n\t"}}{{end}}
	{{range $addr, $bc := .Code}}$aeon_code_page_{{$addr.Page}}_c.{{$addr.Addr}} = "{{$bc}}"{{"\n\t"}}{{end}}

function @aeon_code($addr:number):text
	var $page = @aeon_trunc($addr / $PAGE_SIZE)
	var $pageAddr = @aeon_trunc($addr % $PAGE_SIZE)
	{{range $page := loop 0 .NumCodePages}}
	if ($page == {{$page}})
		return $aeon_code_page_{{$page}}_c.$pageAddr
	{{ end }}

function @aeon_reg_load($reg:number):text
	return $aeon_reg.$reg

function @aeon_reg_store($reg:number, $v:text):text
	$aeon_reg.$reg = $v

function @aeon_reg_init()
	$aeon_reg.fill({{.NumRegisters}}, "")

function @aeon_mem_load($addr:number):text
	var $page = @aeon_trunc($addr / $PAGE_SIZE)
	var $pageAddr = @aeon_trunc($addr % $PAGE_SIZE)
	{{range $page := loop 0 .NumMemPages}}
	if ($page == {{$page}})
		return $aeon_mem_page_{{$page}}_c.$pageAddr
	{{end}}

function @aeon_mem_store($addr:number, $v:text):text
	var $page = @aeon_trunc($addr / $PAGE_SIZE)
	var $pageAddr = @aeon_trunc($addr % $PAGE_SIZE)

	{{range $page := loop 0 .NumMemPages}}
	if ($page == {{$page}})
		$aeon_mem_page_{{$page}}_c.$pageAddr = $v
	{{end}}

function @aeon_mem_init()
	{{range $page := loop 0 .NumMemPages}}$aeon_mem_page_{{$page}}_c.fill($PAGE_SIZE, ""){{"\n\t"}}{{end}}

{{ range $i := loop 0 .MaxLoadDepth}}
function @aeon_load_{{$i}}($op:text):text
	;print(text("load: {}", $op))
	var $val = $op.v
	if ($op.k == "I")
		return $val
	elseif ($op.k == "R")
		{{if eq $i 0}}@aeon_fatal(){{else}}return @aeon_reg_load($op.v:number){{end}}
	elseif ($op.k == "@")
		{{if eq $i 0}}@aeon_fatal(){{else}}return @aeon_mem_load(@aeon_load_{{sub $i 1}}($val.p):number){{end}}
	elseif ($op.k == "+")
		{{if eq $i 0}}@aeon_fatal(){{else}}return (@aeon_load_{{sub $i 1}}($val.a):number + @aeon_load_{{sub $i 1}}($val.b):number):text{{end}}
	elseif ($op.k == "*")
		{{if eq $i 0}}@aeon_fatal(){{else}}return (@aeon_load_{{sub $i 1}}($val.a):number * @aeon_load_{{sub $i 1}}($val.b):number):text{{end}}
	elseif ($op.k == "!")
		{{if eq $i 0}}@aeon_fatal(){{else}}return (!(@aeon_load_{{sub $i 1}}($val.a):number)):text{{end}}
	else
		print(text("bad operand for load {}", $op))
		@aeon_fatal()
{{end}}

function @aeon_load($op:text):text
	return @aeon_load_{{sub .MaxLoadDepth 1}}($op)

function @aeon_load_field($op:text, $offset:number):text
	return @aeon_mem_load(@aeon_load($op):number + $offset)

function @aeon_store($op:text, $v:text)
	;print(text("store: {}", $op))
	var $val = $op.v
	if ($op.k == "R")
		@aeon_reg_store($val:number, $v)
	elseif ($op.k == "@")
		@aeon_mem_store(@aeon_load($val.p), $v)
	else
		print(text("bad operand for store {}", $op))
		@aeon_fatal()

function @aeon_store_field($op:text, $offset:number, $value:text)
	@aeon_store(@aeon_load($op):number + $offset, $value)

function @aeon_pow_int($a:text, $b:text):text
	return pow(@aeon_trunc($a:number), @aeon_trunc($b:number)):text

function @aeon_pow_float($a:text, $b:text):text
	return pow($a:number, $b:number):text

function @aeon_add_int($a:text, $b:text):text
	return (@aeon_trunc($a:number) + @aeon_trunc($b:number)):text

function @aeon_add_float($a:text, $b:text):text
	return ($a:number + $b:number):text

function @aeon_add_string($a:text, $b:text):text
	return $a & $b

function @aeon_sub_int($a:text, $b:text):text
	return (@aeon_trunc($a:number) - @aeon_trunc($b:number)):text

function @aeon_sub_float($a:text, $b:text):text
	return ($a:number - $b:number):text

function @aeon_mul_int($a:text, $b:text):text
	return (@aeon_trunc($a:number) * @aeon_trunc($b:number)):text

function @aeon_mul_float($a:text, $b:text):text
	return ($a:number * $b:number)):text

function @aeon_div_int($a:text, $b:text):text
	return (@aeon_trunc($a:number) * @aeon_trunc($b:number)):text

function @aeon_div_float($a:text, $b:text):text
	return ($a:number * $b:number):text

function @aeon_mod_int($a:text, $b:text):text
	return (@aeon_trunc($a:number) % @aeon_trunc($b:number)):text

function @aeon_lt($a:text, $b:text):text
	return ($a:number < $b:number):text

function @aeon_gt($a:text, $b:text):text
	return ($a:number > $b:number):text

function @aeon_lte($a:text, $b:text):text
	return ($a:number < $b:number):text

function @aeon_gte($a:text, $b:text):text
	return ($a:number > $b:number):text

function @aeon_eq_int($a:text, $b:text):text
	return (@aeon_trunc($a:number) == @aeon_trunc($b:number)):text

function @aeon_eq_float($a:text, $b:text):text
	return ($a:number == $b:number):text

function @aeon_eq_bool($a:text, $b:text):text
	return (!$a:number == !$b:number):text

function @aeon_eq_string($a:text, $b:text):text
	return ($a == $b):text

function @aeon_ne_int($a:text, $b:text):text
	return (@aeon_trunc($a:number) != @aeon_trunc($b:number)):text

function @aeon_ne_float($a:text, $b:text):text
	return ($a:number != $b:number):text

function @aeon_ne_bool($a:text, $b:text):text
	return (!$a:number != !$b:number):text

function @aeon_ne_string($a:text, $b:text):text
	return ($a != $b):text

function @aeon_call_extern($fname:text, $size:number)
	var $sp = @aeon_reg_load(1):number
	{{ range $entry := .ExternFuncs }}
	if ($fname == "{{$entry.Name}}")
		{{if $entry.HasReturn}}@aeon_mem_store(@aeon_reg_load(1):number - $size, {{end}}@{{$entry.Name}}({{range $i, $t := $entry.ArgTypes}}{{if $i }},{{end}}@aeon_mem_load($sp-{{len $entry.ArgTypes}}+{{$i}}){{$t}}{{end}}){{if $entry.HasReturn}}){{end}}
	{{ end }}

function @aeon_bop($op:text, $a:text, $b:text):text
	var $av = @aeon_load($a)
	var $bv = @aeon_load($b)

	if ($op == "I+I")
		return @aeon_add_int($av, $bv)
	elseif ($op == "F+F")
		return @aeon_add_float($av, $bv)
	elseif ($op == "S+S")
		return @aeon_add_string($av, $bv)
	elseif ($op == "I-I")
		return @aeon_sub_int($av, $bv)
	elseif ($op == "F-F")
		return @aeon_sub_float($av, $bv)
	elseif ($op == "I*I")
		return @aeon_mul_int($av, $bv)
	elseif ($op == "F*F")
		return @aeon_mul_float($av, $bv)
	elseif ($op == "I/I")
		return @aeon_div_int($av, $bv)
	elseif ($op == "F/F")
		return @aeon_div_float($av, $bv)
	elseif ($op == "I%I")
		return @aeon_mod_int($av, $bv)
	elseif ($op == "I**I")
		return @aeon_pow_int($av, $bv)
	elseif ($op == "F**F")
		return @aeon_pow_float($av, $bv)
	elseif ($op == "I<I")
		return @aeon_lt($av, $bv)
	elseif ($op == "I>I")
		return @aeon_gt($av, $bv)
	elseif ($op == "F<F")
		return @aeon_lt($av, $bv)
	elseif ($op == "F>F")
		return @aeon_gt($av, $bv)
	elseif ($op == "I<=I")
		return @aeon_lte($av, $bv)
	elseif ($op == "I>=I")
		return @aeon_gte($av, $bv)
	elseif ($op == "F<=F")
		return @aeon_lte($av, $bv)
	elseif ($op == "F>=F")
		return @aeon_gte($av, $bv)
	elseif ($op == "I==I")
		return @aeon_eq_int($av, $bv)
	elseif ($op == "F==F")
		return @aeon_eq_float($av, $bv)
	elseif ($op == "S==S")
		return @aeon_eq_string($av, $bv)
	elseif ($op == "B==B")
		return @aeon_eq_bool($av, $bv)
	elseif ($op == "I!=I")
		return @aeon_ne_int($av, $bv)
	elseif ($op == "F!=F")
		return @aeon_ne_float($av, $bv)
	elseif ($op == "S!=S")
		return @aeon_ne_string($av, $bv)
	elseif ($op == "B!=B")
		return @aeon_ne_bool($av, $bv)
	else
		print(text("bad binary operand {} {} {}", $op, $a, $b))
		@aeon_fatal()

function @aeon_run($pc:number):text
	@aeon_reg_init()
	@aeon_reg_store(0, $pc:text)
	@aeon_reg_store(1, "{{.GlobalSize}}")
	repeat {{.NumRegisters}} ($reg)
		if ($reg == 0)
			continue
		@aeon_mem_store(@aeon_reg_store(1):number, "0")
		@aeon_reg_store(1, (@aeon_reg_load(1):number+1):text)
	@aeon_reg_store(2, (@aeon_reg_load(1):number - 1):text)




	var $i = 0

	while ($i < 10000000)
		$i++

		var $bc = @aeon_code($aeon_reg.0:number)
		$aeon_reg.0 = ($aeon_reg.0:number + 1):text
		{{if .Debug}}print(text("{} {} {} {} {}", $i, @aeon_reg_load(0), @aeon_reg_load(1), @aeon_reg_load(2), $bc)){{end}}

		if ($bc.t == "nop")
			continue
		elseif ($bc.t == "mov")
			@aeon_store($bc.d, @aeon_load($bc.s))
		elseif ($bc.t == "bop")
			@aeon_store($bc.d, @aeon_bop($bc.o, $bc.l, $bc.r))
		elseif ($bc.t == "jmp")
			if (@aeon_load($bc.s):number)
				$aeon_reg.0 = @aeon_load($bc.d)
		elseif ($bc.t == "call")
			var $ftype = @aeon_load_field($bc.f, 0):number
			$aeon_reg.1 = ($aeon_reg.1:number + $bc.a:number):text)
			if ($ftype == 0)
				var $fname = @aeon_load_field($bc.f, 3)
			 	{{if .Debug}}print(text("extern {}", $fname)){{end}}
				@aeon_call_extern($fname, $bc.a:number)
				$aeon_reg.1 = ($aeon_reg.1:number - $bc.a:number):text
			else
				print("unrecognized call function type")
				@aeon_fatal()
		elseif ($bc.t == "ret")
			var $fp = $aeon_reg.2:number
			$aeon_reg.0 = @aeon_mem_load($fp)
			repeat {{$.NumRegisters}} ($reg)
				if ($reg == 0)
					continue
				$aeon_reg.$reg = @aeon_mem_load($fp-1-$reg)

			$aeon_reg.1 = ($aeon_reg.1:number - $bc.a:number):text

			if ($aeon_reg.0:number == 0) {
				return
			}
		else
			print("fail", $bc)
			@aeon_fatal()
			return

init
	@aeon_reg_init()
	@aeon_code_init()
	@aeon_mem_init()
{{range $addr := .VarInitFuncs}}{{"\t"}}@aeon_run({{$addr}}){{"\n"}}{{end}}
{{range $addr := .InitFuncs}}{{"\t"}}@aeon_run({{$addr}}){{"\n"}}{{end}}

tick
{{range $addr := .UpdateFuncs}}{{"\t"}}@aeon_run({{$addr}}){{"\n"}}{{end}}
