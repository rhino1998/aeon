package main

extern func itoa(a int) string

extern func print(a string)

extern func printInt(a int)

extern func print3(a string, b string, c string)

extern func add(a int, b int) int

type iface interface {
  l()
}

type A int

func (a A) l() {
  print("A")
  print(itoa(int(a)))
}

type B [1]int

func (b B) l() {
  print("B")
  print(itoa(b[0]))
}

type C struct {
  X int
}

func (c C) l() {
  print("C")
  print(itoa(c.X))
}

type D (int,)

func (d D) l() {
  print("d")
  print(itoa(int(d.0)))
}


type E int

func (e *E) l() {
  print("E")
  print(itoa(int(*e)))
}

type F func()

func (f F) l() {
  f()
}

func fImpl() {
  print("F")
  print("6")
}

type G ()

func (g G) l() {
  print("G")
  print("7")
}

type H int

func (h H) l() {
	print("H")
	print(itoa(int(h)))
}

#init
func f2() {
  var e int = 5
  var c C
	var h H = 8

	assert(1==1, "example text here")

  c.X = 3
  x := [...]iface{
    A(1),
    B([...]int{2}),
    c,
    D((4,)),
    (*E)(&e),
    F(fImpl),
    G(()),
		&h,
  }

  for i := 0; i < len(x); i++ {
    x[i].l()
  }
}
