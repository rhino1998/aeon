package main

type intIntMap map[int]int

type A *B

type B [3]int

extern func itoa(a int) string

extern func print(a string)

extern func printInt(a int)

extern func print3(a string, b string, c string)

extern func add(a int, b int) int

var d any

type iface interface {
  l()
}

type G [1]int

func (g G) l() {
  print("G")
  print(itoa(g[0]))
}

type F (int,)

func (f F) l() {
  print("F")
  print(itoa(int(f.0)))
}

type C struct {
  F func(D)
}

type D int

func (d D) l() {
  print("D")
	print(itoa(int(d)))
}

type E int

func (d E) l() {
  print("E")
	print(itoa(int(d)))
}

func h(d D) {
	d.l()
}

func f3(a,b,c int) {
}

#init
func f2() {
  f3(1,2,3)
  x := [...]iface{
    E(7),
    E(4),
    D(6),
    F((8,)),
    F((1,)),
    F((1,)),
    F((1,)),
    G([...]int{9}),
  }

  for i := 0; i < len(x); i++ {
    x[i].l()
  }
}
